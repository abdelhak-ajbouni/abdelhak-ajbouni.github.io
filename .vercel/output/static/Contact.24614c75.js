import{R as J,r as F}from"./chunks/index.54d6b5cf.js";import{j as E}from"./chunks/jsx-runtime.fc2968d6.js";var fe=e=>e.type==="checkbox",ie=e=>e instanceof Date,P=e=>e==null;const mt=e=>typeof e=="object";var O=e=>!P(e)&&!Array.isArray(e)&&mt(e)&&!ie(e),Ut=e=>O(e)&&e.target?fe(e.target)?e.target.checked:e.target.value:e,$t=e=>e.substring(0,e.search(/\.\d+(\.|$)/))||e,Bt=(e,t)=>e.has($t(t)),ye=e=>Array.isArray(e)?e.filter(Boolean):[],C=e=>e===void 0,g=(e,t,s)=>{if(!t||!O(e))return s;const o=ye(t.split(/[,[\].]+?/)).reduce((r,a)=>P(r)?r:r[a],e);return C(o)||o===e?C(e[t])?s:e[t]:o};const it={BLUR:"blur",FOCUS_OUT:"focusout",CHANGE:"change"},q={onBlur:"onBlur",onChange:"onChange",onSubmit:"onSubmit",onTouched:"onTouched",all:"all"},W={max:"max",min:"min",maxLength:"maxLength",minLength:"minLength",pattern:"pattern",required:"required",validate:"validate"};J.createContext(null);var qt=(e,t,s,o=!0)=>{const r={defaultValues:t._defaultValues};for(const a in e)Object.defineProperty(r,a,{get:()=>{const l=a;return t._proxyFormState[l]!==q.all&&(t._proxyFormState[l]=!o||q.all),s&&(s[l]=!0),e[l]}});return r},U=e=>O(e)&&!Object.keys(e).length,Ht=(e,t,s)=>{const{name:o,...r}=e;return U(r)||Object.keys(r).length>=Object.keys(t).length||Object.keys(r).find(a=>t[a]===(!s||q.all))},Ie=e=>Array.isArray(e)?e:[e];function zt(e){const t=J.useRef(e);t.current=e,J.useEffect(()=>{const s=!e.disabled&&t.current.subject.subscribe({next:t.current.next});return()=>{s&&s.unsubscribe()}},[e.disabled])}var z=e=>typeof e=="string",Wt=(e,t,s,o)=>z(e)?(o&&t.watch.add(e),g(s,e)):Array.isArray(e)?e.map(r=>(o&&t.watch.add(r),g(s,r))):(o&&(t.watchAll=!0),s),Kt=e=>{const t=e.constructor&&e.constructor.prototype;return O(t)&&t.hasOwnProperty("isPrototypeOf")},Be=typeof window<"u"&&typeof window.HTMLElement<"u"&&typeof document<"u";function Q(e){let t;const s=Array.isArray(e);if(e instanceof Date)t=new Date(e);else if(e instanceof Set)t=new Set(e);else if(!(Be&&(e instanceof Blob||e instanceof FileList))&&(s||O(e)))if(t=s?[]:{},!Array.isArray(e)&&!Kt(e))t=e;else for(const o in e)t[o]=Q(e[o]);else return e;return t}var Jt=(e,t,s,o,r)=>t?{...s[e],types:{...s[e]&&s[e].types?s[e].types:{},[o]:r||!0}}:{},Je=e=>/^\w*$/.test(e),xt=e=>ye(e.replace(/["|']|\]/g,"").split(/\.|\[/));function D(e,t,s){let o=-1;const r=Je(t)?[t]:xt(t),a=r.length,l=a-1;for(;++o<a;){const u=r[o];let y=s;if(o!==l){const p=e[u];y=O(p)||Array.isArray(p)?p:isNaN(+r[o+1])?{}:[]}e[u]=y,e=e[u]}return e}const qe=(e,t,s)=>{for(const o of s||Object.keys(e)){const r=g(e,o);if(r){const{_f:a,...l}=r;if(a&&t(a.name)){if(a.ref.focus){a.ref.focus();break}else if(a.refs&&a.refs[0].focus){a.refs[0].focus();break}}else O(l)&&qe(l,t)}}};var at=e=>({isOnSubmit:!e||e===q.onSubmit,isOnBlur:e===q.onBlur,isOnChange:e===q.onChange,isOnAll:e===q.all,isOnTouch:e===q.onTouched}),ot=(e,t,s)=>!s&&(t.watchAll||t.watch.has(e)||[...t.watch].some(o=>e.startsWith(o)&&/^\.\w+/.test(e.slice(o.length)))),Yt=(e,t,s)=>{const o=ye(g(e,s));return D(o,"root",t[s]),D(e,s,o),e},ae=e=>typeof e=="boolean",Ye=e=>e.type==="file",oe=e=>typeof e=="function",we=e=>z(e)||J.isValidElement(e),Ge=e=>e.type==="radio",De=e=>e instanceof RegExp;const nt={value:!1,isValid:!1},lt={value:!0,isValid:!0};var bt=e=>{if(Array.isArray(e)){if(e.length>1){const t=e.filter(s=>s&&s.checked&&!s.disabled).map(s=>s.value);return{value:t,isValid:!!t.length}}return e[0].checked&&!e[0].disabled?e[0].attributes&&!C(e[0].attributes.value)?C(e[0].value)||e[0].value===""?lt:{value:e[0].value,isValid:!0}:lt:nt}return nt};const ct={isValid:!1,value:null};var vt=e=>Array.isArray(e)?e.reduce((t,s)=>s&&s.checked&&!s.disabled?{isValid:!0,value:s.value}:t,ct):ct;function ut(e,t,s="validate"){if(we(e)||Array.isArray(e)&&e.every(we)||ae(e)&&!e)return{type:s,message:we(e)?e:"",ref:t}}var se=e=>O(e)&&!De(e)?e:{value:e,message:""},dt=async(e,t,s,o,r)=>{const{ref:a,refs:l,required:u,maxLength:y,minLength:p,min:v,max:k,pattern:w,validate:x,name:T,valueAsNumber:Ce,mount:he,disabled:Ne}=e._f;if(!he||Ne)return{};const I=l?l[0]:a,R=b=>{o&&I.reportValidity&&(I.setCustomValidity(ae(b)?"":b||""),I.reportValidity())},N={},ge=Ge(a),ne=fe(a),me=ge||ne,re=(Ce||Ye(a))&&C(a.value)&&C(t)||t===""||Array.isArray(t)&&!t.length,$=Jt.bind(null,T,s,N),xe=(b,_,A,L=W.maxLength,H=W.minLength)=>{const B=b?_:A;N[T]={type:b?L:H,message:B,ref:a,...$(b?L:H,B)}};if(r?!Array.isArray(t)||!t.length:u&&(!me&&(re||P(t))||ae(t)&&!t||ne&&!bt(l).isValid||ge&&!vt(l).isValid)){const{value:b,message:_}=we(u)?{value:!!u,message:u}:se(u);if(b&&(N[T]={type:W.required,message:_,ref:I,...$(W.required,_)},!s))return R(_),N}if(!re&&(!P(v)||!P(k))){let b,_;const A=se(k),L=se(v);if(!P(t)&&!isNaN(t)){const H=a.valueAsNumber||t&&+t;P(A.value)||(b=H>A.value),P(L.value)||(_=H<L.value)}else{const H=a.valueAsDate||new Date(t),B=be=>new Date(new Date().toDateString()+" "+be),le=a.type=="time",Z=a.type=="week";z(A.value)&&t&&(b=le?B(t)>B(A.value):Z?t>A.value:H>new Date(A.value)),z(L.value)&&t&&(_=le?B(t)<B(L.value):Z?t<L.value:H<new Date(L.value))}if((b||_)&&(xe(!!b,A.message,L.message,W.max,W.min),!s))return R(N[T].message),N}if((y||p)&&!re&&(z(t)||r&&Array.isArray(t))){const b=se(y),_=se(p),A=!P(b.value)&&t.length>b.value,L=!P(_.value)&&t.length<_.value;if((A||L)&&(xe(A,b.message,_.message),!s))return R(N[T].message),N}if(w&&!re&&z(t)){const{value:b,message:_}=se(w);if(De(b)&&!t.match(b)&&(N[T]={type:W.pattern,message:_,ref:a,...$(W.pattern,_)},!s))return R(_),N}if(x){if(oe(x)){const b=await x(t),_=ut(b,I);if(_&&(N[T]={..._,...$(W.validate,_.message)},!s))return R(_.message),N}else if(O(x)){let b={};for(const _ in x){if(!U(b)&&!s)break;const A=ut(await x[_](t),I,_);A&&(b={...A,...$(_,A.message)},R(A.message),s&&(N[T]=b))}if(!U(b)&&(N[T]={ref:I,...b},!s))return N}}return R(!0),N};function Gt(e,t){const s=t.slice(0,-1).length;let o=0;for(;o<s;)e=C(e)?o++:e[t[o++]];return e}function Xt(e){for(const t in e)if(!C(e[t]))return!1;return!0}function j(e,t){const s=Je(t)?[t]:xt(t),o=s.length==1?e:Gt(e,s),r=s[s.length-1];let a;o&&delete o[r];for(let l=0;l<s.slice(0,-1).length;l++){let u=-1,y;const p=s.slice(0,-(l+1)),v=p.length-1;for(l>0&&(a=e);++u<p.length;){const k=p[u];y=y?y[k]:e[k],v===u&&(O(y)&&U(y)||Array.isArray(y)&&Xt(y))&&(a?delete a[k]:delete e[k]),a=y}}return e}function Me(){let e=[];return{get observers(){return e},next:r=>{for(const a of e)a.next(r)},subscribe:r=>(e.push(r),{unsubscribe:()=>{e=e.filter(a=>a!==r)}}),unsubscribe:()=>{e=[]}}}var ue=e=>P(e)||!mt(e);function ee(e,t){if(ue(e)||ue(t))return e===t;if(ie(e)&&ie(t))return e.getTime()===t.getTime();const s=Object.keys(e),o=Object.keys(t);if(s.length!==o.length)return!1;for(const r of s){const a=e[r];if(!o.includes(r))return!1;if(r!=="ref"){const l=t[r];if(ie(a)&&ie(l)||O(a)&&O(l)||Array.isArray(a)&&Array.isArray(l)?!ee(a,l):a!==l)return!1}}return!0}var He=e=>{const t=e?e.ownerDocument:0;return e instanceof(t&&t.defaultView?t.defaultView.HTMLElement:HTMLElement)},wt=e=>e.type==="select-multiple",Zt=e=>Ge(e)||fe(e),Re=e=>He(e)&&e.isConnected,_t=e=>{for(const t in e)if(oe(e[t]))return!0;return!1};function ke(e,t={}){const s=Array.isArray(e);if(O(e)||s)for(const o in e)Array.isArray(e[o])||O(e[o])&&!_t(e[o])?(t[o]=Array.isArray(e[o])?[]:{},ke(e[o],t[o])):P(e[o])||(t[o]=!0);return t}function At(e,t,s){const o=Array.isArray(e);if(O(e)||o)for(const r in e)Array.isArray(e[r])||O(e[r])&&!_t(e[r])?C(t)||ue(s[r])?s[r]=Array.isArray(e[r])?ke(e[r],[]):{...ke(e[r])}:At(e[r],P(t)?{}:t[r],s[r]):ee(e[r],t[r])?delete s[r]:s[r]=!0;return s}var Ue=(e,t)=>At(e,t,ke(t)),Et=(e,{valueAsNumber:t,valueAsDate:s,setValueAs:o})=>C(e)?e:t?e===""?NaN:e&&+e:s&&z(e)?new Date(e):o?o(e):e;function $e(e){const t=e.ref;if(!(e.refs?e.refs.every(s=>s.disabled):t.disabled))return Ye(t)?t.files:Ge(t)?vt(e.refs).value:wt(t)?[...t.selectedOptions].map(({value:s})=>s):fe(t)?bt(e.refs).value:Et(C(t.value)?e.ref.value:t.value,e)}var Qt=(e,t,s,o)=>{const r={};for(const a of e){const l=g(t,a);l&&D(r,a,l._f)}return{criteriaMode:s,names:[...e],fields:r,shouldUseNativeValidation:o}},ce=e=>C(e)?e:De(e)?e.source:O(e)?De(e.value)?e.value.source:e.value:e,er=e=>e.mount&&(e.required||e.min||e.max||e.maxLength||e.minLength||e.pattern||e.validate);function ft(e,t,s){const o=g(e,s);if(o||Je(s))return{error:o,name:s};const r=s.split(".");for(;r.length;){const a=r.join("."),l=g(t,a),u=g(e,a);if(l&&!Array.isArray(l)&&s!==a)return{name:s};if(u&&u.type)return{name:a,error:u};r.pop()}return{name:s}}var tr=(e,t,s,o,r)=>r.isOnAll?!1:!s&&r.isOnTouch?!(t||e):(s?o.isOnBlur:r.isOnBlur)?!e:(s?o.isOnChange:r.isOnChange)?e:!0,rr=(e,t)=>!ye(g(e,t)).length&&j(e,t);const sr={mode:q.onSubmit,reValidateMode:q.onChange,shouldFocusError:!0};function ir(e={},t){let s={...sr,...e};const o=e.resetOptions&&e.resetOptions.keepDirtyValues;let r={submitCount:0,isDirty:!1,isLoading:!0,isValidating:!1,isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,touchedFields:{},dirtyFields:{},errors:{}},a={},l=O(s.defaultValues)?Q(s.defaultValues)||{}:{},u=s.shouldUnregister?{}:Q(l),y={action:!1,mount:!1,watch:!1},p={mount:new Set,unMount:new Set,array:new Set,watch:new Set},v,k=0;const w={isDirty:!1,dirtyFields:!1,touchedFields:!1,isValidating:!1,isValid:!1,errors:!1},x={watch:Me(),array:Me(),state:Me()},T=at(s.mode),Ce=at(s.reValidateMode),he=s.criteriaMode===q.all,Ne=i=>n=>{clearTimeout(k),k=window.setTimeout(i,n)},I=async()=>{if(w.isValid){const i=s.resolver?U((await $()).errors):await b(a,!0);i!==r.isValid&&(r.isValid=i,x.state.next({isValid:i}))}},R=i=>w.isValidating&&x.state.next({isValidating:i}),N=(i,n=[],c,f,h=!0,d=!0)=>{if(f&&c){if(y.action=!0,d&&Array.isArray(g(a,i))){const m=c(g(a,i),f.argA,f.argB);h&&D(a,i,m)}if(d&&Array.isArray(g(r.errors,i))){const m=c(g(r.errors,i),f.argA,f.argB);h&&D(r.errors,i,m),rr(r.errors,i)}if(w.touchedFields&&d&&Array.isArray(g(r.touchedFields,i))){const m=c(g(r.touchedFields,i),f.argA,f.argB);h&&D(r.touchedFields,i,m)}w.dirtyFields&&(r.dirtyFields=Ue(l,u)),x.state.next({name:i,isDirty:A(i,n),dirtyFields:r.dirtyFields,errors:r.errors,isValid:r.isValid})}else D(u,i,n)},ge=(i,n)=>{D(r.errors,i,n),x.state.next({errors:r.errors})},ne=(i,n,c,f)=>{const h=g(a,i);if(h){const d=g(u,i,C(c)?g(l,i):c);C(d)||f&&f.defaultChecked||n?D(u,i,n?d:$e(h._f)):B(i,d),y.mount&&I()}},me=(i,n,c,f,h)=>{let d=!1,m=!1;const S={name:i};if(!c||f){w.isDirty&&(m=r.isDirty,r.isDirty=S.isDirty=A(),d=m!==S.isDirty);const V=ee(g(l,i),n);m=g(r.dirtyFields,i),V?j(r.dirtyFields,i):D(r.dirtyFields,i,!0),S.dirtyFields=r.dirtyFields,d=d||w.dirtyFields&&m!==!V}if(c){const V=g(r.touchedFields,i);V||(D(r.touchedFields,i,c),S.touchedFields=r.touchedFields,d=d||w.touchedFields&&V!==c)}return d&&h&&x.state.next(S),d?S:{}},re=(i,n,c,f)=>{const h=g(r.errors,i),d=w.isValid&&ae(n)&&r.isValid!==n;if(e.delayError&&c?(v=Ne(()=>ge(i,c)),v(e.delayError)):(clearTimeout(k),v=null,c?D(r.errors,i,c):j(r.errors,i)),(c?!ee(h,c):h)||!U(f)||d){const m={...f,...d&&ae(n)?{isValid:n}:{},errors:r.errors,name:i};r={...r,...m},x.state.next(m)}R(!1)},$=async i=>await s.resolver(u,s.context,Qt(i||p.mount,a,s.criteriaMode,s.shouldUseNativeValidation)),xe=async i=>{const{errors:n}=await $();if(i)for(const c of i){const f=g(n,c);f?D(r.errors,c,f):j(r.errors,c)}else r.errors=n;return n},b=async(i,n,c={valid:!0})=>{for(const f in i){const h=i[f];if(h){const{_f:d,...m}=h;if(d){const S=p.array.has(d.name),V=await dt(h,g(u,d.name),he,s.shouldUseNativeValidation,S);if(V[d.name]&&(c.valid=!1,n))break;!n&&(g(V,d.name)?S?Yt(r.errors,V,d.name):D(r.errors,d.name,V[d.name]):j(r.errors,d.name))}m&&await b(m,n,c)}}return c.valid},_=()=>{for(const i of p.unMount){const n=g(a,i);n&&(n._f.refs?n._f.refs.every(c=>!Re(c)):!Re(n._f.ref))&&Le(i)}p.unMount=new Set},A=(i,n)=>(i&&n&&D(u,i,n),!ee(Xe(),l)),L=(i,n,c)=>Wt(i,p,{...y.mount?u:C(n)?l:z(i)?{[i]:n}:n},c),H=i=>ye(g(y.mount?u:l,i,e.shouldUnregister?g(l,i,[]):[])),B=(i,n,c={})=>{const f=g(a,i);let h=n;if(f){const d=f._f;d&&(!d.disabled&&D(u,i,Et(n,d)),h=Be&&He(d.ref)&&P(n)?"":n,wt(d.ref)?[...d.ref.options].forEach(m=>m.selected=h.includes(m.value)):d.refs?fe(d.ref)?d.refs.length>1?d.refs.forEach(m=>(!m.defaultChecked||!m.disabled)&&(m.checked=Array.isArray(h)?!!h.find(S=>S===m.value):h===m.value)):d.refs[0]&&(d.refs[0].checked=!!h):d.refs.forEach(m=>m.checked=m.value===h):Ye(d.ref)?d.ref.value="":(d.ref.value=h,d.ref.type||x.watch.next({name:i})))}(c.shouldDirty||c.shouldTouch)&&me(i,h,c.shouldTouch,c.shouldDirty,!0),c.shouldValidate&&Oe(i)},le=(i,n,c)=>{for(const f in n){const h=n[f],d=`${i}.${f}`,m=g(a,d);(p.array.has(i)||!ue(h)||m&&!m._f)&&!ie(h)?le(d,h,c):B(d,h,c)}},Z=(i,n,c={})=>{const f=g(a,i),h=p.array.has(i),d=Q(n);D(u,i,d),h?(x.array.next({name:i,values:u}),(w.isDirty||w.dirtyFields)&&c.shouldDirty&&(r.dirtyFields=Ue(l,u),x.state.next({name:i,dirtyFields:r.dirtyFields,isDirty:A(i,d)}))):f&&!f._f&&!P(d)?le(i,d,c):B(i,d,c),ot(i,p)&&x.state.next({}),x.watch.next({name:i}),!y.mount&&t()},be=async i=>{const n=i.target;let c=n.name;const f=g(a,c),h=()=>n.type?$e(f._f):Ut(i);if(f){let d,m;const S=h(),V=i.type===it.BLUR||i.type===it.FOCUS_OUT,It=!er(f._f)&&!s.resolver&&!g(r.errors,c)&&!f._f.deps||tr(V,g(r.touchedFields,c),r.isSubmitted,Ce,T),je=ot(c,p,V);D(u,c,S),V?(f._f.onBlur&&f._f.onBlur(i),v&&v(0)):f._f.onChange&&f._f.onChange(i);const Pe=me(c,S,V,!1),Mt=!U(Pe)||je;if(!V&&x.watch.next({name:c,type:i.type}),It)return w.isValid&&I(),Mt&&x.state.next({name:c,...je?{}:Pe});if(!V&&je&&x.state.next({}),R(!0),s.resolver){const{errors:rt}=await $([c]),Rt=ft(r.errors,a,c),st=ft(rt,a,Rt.name||c);d=st.error,c=st.name,m=U(rt)}else d=(await dt(f,g(u,c),he,s.shouldUseNativeValidation))[c],d?m=!1:w.isValid&&(m=await b(a,!0));!ue(S)||h()===S?(f._f.deps&&Oe(f._f.deps),re(c,m,d,Pe)):R(!1)}},Oe=async(i,n={})=>{let c,f;const h=Ie(i);if(R(!0),s.resolver){const d=await xe(C(i)?i:h);c=U(d),f=i?!h.some(m=>g(d,m)):c}else i?(f=(await Promise.all(h.map(async d=>{const m=g(a,d);return await b(m&&m._f?{[d]:m}:m)}))).every(Boolean),!(!f&&!r.isValid)&&I()):f=c=await b(a);return x.state.next({...!z(i)||w.isValid&&c!==r.isValid?{}:{name:i},...s.resolver||!i?{isValid:c}:{},errors:r.errors,isValidating:!1}),n.shouldFocus&&!f&&qe(a,d=>d&&g(r.errors,d),i?h:p.mount),f},Xe=i=>{const n={...l,...y.mount?u:{}};return C(i)?n:z(i)?g(n,i):i.map(c=>g(n,c))},Ze=(i,n)=>({invalid:!!g((n||r).errors,i),isDirty:!!g((n||r).dirtyFields,i),isTouched:!!g((n||r).touchedFields,i),error:g((n||r).errors,i)}),Nt=i=>{i?Ie(i).forEach(n=>j(r.errors,n)):r.errors={},x.state.next({errors:r.errors})},Ot=(i,n,c)=>{const f=(g(a,i,{_f:{}})._f||{}).ref;D(r.errors,i,{...n,ref:f}),x.state.next({name:i,errors:r.errors,isValid:!1}),c&&c.shouldFocus&&f&&f.focus&&f.focus()},Lt=(i,n)=>oe(i)?x.watch.subscribe({next:c=>i(L(void 0,n),c)}):L(i,n,!0),Le=(i,n={})=>{for(const c of i?Ie(i):p.mount)p.mount.delete(c),p.array.delete(c),g(a,c)&&(n.keepValue||(j(a,c),j(u,c)),!n.keepError&&j(r.errors,c),!n.keepDirty&&j(r.dirtyFields,c),!n.keepTouched&&j(r.touchedFields,c),!s.shouldUnregister&&!n.keepDefaultValue&&j(l,c));x.watch.next({}),x.state.next({...r,...n.keepDirty?{isDirty:A()}:{}}),!n.keepIsValid&&I()},Te=(i,n={})=>{let c=g(a,i);const f=ae(n.disabled);return D(a,i,{...c||{},_f:{...c&&c._f?c._f:{ref:{name:i}},name:i,mount:!0,...n}}),p.mount.add(i),c?f&&D(u,i,n.disabled?void 0:g(u,i,$e(c._f))):ne(i,!0,n.value),{...f?{disabled:n.disabled}:{},...s.shouldUseNativeValidation?{required:!!n.required,min:ce(n.min),max:ce(n.max),minLength:ce(n.minLength),maxLength:ce(n.maxLength),pattern:ce(n.pattern)}:{},name:i,onChange:be,onBlur:be,ref:h=>{if(h){Te(i,n),c=g(a,i);const d=C(h.value)&&h.querySelectorAll&&h.querySelectorAll("input,select,textarea")[0]||h,m=Zt(d),S=c._f.refs||[];if(m?S.find(V=>V===d):d===c._f.ref)return;D(a,i,{_f:{...c._f,...m?{refs:[...S.filter(Re),d,...Array.isArray(g(l,i))?[{}]:[]],ref:{type:d.type,name:i}}:{ref:d}}}),ne(i,!1,void 0,d)}else c=g(a,i,{}),c._f&&(c._f.mount=!1),(s.shouldUnregister||n.shouldUnregister)&&!(Bt(p.array,i)&&y.action)&&p.unMount.add(i)}}},Qe=()=>s.shouldFocusError&&qe(a,i=>i&&g(r.errors,i),p.mount),Tt=(i,n)=>async c=>{c&&(c.preventDefault&&c.preventDefault(),c.persist&&c.persist());let f=!0,h=Q(u);x.state.next({isSubmitting:!0});try{if(s.resolver){const{errors:d,values:m}=await $();r.errors=d,h=m}else await b(a);U(r.errors)?(x.state.next({errors:{},isSubmitting:!0}),await i(h,c)):(n&&await n({...r.errors},c),Qe())}catch(d){throw f=!1,d}finally{r.isSubmitted=!0,x.state.next({isSubmitted:!0,isSubmitting:!1,isSubmitSuccessful:U(r.errors)&&f,submitCount:r.submitCount+1,errors:r.errors})}},jt=(i,n={})=>{g(a,i)&&(C(n.defaultValue)?Z(i,g(l,i)):(Z(i,n.defaultValue),D(l,i,n.defaultValue)),n.keepTouched||j(r.touchedFields,i),n.keepDirty||(j(r.dirtyFields,i),r.isDirty=n.defaultValue?A(i,g(l,i)):A()),n.keepError||(j(r.errors,i),w.isValid&&I()),x.state.next({...r}))},et=(i,n={})=>{const c=i||l,f=Q(c),h=i&&!U(i)?f:l;if(n.keepDefaultValues||(l=c),!n.keepValues){if(n.keepDirtyValues||o)for(const d of p.mount)g(r.dirtyFields,d)?D(h,d,g(u,d)):Z(d,g(h,d));else{if(Be&&C(i))for(const d of p.mount){const m=g(a,d);if(m&&m._f){const S=Array.isArray(m._f.refs)?m._f.refs[0]:m._f.ref;if(He(S)){const V=S.closest("form");if(V){V.reset();break}}}}a={}}u=e.shouldUnregister?n.keepDefaultValues?Q(l):{}:f,x.array.next({values:h}),x.watch.next({values:h})}p={mount:new Set,unMount:new Set,array:new Set,watch:new Set,watchAll:!1,focus:""},!y.mount&&t(),y.mount=!w.isValid||!!n.keepIsValid,y.watch=!!e.shouldUnregister,x.state.next({submitCount:n.keepSubmitCount?r.submitCount:0,isDirty:n.keepDirty||n.keepDirtyValues?r.isDirty:!!(n.keepDefaultValues&&!ee(i,l)),isSubmitted:n.keepIsSubmitted?r.isSubmitted:!1,dirtyFields:n.keepDirty||n.keepDirtyValues?r.dirtyFields:n.keepDefaultValues&&i?Ue(l,i):{},touchedFields:n.keepTouched?r.touchedFields:{},errors:n.keepErrors?r.errors:{},isSubmitting:!1,isSubmitSuccessful:!1})},tt=(i,n)=>et(oe(i)?i(u):i,n),Pt=(i,n={})=>{const c=g(a,i),f=c&&c._f;if(f){const h=f.refs?f.refs[0]:f.ref;h.focus&&(h.focus(),n.shouldSelect&&h.select())}};return oe(s.defaultValues)&&s.defaultValues().then(i=>{tt(i,s.resetOptions),x.state.next({isLoading:!1})}),{control:{register:Te,unregister:Le,getFieldState:Ze,_executeSchema:$,_focusError:Qe,_getWatch:L,_getDirty:A,_updateValid:I,_removeUnmounted:_,_updateFieldArray:N,_getFieldArray:H,_reset:et,_subjects:x,_proxyFormState:w,get _fields(){return a},get _formValues(){return u},get _stateFlags(){return y},set _stateFlags(i){y=i},get _defaultValues(){return l},get _names(){return p},set _names(i){p=i},get _formState(){return r},set _formState(i){r=i},get _options(){return s},set _options(i){s={...s,...i}}},trigger:Oe,register:Te,handleSubmit:Tt,watch:Lt,setValue:Z,getValues:Xe,reset:tt,resetField:jt,clearErrors:Nt,unregister:Le,setError:Ot,setFocus:Pt,getFieldState:Ze}}function ar(e={}){const t=J.useRef(),[s,o]=J.useState({isDirty:!1,isValidating:!1,isLoading:!0,isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,submitCount:0,dirtyFields:{},touchedFields:{},errors:{},defaultValues:oe(e.defaultValues)?void 0:e.defaultValues});t.current||(t.current={...ir(e,()=>o(a=>({...a}))),formState:s});const r=t.current.control;return r._options=e,zt({subject:r._subjects.state,next:a=>{Ht(a,r._proxyFormState,!0)&&(r._formState={...r._formState,...a},o({...r._formState}))}}),J.useEffect(()=>{r._stateFlags.mount||(r._proxyFormState.isValid&&r._updateValid(),r._stateFlags.mount=!0),r._stateFlags.watch&&(r._stateFlags.watch=!1,r._subjects.state.next({})),r._removeUnmounted()}),J.useEffect(()=>{e.values&&!ee(e.values,r._defaultValues)&&r._reset(e.values,r._options.resetOptions)},[e.values,r]),J.useEffect(()=>{s.submitCount&&r._focusError()},[r,s.submitCount]),t.current.formState=qt(s,r),t.current}let or={data:""},nr=e=>typeof window=="object"?((e?e.querySelector("#_goober"):window._goober)||Object.assign((e||document.head).appendChild(document.createElement("style")),{innerHTML:" ",id:"_goober"})).firstChild:e||or,lr=/(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g,cr=/\/\*[^]*?\*\/|  +/g,yt=/\n+/g,G=(e,t)=>{let s="",o="",r="";for(let a in e){let l=e[a];a[0]=="@"?a[1]=="i"?s=a+" "+l+";":o+=a[1]=="f"?G(l,a):a+"{"+G(l,a[1]=="k"?"":t)+"}":typeof l=="object"?o+=G(l,t?t.replace(/([^,])+/g,u=>a.replace(/(^:.*)|([^,])+/g,y=>/&/.test(y)?y.replace(/&/g,u):u?u+" "+y:y)):a):l!=null&&(a=/^--/.test(a)?a:a.replace(/[A-Z]/g,"-$&").toLowerCase(),r+=G.p?G.p(a,l):a+":"+l+";")}return s+(t&&r?t+"{"+r+"}":r)+o},K={},Ft=e=>{if(typeof e=="object"){let t="";for(let s in e)t+=s+Ft(e[s]);return t}return e},ur=(e,t,s,o,r)=>{let a=Ft(e),l=K[a]||(K[a]=(y=>{let p=0,v=11;for(;p<y.length;)v=101*v+y.charCodeAt(p++)>>>0;return"go"+v})(a));if(!K[l]){let y=a!==e?e:(p=>{let v,k,w=[{}];for(;v=lr.exec(p.replace(cr,""));)v[4]?w.shift():v[3]?(k=v[3].replace(yt," ").trim(),w.unshift(w[0][k]=w[0][k]||{})):w[0][v[1]]=v[2].replace(yt," ").trim();return w[0]})(e);K[l]=G(r?{["@keyframes "+l]:y}:y,s?"":"."+l)}let u=s&&K.g?K.g:null;return s&&(K.g=K[l]),((y,p,v,k)=>{k?p.data=p.data.replace(k,y):p.data.indexOf(y)===-1&&(p.data=v?y+p.data:p.data+y)})(K[l],t,o,u),l},dr=(e,t,s)=>e.reduce((o,r,a)=>{let l=t[a];if(l&&l.call){let u=l(s),y=u&&u.props&&u.props.className||/^go/.test(u)&&u;l=y?"."+y:u&&typeof u=="object"?u.props?"":G(u,""):u===!1?"":u}return o+r+(l??"")},"");function Ve(e){let t=this||{},s=e.call?e(t.p):e;return ur(s.unshift?s.raw?dr(s,[].slice.call(arguments,1),t.p):s.reduce((o,r)=>Object.assign(o,r&&r.call?r(t.p):r),{}):s,nr(t.target),t.g,t.o,t.k)}let Dt,ze,We;Ve.bind({g:1});let Y=Ve.bind({k:1});function fr(e,t,s,o){G.p=t,Dt=e,ze=s,We=o}function X(e,t){let s=this||{};return function(){let o=arguments;function r(a,l){let u=Object.assign({},a),y=u.className||r.className;s.p=Object.assign({theme:ze&&ze()},u),s.o=/ *go\d+/.test(y),u.className=Ve.apply(s,o)+(y?" "+y:""),t&&(u.ref=l);let p=e;return e[0]&&(p=u.as||e,delete u.as),We&&p[0]&&We(u),Dt(p,u)}return t?t(r):r}}var yr=e=>typeof e=="function",Se=(e,t)=>yr(e)?e(t):e,pr=(()=>{let e=0;return()=>(++e).toString()})(),kt=(()=>{let e;return()=>{if(e===void 0&&typeof window<"u"){let t=matchMedia("(prefers-reduced-motion: reduce)");e=!t||t.matches}return e}})(),hr=20,_e=new Map,gr=1e3,pt=e=>{if(_e.has(e))return;let t=setTimeout(()=>{_e.delete(e),te({type:4,toastId:e})},gr);_e.set(e,t)},mr=e=>{let t=_e.get(e);t&&clearTimeout(t)},Ke=(e,t)=>{switch(t.type){case 0:return{...e,toasts:[t.toast,...e.toasts].slice(0,hr)};case 1:return t.toast.id&&mr(t.toast.id),{...e,toasts:e.toasts.map(a=>a.id===t.toast.id?{...a,...t.toast}:a)};case 2:let{toast:s}=t;return e.toasts.find(a=>a.id===s.id)?Ke(e,{type:1,toast:s}):Ke(e,{type:0,toast:s});case 3:let{toastId:o}=t;return o?pt(o):e.toasts.forEach(a=>{pt(a.id)}),{...e,toasts:e.toasts.map(a=>a.id===o||o===void 0?{...a,visible:!1}:a)};case 4:return t.toastId===void 0?{...e,toasts:[]}:{...e,toasts:e.toasts.filter(a=>a.id!==t.toastId)};case 5:return{...e,pausedAt:t.time};case 6:let r=t.time-(e.pausedAt||0);return{...e,pausedAt:void 0,toasts:e.toasts.map(a=>({...a,pauseDuration:a.pauseDuration+r}))}}},Ae=[],Ee={toasts:[],pausedAt:void 0},te=e=>{Ee=Ke(Ee,e),Ae.forEach(t=>{t(Ee)})},xr={blank:4e3,error:4e3,success:2e3,loading:1/0,custom:4e3},br=(e={})=>{let[t,s]=F.exports.useState(Ee);F.exports.useEffect(()=>(Ae.push(s),()=>{let r=Ae.indexOf(s);r>-1&&Ae.splice(r,1)}),[t]);let o=t.toasts.map(r=>{var a,l;return{...e,...e[r.type],...r,duration:r.duration||((a=e[r.type])==null?void 0:a.duration)||e?.duration||xr[r.type],style:{...e.style,...(l=e[r.type])==null?void 0:l.style,...r.style}}});return{...t,toasts:o}},vr=(e,t="blank",s)=>({createdAt:Date.now(),visible:!0,type:t,ariaProps:{role:"status","aria-live":"polite"},message:e,pauseDuration:0,...s,id:s?.id||pr()}),pe=e=>(t,s)=>{let o=vr(t,e,s);return te({type:2,toast:o}),o.id},M=(e,t)=>pe("blank")(e,t);M.error=pe("error");M.success=pe("success");M.loading=pe("loading");M.custom=pe("custom");M.dismiss=e=>{te({type:3,toastId:e})};M.remove=e=>te({type:4,toastId:e});M.promise=(e,t,s)=>{let o=M.loading(t.loading,{...s,...s?.loading});return e.then(r=>(M.success(Se(t.success,r),{id:o,...s,...s?.success}),r)).catch(r=>{M.error(Se(t.error,r),{id:o,...s,...s?.error})}),e};var wr=(e,t)=>{te({type:1,toast:{id:e,height:t}})},_r=()=>{te({type:5,time:Date.now()})},Ar=e=>{let{toasts:t,pausedAt:s}=br(e);F.exports.useEffect(()=>{if(s)return;let a=Date.now(),l=t.map(u=>{if(u.duration===1/0)return;let y=(u.duration||0)+u.pauseDuration-(a-u.createdAt);if(y<0){u.visible&&M.dismiss(u.id);return}return setTimeout(()=>M.dismiss(u.id),y)});return()=>{l.forEach(u=>u&&clearTimeout(u))}},[t,s]);let o=F.exports.useCallback(()=>{s&&te({type:6,time:Date.now()})},[s]),r=F.exports.useCallback((a,l)=>{let{reverseOrder:u=!1,gutter:y=8,defaultPosition:p}=l||{},v=t.filter(x=>(x.position||p)===(a.position||p)&&x.height),k=v.findIndex(x=>x.id===a.id),w=v.filter((x,T)=>T<k&&x.visible).length;return v.filter(x=>x.visible).slice(...u?[w+1]:[0,w]).reduce((x,T)=>x+(T.height||0)+y,0)},[t]);return{toasts:t,handlers:{updateHeight:wr,startPause:_r,endPause:o,calculateOffset:r}}},Er=Y`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
 transform: scale(1) rotate(45deg);
  opacity: 1;
}`,Fr=Y`
from {
  transform: scale(0);
  opacity: 0;
}
to {
  transform: scale(1);
  opacity: 1;
}`,Dr=Y`
from {
  transform: scale(0) rotate(90deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(90deg);
	opacity: 1;
}`,kr=X("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${e=>e.primary||"#ff4b4b"};
  position: relative;
  transform: rotate(45deg);

  animation: ${Er} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;

  &:after,
  &:before {
    content: '';
    animation: ${Fr} 0.15s ease-out forwards;
    animation-delay: 150ms;
    position: absolute;
    border-radius: 3px;
    opacity: 0;
    background: ${e=>e.secondary||"#fff"};
    bottom: 9px;
    left: 4px;
    height: 2px;
    width: 12px;
  }

  &:before {
    animation: ${Dr} 0.15s ease-out forwards;
    animation-delay: 180ms;
    transform: rotate(90deg);
  }
`,Sr=Y`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`,Vr=X("div")`
  width: 12px;
  height: 12px;
  box-sizing: border-box;
  border: 2px solid;
  border-radius: 100%;
  border-color: ${e=>e.secondary||"#e0e0e0"};
  border-right-color: ${e=>e.primary||"#616161"};
  animation: ${Sr} 1s linear infinite;
`,Cr=Y`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(45deg);
	opacity: 1;
}`,Nr=Y`
0% {
	height: 0;
	width: 0;
	opacity: 0;
}
40% {
  height: 0;
	width: 6px;
	opacity: 1;
}
100% {
  opacity: 1;
  height: 10px;
}`,Or=X("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${e=>e.primary||"#61d345"};
  position: relative;
  transform: rotate(45deg);

  animation: ${Cr} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;
  &:after {
    content: '';
    box-sizing: border-box;
    animation: ${Nr} 0.2s ease-out forwards;
    opacity: 0;
    animation-delay: 200ms;
    position: absolute;
    border-right: 2px solid;
    border-bottom: 2px solid;
    border-color: ${e=>e.secondary||"#fff"};
    bottom: 6px;
    left: 6px;
    height: 10px;
    width: 6px;
  }
`,Lr=X("div")`
  position: absolute;
`,Tr=X("div")`
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 20px;
  min-height: 20px;
`,jr=Y`
from {
  transform: scale(0.6);
  opacity: 0.4;
}
to {
  transform: scale(1);
  opacity: 1;
}`,Pr=X("div")`
  position: relative;
  transform: scale(0.6);
  opacity: 0.4;
  min-width: 20px;
  animation: ${jr} 0.3s 0.12s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
`,Ir=({toast:e})=>{let{icon:t,type:s,iconTheme:o}=e;return t!==void 0?typeof t=="string"?F.exports.createElement(Pr,null,t):t:s==="blank"?null:F.exports.createElement(Tr,null,F.exports.createElement(Vr,{...o}),s!=="loading"&&F.exports.createElement(Lr,null,s==="error"?F.exports.createElement(kr,{...o}):F.exports.createElement(Or,{...o})))},Mr=e=>`
0% {transform: translate3d(0,${e*-200}%,0) scale(.6); opacity:.5;}
100% {transform: translate3d(0,0,0) scale(1); opacity:1;}
`,Rr=e=>`
0% {transform: translate3d(0,0,-1px) scale(1); opacity:1;}
100% {transform: translate3d(0,${e*-150}%,-1px) scale(.6); opacity:0;}
`,Ur="0%{opacity:0;} 100%{opacity:1;}",$r="0%{opacity:1;} 100%{opacity:0;}",Br=X("div")`
  display: flex;
  align-items: center;
  background: #fff;
  color: #363636;
  line-height: 1.3;
  will-change: transform;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05);
  max-width: 350px;
  pointer-events: auto;
  padding: 8px 10px;
  border-radius: 8px;
`,qr=X("div")`
  display: flex;
  justify-content: center;
  margin: 4px 10px;
  color: inherit;
  flex: 1 1 auto;
  white-space: pre-line;
`,Hr=(e,t)=>{let s=e.includes("top")?1:-1,[o,r]=kt()?[Ur,$r]:[Mr(s),Rr(s)];return{animation:t?`${Y(o)} 0.35s cubic-bezier(.21,1.02,.73,1) forwards`:`${Y(r)} 0.4s forwards cubic-bezier(.06,.71,.55,1)`}},zr=F.exports.memo(({toast:e,position:t,style:s,children:o})=>{let r=e.height?Hr(e.position||t||"top-center",e.visible):{opacity:0},a=F.exports.createElement(Ir,{toast:e}),l=F.exports.createElement(qr,{...e.ariaProps},Se(e.message,e));return F.exports.createElement(Br,{className:e.className,style:{...r,...s,...e.style}},typeof o=="function"?o({icon:a,message:l}):F.exports.createElement(F.exports.Fragment,null,a,l))});fr(F.exports.createElement);var Wr=({id:e,className:t,style:s,onHeightUpdate:o,children:r})=>{let a=F.exports.useCallback(l=>{if(l){let u=()=>{let y=l.getBoundingClientRect().height;o(e,y)};u(),new MutationObserver(u).observe(l,{subtree:!0,childList:!0,characterData:!0})}},[e,o]);return F.exports.createElement("div",{ref:a,className:t,style:s},r)},Kr=(e,t)=>{let s=e.includes("top"),o=s?{top:0}:{bottom:0},r=e.includes("center")?{justifyContent:"center"}:e.includes("right")?{justifyContent:"flex-end"}:{};return{left:0,right:0,display:"flex",position:"absolute",transition:kt()?void 0:"all 230ms cubic-bezier(.21,1.02,.73,1)",transform:`translateY(${t*(s?1:-1)}px)`,...o,...r}},Jr=Ve`
  z-index: 9999;
  > * {
    pointer-events: auto;
  }
`,ve=16,Yr=({reverseOrder:e,position:t="top-center",toastOptions:s,gutter:o,children:r,containerStyle:a,containerClassName:l})=>{let{toasts:u,handlers:y}=Ar(s);return F.exports.createElement("div",{style:{position:"fixed",zIndex:9999,top:ve,left:ve,right:ve,bottom:ve,pointerEvents:"none",...a},className:l,onMouseEnter:y.startPause,onMouseLeave:y.endPause},u.map(p=>{let v=p.position||t,k=y.calculateOffset(p,{reverseOrder:e,gutter:o,defaultPosition:t}),w=Kr(v,k);return F.exports.createElement(Wr,{id:p.id,key:p.id,onHeightUpdate:y.updateHeight,className:p.visible?Jr:"",style:w},p.type==="custom"?Se(p.message,p):r?r(p):F.exports.createElement(zr,{toast:p,position:v}))}))},ht=M;const de={_origin:"https://api.emailjs.com"},Gr=(e,t="https://api.emailjs.com")=>{de._userID=e,de._origin=t},St=(e,t,s)=>{if(!e)throw"The public key is required. Visit https://dashboard.emailjs.com/admin/account";if(!t)throw"The service ID is required. Visit https://dashboard.emailjs.com/admin";if(!s)throw"The template ID is required. Visit https://dashboard.emailjs.com/admin/templates";return!0};class gt{constructor(t){this.status=t?t.status:0,this.text=t?t.responseText:"Network Error"}}const Vt=(e,t,s={})=>new Promise((o,r)=>{const a=new XMLHttpRequest;a.addEventListener("load",({target:l})=>{const u=new gt(l);u.status===200||u.text==="OK"?o(u):r(u)}),a.addEventListener("error",({target:l})=>{r(new gt(l))}),a.open("POST",de._origin+e,!0),Object.keys(s).forEach(l=>{a.setRequestHeader(l,s[l])}),a.send(t)}),Xr=(e,t,s,o)=>{const r=o||de._userID;St(r,e,t);const a={lib_version:"3.10.0",user_id:r,service_id:e,template_id:t,template_params:s};return Vt("/api/v1.0/email/send",JSON.stringify(a),{"Content-type":"application/json"})},Zr=e=>{let t;if(typeof e=="string"?t=document.querySelector(e):t=e,!t||t.nodeName!=="FORM")throw"The 3rd parameter is expected to be the HTML form element or the style selector of form";return t},Qr=(e,t,s,o)=>{const r=o||de._userID,a=Zr(s);St(r,e,t);const l=new FormData(a);return l.append("lib_version","3.10.0"),l.append("service_id",e),l.append("template_id",t),l.append("user_id",r),Vt("/api/v1.0/email/send-form",l)},es={init:Gr,send:Xr,sendForm:Qr};function ts(e){return e.toLowerCase().replace(/\s(.)/g,function(t){return t.toUpperCase()}).replace(/\s/g,"")}function Fe({label:e,placeholder:t,required:s,rows:o,register:r}){return E.exports.jsx("textarea",{className:"shadow appearance-none border rounded w-full mb-2 p-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline",label:e,placeholder:t||e,"aria-label":e,rows:o,...r(ts(e),{required:s})})}Fe.defaultProps={label:"",placeholder:"",required:!1,rows:1,register:()=>{}};function Ct({className:e,label:t,type:s,loading:o,disabled:r,secondary:a,onClick:l,children:u}){const y=`
    button
    ${e}
    ${a?"text-gray-200 underline-offset-2 decoration-2 hover:underline":"text-white bg-gradient-to-r from-purple-700 via-purple-600 to-purple-700 hover:bg-green-700"}
    ${o?"loading":""}
    font-bold py-2 px-4 rounded
  `;return E.exports.jsx("button",{className:y,type:s,disabled:o||r,onClick:l,children:o?"Loading...":u||t})}Ct.defaultProps={className:"",label:"",type:"submit",loading:!1,disabled:!1,secondary:!1,onClick:()=>{},children:null};const{PUBLIC_SERVICE_ID:rs,PUBLIC_TEMPLATE_ID:ss,PUBLIC_KEY:is}={PUBLIC_KEY:"Xd0VPSxMDcV4TJ2gG",PUBLIC_SERVICE_ID:"service_n6teppq",PUBLIC_TEMPLATE_ID:"template_9adculq",BASE_URL:"/",MODE:"production",DEV:!1,PROD:!0};function ns({}){const[e,t]=F.exports.useState(!1),{register:s,reset:o,clearErrors:r,handleSubmit:a,formState:{errors:l}}=ar(),u=F.exports.useRef(null),y=async p=>{p?.preventDefault(),t(!0),await es.sendForm(rs,ss,u.current,is).catch(v=>ht.error("Oops! email wasn't sent.")),t(!1),o(),r(["name","email","message"]),ht.success("Nice! I'll get back to you soon.")};return E.exports.jsx("div",{className:"container",children:E.exports.jsxs("div",{id:"contact",className:"mb-32",children:[E.exports.jsx("h2",{className:"text-5xl text-purple-600 font-bold ",children:"Get in touch"}),E.exports.jsx("p",{className:"text-l text-gray-300",children:"Have an exciting project where you need some help? or maybe you just wanna talk!"}),E.exports.jsx("p",{className:"text-l text-gray-300 mb-4",children:"Send me over a message, and let's chat."}),E.exports.jsxs("div",{className:"flex",children:[E.exports.jsxs("form",{className:"w-2/3",ref:u,onSubmit:a((p,v)=>y(v)),children:[E.exports.jsxs("div",{className:"relative",children:[E.exports.jsx(Fe,{register:s,label:"Name",required:!0}),l.name?.type==="required"&&E.exports.jsx("p",{className:"text-sm text-red-500 absolute right-[15px] top-[15px]",children:"Whats your name?"})]}),E.exports.jsxs("div",{className:"relative",children:[E.exports.jsx(Fe,{register:s,label:"Email",required:!0}),l.email?.type==="required"&&E.exports.jsx("p",{className:"text-sm text-red-500 absolute right-[15px] top-[15px]",children:"Whats your email?"})]}),E.exports.jsxs("div",{className:"relative",children:[E.exports.jsx(Fe,{register:s,label:"Message",required:!0,rows:5}),l.message?.type==="required"&&E.exports.jsx("p",{className:"text-sm text-red-500 absolute right-[15px] top-[15px]",children:"Whats your message?"})]}),E.exports.jsx(Ct,{label:"Send",type:"submit",loading:e})]}),E.exports.jsxs("div",{className:"w-1/3 px-8",children:[E.exports.jsxs("p",{className:"text-xl text-gray-300 mb-2",children:[E.exports.jsx("b",{children:"phone:"})," +352 661 287509"]}),E.exports.jsxs("p",{className:"text-xl text-gray-300 mb-2",children:[E.exports.jsx("b",{children:"email:"})," abdelhak.ajbouni@gmail.com"]})]})]}),E.exports.jsx(Yr,{position:"bottom-center"})]})})}export{ns as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
