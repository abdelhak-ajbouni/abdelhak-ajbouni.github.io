import{r as me,g as Xx}from"./chunks/index.54d6b5cf.js";import{j as Jo}from"./chunks/jsx-runtime.fc2968d6.js";/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const kc="144",qx={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},Yx={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},Fg=0,Zh=1,Og=2,Zx=3,Jx=0,Ff=1,Of=2,Ks=3,as=0,Nn=1,Gi=2,Xi=0,es=1,Jh=2,jh=3,Qh=4,Ug=5,Yr=100,Bg=101,kg=102,Kh=103,$h=104,Vg=200,Gg=201,Hg=202,Wg=203,Uf=204,Bf=205,Xg=206,qg=207,Yg=208,Zg=209,Jg=210,jg=0,Qg=1,Kg=2,Ic=3,$g=4,e0=5,t0=6,n0=7,va=0,i0=1,r0=2,hi=0,s0=1,o0=2,a0=3,kf=4,l0=5,Vc=300,_r=301,yr=302,$o=303,ea=304,lo=306,ta=1e3,vn=1001,na=1002,Yt=1003,Dc=1004,jx=1004,zc=1005,Qx=1005,Vt=1006,Vf=1007,Kx=1007,hs=1008,$x=1008,Mr=1009,c0=1010,u0=1011,Gf=1012,h0=1013,gr=1014,Hi=1015,ro=1016,f0=1017,d0=1018,ts=1020,p0=1021,m0=1022,ti=1023,g0=1024,v0=1025,xr=1026,ls=1027,x0=1028,_0=1029,y0=1030,M0=1031,S0=1033,bc=33776,Tc=33777,Ec=33778,Ac=33779,ef=35840,tf=35841,nf=35842,rf=35843,w0=36196,sf=37492,of=37496,af=37808,lf=37809,cf=37810,uf=37811,hf=37812,ff=37813,df=37814,pf=37815,mf=37816,gf=37817,vf=37818,xf=37819,_f=37820,yf=37821,Mf=36492,b0=2200,T0=2201,E0=2202,ia=2300,ra=2301,Cc=2302,Jr=2400,jr=2401,sa=2402,Gc=2500,Hf=2501,e_=0,t_=1,n_=2,qi=3e3,At=3001,A0=3200,C0=3201,br=0,P0=1,i_="",Si="srgb",vr="srgb-linear",r_=0,Pc=7680,s_=7681,o_=7682,a_=7683,l_=34055,c_=34056,u_=5386,h_=512,f_=513,d_=514,p_=515,m_=516,g_=517,v_=518,L0=519,oa=35044,ns=35048,x_=35040,__=35045,y_=35049,M_=35041,S_=35046,w_=35050,b_=35042,T_="100",Sf="300 es",Nc=1035;class Ji{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){if(this._listeners===void 0)return!1;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const i=this._listeners[e];if(i!==void 0){const r=i.indexOf(t);r!==-1&&i.splice(r,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const n=this._listeners[e.type];if(n!==void 0){e.target=this;const i=n.slice(0);for(let r=0,a=i.length;r<a;r++)i[r].call(this,e);e.target=null}}}const hn=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let tm=1234567;const is=Math.PI/180,aa=180/Math.PI;function Fn(){const l=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(hn[l&255]+hn[l>>8&255]+hn[l>>16&255]+hn[l>>24&255]+"-"+hn[e&255]+hn[e>>8&255]+"-"+hn[e>>16&15|64]+hn[e>>24&255]+"-"+hn[t&63|128]+hn[t>>8&255]+"-"+hn[t>>16&255]+hn[t>>24&255]+hn[n&255]+hn[n>>8&255]+hn[n>>16&255]+hn[n>>24&255]).toLowerCase()}function Gt(l,e,t){return Math.max(e,Math.min(t,l))}function Wf(l,e){return(l%e+e)%e}function E_(l,e,t,n,i){return n+(l-e)*(i-n)/(t-e)}function A_(l,e,t){return l!==e?(t-l)/(e-l):0}function jo(l,e,t){return(1-t)*l+t*e}function C_(l,e,t,n){return jo(l,e,1-Math.exp(-t*n))}function P_(l,e=1){return e-Math.abs(Wf(l,e*2)-e)}function L_(l,e,t){return l<=e?0:l>=t?1:(l=(l-e)/(t-e),l*l*(3-2*l))}function R_(l,e,t){return l<=e?0:l>=t?1:(l=(l-e)/(t-e),l*l*l*(l*(l*6-15)+10))}function I_(l,e){return l+Math.floor(Math.random()*(e-l+1))}function D_(l,e){return l+Math.random()*(e-l)}function z_(l){return l*(.5-Math.random())}function N_(l){l!==void 0&&(tm=l);let e=tm+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}function F_(l){return l*is}function O_(l){return l*aa}function wf(l){return(l&l-1)===0&&l!==0}function R0(l){return Math.pow(2,Math.ceil(Math.log(l)/Math.LN2))}function Fc(l){return Math.pow(2,Math.floor(Math.log(l)/Math.LN2))}function U_(l,e,t,n,i){const r=Math.cos,a=Math.sin,c=r(t/2),u=a(t/2),h=r((e+n)/2),d=a((e+n)/2),p=r((e-n)/2),m=a((e-n)/2),v=r((n-e)/2),x=a((n-e)/2);switch(i){case"XYX":l.set(c*d,u*p,u*m,c*h);break;case"YZY":l.set(u*m,c*d,u*p,c*h);break;case"ZXZ":l.set(u*p,u*m,c*d,c*h);break;case"XZX":l.set(c*d,u*x,u*v,c*h);break;case"YXY":l.set(u*v,c*d,u*x,c*h);break;case"ZYZ":l.set(u*x,u*v,c*d,c*h);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}function Wi(l,e){switch(e.constructor){case Float32Array:return l;case Uint16Array:return l/65535;case Uint8Array:return l/255;case Int16Array:return Math.max(l/32767,-1);case Int8Array:return Math.max(l/127,-1);default:throw new Error("Invalid component type.")}}function Tt(l,e){switch(e.constructor){case Float32Array:return l;case Uint16Array:return Math.round(l*65535);case Uint8Array:return Math.round(l*255);case Int16Array:return Math.round(l*32767);case Int8Array:return Math.round(l*127);default:throw new Error("Invalid component type.")}}var B_=Object.freeze({__proto__:null,DEG2RAD:is,RAD2DEG:aa,generateUUID:Fn,clamp:Gt,euclideanModulo:Wf,mapLinear:E_,inverseLerp:A_,lerp:jo,damp:C_,pingpong:P_,smoothstep:L_,smootherstep:R_,randInt:I_,randFloat:D_,randFloatSpread:z_,seededRandom:N_,degToRad:F_,radToDeg:O_,isPowerOfTwo:wf,ceilPowerOfTwo:R0,floorPowerOfTwo:Fc,setQuaternionFromProperEuler:U_,normalize:Tt,denormalize:Wi});class fe{constructor(e=0,t=0){fe.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t),r=this.x-e.x,a=this.y-e.y;return this.x=r*n-a*i+e.x,this.y=r*i+a*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class An{constructor(){An.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1]}set(e,t,n,i,r,a,c,u,h){const d=this.elements;return d[0]=e,d[1]=i,d[2]=c,d[3]=t,d[4]=r,d[5]=u,d[6]=n,d[7]=a,d[8]=h,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,r=this.elements,a=n[0],c=n[3],u=n[6],h=n[1],d=n[4],p=n[7],m=n[2],v=n[5],x=n[8],_=i[0],y=i[3],S=i[6],w=i[1],T=i[4],E=i[7],C=i[2],P=i[5],N=i[8];return r[0]=a*_+c*w+u*C,r[3]=a*y+c*T+u*P,r[6]=a*S+c*E+u*N,r[1]=h*_+d*w+p*C,r[4]=h*y+d*T+p*P,r[7]=h*S+d*E+p*N,r[2]=m*_+v*w+x*C,r[5]=m*y+v*T+x*P,r[8]=m*S+v*E+x*N,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],a=e[4],c=e[5],u=e[6],h=e[7],d=e[8];return t*a*d-t*c*h-n*r*d+n*c*u+i*r*h-i*a*u}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],a=e[4],c=e[5],u=e[6],h=e[7],d=e[8],p=d*a-c*h,m=c*u-d*r,v=h*r-a*u,x=t*p+n*m+i*v;if(x===0)return this.set(0,0,0,0,0,0,0,0,0);const _=1/x;return e[0]=p*_,e[1]=(i*h-d*n)*_,e[2]=(c*n-i*a)*_,e[3]=m*_,e[4]=(d*t-i*u)*_,e[5]=(i*r-c*t)*_,e[6]=v*_,e[7]=(n*u-h*t)*_,e[8]=(a*t-n*r)*_,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,i,r,a,c){const u=Math.cos(r),h=Math.sin(r);return this.set(n*u,n*h,-n*(u*a+h*c)+a+e,-i*h,i*u,-i*(-h*a+u*c)+c+t,0,0,1),this}scale(e,t){const n=this.elements;return n[0]*=e,n[3]*=e,n[6]*=e,n[1]*=t,n[4]*=t,n[7]*=t,this}rotate(e){const t=Math.cos(e),n=Math.sin(e),i=this.elements,r=i[0],a=i[3],c=i[6],u=i[1],h=i[4],d=i[7];return i[0]=t*r+n*u,i[3]=t*a+n*h,i[6]=t*c+n*d,i[1]=-n*r+t*u,i[4]=-n*a+t*h,i[7]=-n*c+t*d,this}translate(e,t){const n=this.elements;return n[0]+=e*n[2],n[3]+=e*n[5],n[6]+=e*n[8],n[1]+=t*n[2],n[4]+=t*n[5],n[7]+=t*n[8],this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}}function I0(l){for(let e=l.length-1;e>=0;--e)if(l[e]>=65535)return!0;return!1}const k_={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function $s(l,e){return new k_[l](e)}function la(l){return document.createElementNS("http://www.w3.org/1999/xhtml",l)}function rs(l){return l<.04045?l*.0773993808:Math.pow(l*.9478672986+.0521327014,2.4)}function Lc(l){return l<.0031308?l*12.92:1.055*Math.pow(l,.41666)-.055}const ah={[Si]:{[vr]:rs},[vr]:{[Si]:Lc}},Kn={legacyMode:!0,get workingColorSpace(){return vr},set workingColorSpace(l){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(l,e,t){if(this.legacyMode||e===t||!e||!t)return l;if(ah[e]&&ah[e][t]!==void 0){const n=ah[e][t];return l.r=n(l.r),l.g=n(l.g),l.b=n(l.b),l}throw new Error("Unsupported color space conversion.")},fromWorkingColorSpace:function(l,e){return this.convert(l,this.workingColorSpace,e)},toWorkingColorSpace:function(l,e){return this.convert(l,e,this.workingColorSpace)}},D0={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},jt={r:0,g:0,b:0},ai={h:0,s:0,l:0},zl={h:0,s:0,l:0};function lh(l,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?l+(e-l)*6*t:t<1/2?e:t<2/3?l+(e-l)*6*(2/3-t):l}function Nl(l,e){return e.r=l.r,e.g=l.g,e.b=l.b,e}class Le{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,t===void 0&&n===void 0?this.set(e):this.setRGB(e,t,n)}set(e){return e&&e.isColor?this.copy(e):typeof e=="number"?this.setHex(e):typeof e=="string"&&this.setStyle(e),this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=Si){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,Kn.toWorkingColorSpace(this,t),this}setRGB(e,t,n,i=vr){return this.r=e,this.g=t,this.b=n,Kn.toWorkingColorSpace(this,i),this}setHSL(e,t,n,i=vr){if(e=Wf(e,1),t=Gt(t,0,1),n=Gt(n,0,1),t===0)this.r=this.g=this.b=n;else{const r=n<=.5?n*(1+t):n+t-n*t,a=2*n-r;this.r=lh(a,r,e+1/3),this.g=lh(a,r,e),this.b=lh(a,r,e-1/3)}return Kn.toWorkingColorSpace(this,i),this}setStyle(e,t=Si){function n(r){r!==void 0&&parseFloat(r)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let i;if(i=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(e)){let r;const a=i[1],c=i[2];switch(a){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(c))return this.r=Math.min(255,parseInt(r[1],10))/255,this.g=Math.min(255,parseInt(r[2],10))/255,this.b=Math.min(255,parseInt(r[3],10))/255,Kn.toWorkingColorSpace(this,t),n(r[4]),this;if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(c))return this.r=Math.min(100,parseInt(r[1],10))/100,this.g=Math.min(100,parseInt(r[2],10))/100,this.b=Math.min(100,parseInt(r[3],10))/100,Kn.toWorkingColorSpace(this,t),n(r[4]),this;break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(c)){const u=parseFloat(r[1])/360,h=parseFloat(r[2])/100,d=parseFloat(r[3])/100;return n(r[4]),this.setHSL(u,h,d,t)}break}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(e)){const r=i[1],a=r.length;if(a===3)return this.r=parseInt(r.charAt(0)+r.charAt(0),16)/255,this.g=parseInt(r.charAt(1)+r.charAt(1),16)/255,this.b=parseInt(r.charAt(2)+r.charAt(2),16)/255,Kn.toWorkingColorSpace(this,t),this;if(a===6)return this.r=parseInt(r.charAt(0)+r.charAt(1),16)/255,this.g=parseInt(r.charAt(2)+r.charAt(3),16)/255,this.b=parseInt(r.charAt(4)+r.charAt(5),16)/255,Kn.toWorkingColorSpace(this,t),this}return e&&e.length>0?this.setColorName(e,t):this}setColorName(e,t=Si){const n=D0[e.toLowerCase()];return n!==void 0?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=rs(e.r),this.g=rs(e.g),this.b=rs(e.b),this}copyLinearToSRGB(e){return this.r=Lc(e.r),this.g=Lc(e.g),this.b=Lc(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=Si){return Kn.fromWorkingColorSpace(Nl(this,jt),e),Gt(jt.r*255,0,255)<<16^Gt(jt.g*255,0,255)<<8^Gt(jt.b*255,0,255)<<0}getHexString(e=Si){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=vr){Kn.fromWorkingColorSpace(Nl(this,jt),t);const n=jt.r,i=jt.g,r=jt.b,a=Math.max(n,i,r),c=Math.min(n,i,r);let u,h;const d=(c+a)/2;if(c===a)u=0,h=0;else{const p=a-c;switch(h=d<=.5?p/(a+c):p/(2-a-c),a){case n:u=(i-r)/p+(i<r?6:0);break;case i:u=(r-n)/p+2;break;case r:u=(n-i)/p+4;break}u/=6}return e.h=u,e.s=h,e.l=d,e}getRGB(e,t=vr){return Kn.fromWorkingColorSpace(Nl(this,jt),t),e.r=jt.r,e.g=jt.g,e.b=jt.b,e}getStyle(e=Si){return Kn.fromWorkingColorSpace(Nl(this,jt),e),e!==Si?`color(${e} ${jt.r} ${jt.g} ${jt.b})`:`rgb(${jt.r*255|0},${jt.g*255|0},${jt.b*255|0})`}offsetHSL(e,t,n){return this.getHSL(ai),ai.h+=e,ai.s+=t,ai.l+=n,this.setHSL(ai.h,ai.s,ai.l),this}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(ai),e.getHSL(zl);const n=jo(ai.h,zl.h,t),i=jo(ai.s,zl.s,t),r=jo(ai.l,zl.l,t);return this.setHSL(n,i,r),this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}Le.NAMES=D0;let Rs;class Xf{static getDataURL(e){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{Rs===void 0&&(Rs=la("canvas")),Rs.width=e.width,Rs.height=e.height;const n=Rs.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=Rs}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=la("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const i=n.getImageData(0,0,e.width,e.height),r=i.data;for(let a=0;a<r.length;a++)r[a]=rs(r[a]/255)*255;return n.putImageData(i,0,0),t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[n]=Math.floor(rs(t[n]/255)*255):t[n]=rs(t[n]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}class Qr{constructor(e=null){this.isSource=!0,this.uuid=Fn(),this.data=e,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let r;if(Array.isArray(i)){r=[];for(let a=0,c=i.length;a<c;a++)i[a].isDataTexture?r.push(ch(i[a].image)):r.push(ch(i[a]))}else r=ch(i);n.url=r}return t||(e.images[this.uuid]=n),n}}function ch(l){return typeof HTMLImageElement<"u"&&l instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&l instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&l instanceof ImageBitmap?Xf.getDataURL(l):l.data?{data:Array.from(l.data),width:l.width,height:l.height,type:l.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let V_=0;class Zt extends Ji{constructor(e=Zt.DEFAULT_IMAGE,t=Zt.DEFAULT_MAPPING,n=vn,i=vn,r=Vt,a=hs,c=ti,u=Mr,h=1,d=qi){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:V_++}),this.uuid=Fn(),this.name="",this.source=new Qr(e),this.mipmaps=[],this.mapping=t,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=a,this.anisotropy=h,this.format=c,this.internalFormat=null,this.type=u,this.offset=new fe(0,0),this.repeat=new fe(1,1),this.center=new fe(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new An,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=d,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return JSON.stringify(this.userData)!=="{}"&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==Vc)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case ta:e.x=e.x-Math.floor(e.x);break;case vn:e.x=e.x<0?0:1;break;case na:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case ta:e.y=e.y-Math.floor(e.y);break;case vn:e.y=e.y<0?0:1;break;case na:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}}Zt.DEFAULT_IMAGE=null;Zt.DEFAULT_MAPPING=Vc;class wt{constructor(e=0,t=0,n=0,i=1){wt.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,r=this.w,a=e.elements;return this.x=a[0]*t+a[4]*n+a[8]*i+a[12]*r,this.y=a[1]*t+a[5]*n+a[9]*i+a[13]*r,this.z=a[2]*t+a[6]*n+a[10]*i+a[14]*r,this.w=a[3]*t+a[7]*n+a[11]*i+a[15]*r,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,i,r;const u=e.elements,h=u[0],d=u[4],p=u[8],m=u[1],v=u[5],x=u[9],_=u[2],y=u[6],S=u[10];if(Math.abs(d-m)<.01&&Math.abs(p-_)<.01&&Math.abs(x-y)<.01){if(Math.abs(d+m)<.1&&Math.abs(p+_)<.1&&Math.abs(x+y)<.1&&Math.abs(h+v+S-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const T=(h+1)/2,E=(v+1)/2,C=(S+1)/2,P=(d+m)/4,N=(p+_)/4,A=(x+y)/4;return T>E&&T>C?T<.01?(n=0,i=.707106781,r=.707106781):(n=Math.sqrt(T),i=P/n,r=N/n):E>C?E<.01?(n=.707106781,i=0,r=.707106781):(i=Math.sqrt(E),n=P/i,r=A/i):C<.01?(n=.707106781,i=.707106781,r=0):(r=Math.sqrt(C),n=N/r,i=A/r),this.set(n,i,r,t),this}let w=Math.sqrt((y-x)*(y-x)+(p-_)*(p-_)+(m-d)*(m-d));return Math.abs(w)<.001&&(w=1),this.x=(y-x)/w,this.y=(p-_)/w,this.z=(m-d)/w,this.w=Math.acos((h+v+S-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class ni extends Ji{constructor(e,t,n={}){super(),this.isWebGLRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new wt(0,0,e,t),this.scissorTest=!1,this.viewport=new wt(0,0,e,t);const i={width:e,height:t,depth:1};this.texture=new Zt(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=n.generateMipmaps!==void 0?n.generateMipmaps:!1,this.texture.internalFormat=n.internalFormat!==void 0?n.internalFormat:null,this.texture.minFilter=n.minFilter!==void 0?n.minFilter:Vt,this.depthBuffer=n.depthBuffer!==void 0?n.depthBuffer:!0,this.stencilBuffer=n.stencilBuffer!==void 0?n.stencilBuffer:!1,this.depthTexture=n.depthTexture!==void 0?n.depthTexture:null,this.samples=n.samples!==void 0?n.samples:0}setSize(e,t,n=1){(this.width!==e||this.height!==t||this.depth!==n)&&(this.width=e,this.height=t,this.depth=n,this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.texture.isRenderTargetTexture=!0;const t=Object.assign({},e.texture.image);return this.texture.source=new Qr(t),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class xa extends Zt{constructor(e=null,t=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=Yt,this.minFilter=Yt,this.wrapR=vn,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class G_ extends ni{constructor(e,t,n){super(e,t),this.isWebGLArrayRenderTarget=!0,this.depth=n,this.texture=new xa(null,e,t,n),this.texture.isRenderTargetTexture=!0}}class Hc extends Zt{constructor(e=null,t=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=Yt,this.minFilter=Yt,this.wrapR=vn,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class H_ extends ni{constructor(e,t,n){super(e,t),this.isWebGL3DRenderTarget=!0,this.depth=n,this.texture=new Hc(null,e,t,n),this.texture.isRenderTargetTexture=!0}}class W_ extends ni{constructor(e,t,n,i={}){super(e,t,i),this.isWebGLMultipleRenderTargets=!0;const r=this.texture;this.texture=[];for(let a=0;a<n;a++)this.texture[a]=r.clone(),this.texture[a].isRenderTargetTexture=!0}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e,this.height=t,this.depth=n;for(let i=0,r=this.texture.length;i<r;i++)this.texture[i].image.width=e,this.texture[i].image.height=t,this.texture[i].image.depth=n;this.dispose()}return this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t),this}copy(e){this.dispose(),this.width=e.width,this.height=e.height,this.depth=e.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.texture.length=0;for(let t=0,n=e.texture.length;t<n;t++)this.texture[t]=e.texture[t].clone(),this.texture[t].isRenderTargetTexture=!0;return this}}class Cn{constructor(e=0,t=0,n=0,i=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=i}static slerpFlat(e,t,n,i,r,a,c){let u=n[i+0],h=n[i+1],d=n[i+2],p=n[i+3];const m=r[a+0],v=r[a+1],x=r[a+2],_=r[a+3];if(c===0){e[t+0]=u,e[t+1]=h,e[t+2]=d,e[t+3]=p;return}if(c===1){e[t+0]=m,e[t+1]=v,e[t+2]=x,e[t+3]=_;return}if(p!==_||u!==m||h!==v||d!==x){let y=1-c;const S=u*m+h*v+d*x+p*_,w=S>=0?1:-1,T=1-S*S;if(T>Number.EPSILON){const C=Math.sqrt(T),P=Math.atan2(C,S*w);y=Math.sin(y*P)/C,c=Math.sin(c*P)/C}const E=c*w;if(u=u*y+m*E,h=h*y+v*E,d=d*y+x*E,p=p*y+_*E,y===1-c){const C=1/Math.sqrt(u*u+h*h+d*d+p*p);u*=C,h*=C,d*=C,p*=C}}e[t]=u,e[t+1]=h,e[t+2]=d,e[t+3]=p}static multiplyQuaternionsFlat(e,t,n,i,r,a){const c=n[i],u=n[i+1],h=n[i+2],d=n[i+3],p=r[a],m=r[a+1],v=r[a+2],x=r[a+3];return e[t]=c*x+d*p+u*v-h*m,e[t+1]=u*x+d*m+h*p-c*v,e[t+2]=h*x+d*v+c*m-u*p,e[t+3]=d*x-c*p-u*m-h*v,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t){const n=e._x,i=e._y,r=e._z,a=e._order,c=Math.cos,u=Math.sin,h=c(n/2),d=c(i/2),p=c(r/2),m=u(n/2),v=u(i/2),x=u(r/2);switch(a){case"XYZ":this._x=m*d*p+h*v*x,this._y=h*v*p-m*d*x,this._z=h*d*x+m*v*p,this._w=h*d*p-m*v*x;break;case"YXZ":this._x=m*d*p+h*v*x,this._y=h*v*p-m*d*x,this._z=h*d*x-m*v*p,this._w=h*d*p+m*v*x;break;case"ZXY":this._x=m*d*p-h*v*x,this._y=h*v*p+m*d*x,this._z=h*d*x+m*v*p,this._w=h*d*p-m*v*x;break;case"ZYX":this._x=m*d*p-h*v*x,this._y=h*v*p+m*d*x,this._z=h*d*x-m*v*p,this._w=h*d*p+m*v*x;break;case"YZX":this._x=m*d*p+h*v*x,this._y=h*v*p+m*d*x,this._z=h*d*x-m*v*p,this._w=h*d*p-m*v*x;break;case"XZY":this._x=m*d*p-h*v*x,this._y=h*v*p-m*d*x,this._z=h*d*x+m*v*p,this._w=h*d*p+m*v*x;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return t!==!1&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],r=t[8],a=t[1],c=t[5],u=t[9],h=t[2],d=t[6],p=t[10],m=n+c+p;if(m>0){const v=.5/Math.sqrt(m+1);this._w=.25/v,this._x=(d-u)*v,this._y=(r-h)*v,this._z=(a-i)*v}else if(n>c&&n>p){const v=2*Math.sqrt(1+n-c-p);this._w=(d-u)/v,this._x=.25*v,this._y=(i+a)/v,this._z=(r+h)/v}else if(c>p){const v=2*Math.sqrt(1+c-n-p);this._w=(r-h)/v,this._x=(i+a)/v,this._y=.25*v,this._z=(u+d)/v}else{const v=2*Math.sqrt(1+p-n-c);this._w=(a-i)/v,this._x=(r+h)/v,this._y=(u+d)/v,this._z=.25*v}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(Gt(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const i=Math.min(1,t/n);return this.slerp(e,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,r=e._z,a=e._w,c=t._x,u=t._y,h=t._z,d=t._w;return this._x=n*d+a*c+i*h-r*u,this._y=i*d+a*u+r*c-n*h,this._z=r*d+a*h+n*u-i*c,this._w=a*d-n*c-i*u-r*h,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,i=this._y,r=this._z,a=this._w;let c=a*e._w+n*e._x+i*e._y+r*e._z;if(c<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,c=-c):this.copy(e),c>=1)return this._w=a,this._x=n,this._y=i,this._z=r,this;const u=1-c*c;if(u<=Number.EPSILON){const v=1-t;return this._w=v*a+t*this._w,this._x=v*n+t*this._x,this._y=v*i+t*this._y,this._z=v*r+t*this._z,this.normalize(),this._onChangeCallback(),this}const h=Math.sqrt(u),d=Math.atan2(h,c),p=Math.sin((1-t)*d)/h,m=Math.sin(t*d)/h;return this._w=a*p+this._w*m,this._x=n*p+this._x*m,this._y=i*p+this._y*m,this._z=r*p+this._z*m,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=Math.random(),t=Math.sqrt(1-e),n=Math.sqrt(e),i=2*Math.PI*Math.random(),r=2*Math.PI*Math.random();return this.set(t*Math.cos(i),n*Math.sin(r),n*Math.cos(r),t*Math.sin(i))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class I{constructor(e=0,t=0,n=0){I.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(nm.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(nm.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,r=e.elements;return this.x=r[0]*t+r[3]*n+r[6]*i,this.y=r[1]*t+r[4]*n+r[7]*i,this.z=r[2]*t+r[5]*n+r[8]*i,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,r=e.elements,a=1/(r[3]*t+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*t+r[4]*n+r[8]*i+r[12])*a,this.y=(r[1]*t+r[5]*n+r[9]*i+r[13])*a,this.z=(r[2]*t+r[6]*n+r[10]*i+r[14])*a,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,r=e.x,a=e.y,c=e.z,u=e.w,h=u*t+a*i-c*n,d=u*n+c*t-r*i,p=u*i+r*n-a*t,m=-r*t-a*n-c*i;return this.x=h*u+m*-r+d*-c-p*-a,this.y=d*u+m*-a+p*-r-h*-c,this.z=p*u+m*-c+h*-a-d*-r,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z,r=e.elements;return this.x=r[0]*t+r[4]*n+r[8]*i,this.y=r[1]*t+r[5]*n+r[9]*i,this.z=r[2]*t+r[6]*n+r[10]*i,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,r=e.z,a=t.x,c=t.y,u=t.z;return this.x=i*u-r*c,this.y=r*a-n*u,this.z=n*c-i*a,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return uh.copy(this).projectOnVector(e),this.sub(uh)}reflect(e){return this.sub(uh.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(Gt(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=(Math.random()-.5)*2,t=Math.random()*Math.PI*2,n=Math.sqrt(1-e**2);return this.x=n*Math.cos(t),this.y=n*Math.sin(t),this.z=e,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const uh=new I,nm=new Cn;class fs{constructor(e=new I(1/0,1/0,1/0),t=new I(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){let t=1/0,n=1/0,i=1/0,r=-1/0,a=-1/0,c=-1/0;for(let u=0,h=e.length;u<h;u+=3){const d=e[u],p=e[u+1],m=e[u+2];d<t&&(t=d),p<n&&(n=p),m<i&&(i=m),d>r&&(r=d),p>a&&(a=p),m>c&&(c=m)}return this.min.set(t,n,i),this.max.set(r,a,c),this}setFromBufferAttribute(e){let t=1/0,n=1/0,i=1/0,r=-1/0,a=-1/0,c=-1/0;for(let u=0,h=e.count;u<h;u++){const d=e.getX(u),p=e.getY(u),m=e.getZ(u);d<t&&(t=d),p<n&&(n=p),m<i&&(i=m),d>r&&(r=d),p>a&&(a=p),m>c&&(c=m)}return this.min.set(t,n,i),this.max.set(r,a,c),this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=Or.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(n!==void 0)if(t&&n.attributes!=null&&n.attributes.position!==void 0){const r=n.attributes.position;for(let a=0,c=r.count;a<c;a++)Or.fromBufferAttribute(r,a).applyMatrix4(e.matrixWorld),this.expandByPoint(Or)}else n.boundingBox===null&&n.computeBoundingBox(),hh.copy(n.boundingBox),hh.applyMatrix4(e.matrixWorld),this.union(hh);const i=e.children;for(let r=0,a=i.length;r<a;r++)this.expandByObject(i[r],t);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,Or),Or.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(Oo),Fl.subVectors(this.max,Oo),Is.subVectors(e.a,Oo),Ds.subVectors(e.b,Oo),zs.subVectors(e.c,Oo),ar.subVectors(Ds,Is),lr.subVectors(zs,Ds),Ur.subVectors(Is,zs);let t=[0,-ar.z,ar.y,0,-lr.z,lr.y,0,-Ur.z,Ur.y,ar.z,0,-ar.x,lr.z,0,-lr.x,Ur.z,0,-Ur.x,-ar.y,ar.x,0,-lr.y,lr.x,0,-Ur.y,Ur.x,0];return!fh(t,Is,Ds,zs,Fl)||(t=[1,0,0,0,1,0,0,0,1],!fh(t,Is,Ds,zs,Fl))?!1:(Ol.crossVectors(ar,lr),t=[Ol.x,Ol.y,Ol.z],fh(t,Is,Ds,zs,Fl))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return Or.copy(e).clamp(this.min,this.max).sub(e).length()}getBoundingSphere(e){return this.getCenter(e.center),e.radius=this.getSize(Or).length()*.5,e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(Ni[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),Ni[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),Ni[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),Ni[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),Ni[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),Ni[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),Ni[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),Ni[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(Ni),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const Ni=[new I,new I,new I,new I,new I,new I,new I,new I],Or=new I,hh=new fs,Is=new I,Ds=new I,zs=new I,ar=new I,lr=new I,Ur=new I,Oo=new I,Fl=new I,Ol=new I,Br=new I;function fh(l,e,t,n,i){for(let r=0,a=l.length-3;r<=a;r+=3){Br.fromArray(l,r);const c=i.x*Math.abs(Br.x)+i.y*Math.abs(Br.y)+i.z*Math.abs(Br.z),u=e.dot(Br),h=t.dot(Br),d=n.dot(Br);if(Math.max(-Math.max(u,h,d),Math.min(u,h,d))>c)return!1}return!0}const X_=new fs,im=new I,Ul=new I,dh=new I;class ds{constructor(e=new I,t=-1){this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):X_.setFromPoints(e).getCenter(n);let i=0;for(let r=0,a=e.length;r<a;r++)i=Math.max(i,n.distanceToSquared(e[r]));return this.radius=Math.sqrt(i),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){dh.subVectors(e,this.center);const t=dh.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t),i=(n-this.radius)*.5;this.center.add(dh.multiplyScalar(i/n)),this.radius+=i}return this}union(e){return this.center.equals(e.center)===!0?Ul.set(0,0,1).multiplyScalar(e.radius):Ul.subVectors(e.center,this.center).normalize().multiplyScalar(e.radius),this.expandByPoint(im.copy(e.center).add(Ul)),this.expandByPoint(im.copy(e.center).sub(Ul)),this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const Fi=new I,ph=new I,Bl=new I,cr=new I,mh=new I,kl=new I,gh=new I;class _a{constructor(e=new I,t=new I(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.direction).multiplyScalar(e).add(this.origin)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,Fi)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=Fi.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(Fi.copy(this.direction).multiplyScalar(t).add(this.origin),Fi.distanceToSquared(e))}distanceSqToSegment(e,t,n,i){ph.copy(e).add(t).multiplyScalar(.5),Bl.copy(t).sub(e).normalize(),cr.copy(this.origin).sub(ph);const r=e.distanceTo(t)*.5,a=-this.direction.dot(Bl),c=cr.dot(this.direction),u=-cr.dot(Bl),h=cr.lengthSq(),d=Math.abs(1-a*a);let p,m,v,x;if(d>0)if(p=a*u-c,m=a*c-u,x=r*d,p>=0)if(m>=-x)if(m<=x){const _=1/d;p*=_,m*=_,v=p*(p+a*m+2*c)+m*(a*p+m+2*u)+h}else m=r,p=Math.max(0,-(a*m+c)),v=-p*p+m*(m+2*u)+h;else m=-r,p=Math.max(0,-(a*m+c)),v=-p*p+m*(m+2*u)+h;else m<=-x?(p=Math.max(0,-(-a*r+c)),m=p>0?-r:Math.min(Math.max(-r,-u),r),v=-p*p+m*(m+2*u)+h):m<=x?(p=0,m=Math.min(Math.max(-r,-u),r),v=m*(m+2*u)+h):(p=Math.max(0,-(a*r+c)),m=p>0?r:Math.min(Math.max(-r,-u),r),v=-p*p+m*(m+2*u)+h);else m=a>0?-r:r,p=Math.max(0,-(a*m+c)),v=-p*p+m*(m+2*u)+h;return n&&n.copy(this.direction).multiplyScalar(p).add(this.origin),i&&i.copy(Bl).multiplyScalar(m).add(ph),v}intersectSphere(e,t){Fi.subVectors(e.center,this.origin);const n=Fi.dot(this.direction),i=Fi.dot(Fi)-n*n,r=e.radius*e.radius;if(i>r)return null;const a=Math.sqrt(r-i),c=n-a,u=n+a;return c<0&&u<0?null:c<0?this.at(u,t):this.at(c,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,i,r,a,c,u;const h=1/this.direction.x,d=1/this.direction.y,p=1/this.direction.z,m=this.origin;return h>=0?(n=(e.min.x-m.x)*h,i=(e.max.x-m.x)*h):(n=(e.max.x-m.x)*h,i=(e.min.x-m.x)*h),d>=0?(r=(e.min.y-m.y)*d,a=(e.max.y-m.y)*d):(r=(e.max.y-m.y)*d,a=(e.min.y-m.y)*d),n>a||r>i||((r>n||n!==n)&&(n=r),(a<i||i!==i)&&(i=a),p>=0?(c=(e.min.z-m.z)*p,u=(e.max.z-m.z)*p):(c=(e.max.z-m.z)*p,u=(e.min.z-m.z)*p),n>u||c>i)||((c>n||n!==n)&&(n=c),(u<i||i!==i)&&(i=u),i<0)?null:this.at(n>=0?n:i,t)}intersectsBox(e){return this.intersectBox(e,Fi)!==null}intersectTriangle(e,t,n,i,r){mh.subVectors(t,e),kl.subVectors(n,e),gh.crossVectors(mh,kl);let a=this.direction.dot(gh),c;if(a>0){if(i)return null;c=1}else if(a<0)c=-1,a=-a;else return null;cr.subVectors(this.origin,e);const u=c*this.direction.dot(kl.crossVectors(cr,kl));if(u<0)return null;const h=c*this.direction.dot(mh.cross(cr));if(h<0||u+h>a)return null;const d=-c*cr.dot(gh);return d<0?null:this.at(d/a,r)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class et{constructor(){et.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}set(e,t,n,i,r,a,c,u,h,d,p,m,v,x,_,y){const S=this.elements;return S[0]=e,S[4]=t,S[8]=n,S[12]=i,S[1]=r,S[5]=a,S[9]=c,S[13]=u,S[2]=h,S[6]=d,S[10]=p,S[14]=m,S[3]=v,S[7]=x,S[11]=_,S[15]=y,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new et().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,i=1/Ns.setFromMatrixColumn(e,0).length(),r=1/Ns.setFromMatrixColumn(e,1).length(),a=1/Ns.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=0,t[8]=n[8]*a,t[9]=n[9]*a,t[10]=n[10]*a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,n=e.x,i=e.y,r=e.z,a=Math.cos(n),c=Math.sin(n),u=Math.cos(i),h=Math.sin(i),d=Math.cos(r),p=Math.sin(r);if(e.order==="XYZ"){const m=a*d,v=a*p,x=c*d,_=c*p;t[0]=u*d,t[4]=-u*p,t[8]=h,t[1]=v+x*h,t[5]=m-_*h,t[9]=-c*u,t[2]=_-m*h,t[6]=x+v*h,t[10]=a*u}else if(e.order==="YXZ"){const m=u*d,v=u*p,x=h*d,_=h*p;t[0]=m+_*c,t[4]=x*c-v,t[8]=a*h,t[1]=a*p,t[5]=a*d,t[9]=-c,t[2]=v*c-x,t[6]=_+m*c,t[10]=a*u}else if(e.order==="ZXY"){const m=u*d,v=u*p,x=h*d,_=h*p;t[0]=m-_*c,t[4]=-a*p,t[8]=x+v*c,t[1]=v+x*c,t[5]=a*d,t[9]=_-m*c,t[2]=-a*h,t[6]=c,t[10]=a*u}else if(e.order==="ZYX"){const m=a*d,v=a*p,x=c*d,_=c*p;t[0]=u*d,t[4]=x*h-v,t[8]=m*h+_,t[1]=u*p,t[5]=_*h+m,t[9]=v*h-x,t[2]=-h,t[6]=c*u,t[10]=a*u}else if(e.order==="YZX"){const m=a*u,v=a*h,x=c*u,_=c*h;t[0]=u*d,t[4]=_-m*p,t[8]=x*p+v,t[1]=p,t[5]=a*d,t[9]=-c*d,t[2]=-h*d,t[6]=v*p+x,t[10]=m-_*p}else if(e.order==="XZY"){const m=a*u,v=a*h,x=c*u,_=c*h;t[0]=u*d,t[4]=-p,t[8]=h*d,t[1]=m*p+_,t[5]=a*d,t[9]=v*p-x,t[2]=x*p-v,t[6]=c*d,t[10]=_*p+m}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(q_,e,Y_)}lookAt(e,t,n){const i=this.elements;return Dn.subVectors(e,t),Dn.lengthSq()===0&&(Dn.z=1),Dn.normalize(),ur.crossVectors(n,Dn),ur.lengthSq()===0&&(Math.abs(n.z)===1?Dn.x+=1e-4:Dn.z+=1e-4,Dn.normalize(),ur.crossVectors(n,Dn)),ur.normalize(),Vl.crossVectors(Dn,ur),i[0]=ur.x,i[4]=Vl.x,i[8]=Dn.x,i[1]=ur.y,i[5]=Vl.y,i[9]=Dn.y,i[2]=ur.z,i[6]=Vl.z,i[10]=Dn.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,r=this.elements,a=n[0],c=n[4],u=n[8],h=n[12],d=n[1],p=n[5],m=n[9],v=n[13],x=n[2],_=n[6],y=n[10],S=n[14],w=n[3],T=n[7],E=n[11],C=n[15],P=i[0],N=i[4],A=i[8],L=i[12],O=i[1],X=i[5],ae=i[9],J=i[13],H=i[2],K=i[6],ie=i[10],he=i[14],k=i[3],U=i[7],B=i[11],le=i[15];return r[0]=a*P+c*O+u*H+h*k,r[4]=a*N+c*X+u*K+h*U,r[8]=a*A+c*ae+u*ie+h*B,r[12]=a*L+c*J+u*he+h*le,r[1]=d*P+p*O+m*H+v*k,r[5]=d*N+p*X+m*K+v*U,r[9]=d*A+p*ae+m*ie+v*B,r[13]=d*L+p*J+m*he+v*le,r[2]=x*P+_*O+y*H+S*k,r[6]=x*N+_*X+y*K+S*U,r[10]=x*A+_*ae+y*ie+S*B,r[14]=x*L+_*J+y*he+S*le,r[3]=w*P+T*O+E*H+C*k,r[7]=w*N+T*X+E*K+C*U,r[11]=w*A+T*ae+E*ie+C*B,r[15]=w*L+T*J+E*he+C*le,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],r=e[12],a=e[1],c=e[5],u=e[9],h=e[13],d=e[2],p=e[6],m=e[10],v=e[14],x=e[3],_=e[7],y=e[11],S=e[15];return x*(+r*u*p-i*h*p-r*c*m+n*h*m+i*c*v-n*u*v)+_*(+t*u*v-t*h*m+r*a*m-i*a*v+i*h*d-r*u*d)+y*(+t*h*p-t*c*v-r*a*p+n*a*v+r*c*d-n*h*d)+S*(-i*c*d-t*u*p+t*c*m+i*a*p-n*a*m+n*u*d)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],a=e[4],c=e[5],u=e[6],h=e[7],d=e[8],p=e[9],m=e[10],v=e[11],x=e[12],_=e[13],y=e[14],S=e[15],w=p*y*h-_*m*h+_*u*v-c*y*v-p*u*S+c*m*S,T=x*m*h-d*y*h-x*u*v+a*y*v+d*u*S-a*m*S,E=d*_*h-x*p*h+x*c*v-a*_*v-d*c*S+a*p*S,C=x*p*u-d*_*u-x*c*m+a*_*m+d*c*y-a*p*y,P=t*w+n*T+i*E+r*C;if(P===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const N=1/P;return e[0]=w*N,e[1]=(_*m*r-p*y*r-_*i*v+n*y*v+p*i*S-n*m*S)*N,e[2]=(c*y*r-_*u*r+_*i*h-n*y*h-c*i*S+n*u*S)*N,e[3]=(p*u*r-c*m*r-p*i*h+n*m*h+c*i*v-n*u*v)*N,e[4]=T*N,e[5]=(d*y*r-x*m*r+x*i*v-t*y*v-d*i*S+t*m*S)*N,e[6]=(x*u*r-a*y*r-x*i*h+t*y*h+a*i*S-t*u*S)*N,e[7]=(a*m*r-d*u*r+d*i*h-t*m*h-a*i*v+t*u*v)*N,e[8]=E*N,e[9]=(x*p*r-d*_*r-x*n*v+t*_*v+d*n*S-t*p*S)*N,e[10]=(a*_*r-x*c*r+x*n*h-t*_*h-a*n*S+t*c*S)*N,e[11]=(d*c*r-a*p*r-d*n*h+t*p*h+a*n*v-t*c*v)*N,e[12]=C*N,e[13]=(d*_*i-x*p*i+x*n*m-t*_*m-d*n*y+t*p*y)*N,e[14]=(x*c*i-a*_*i-x*n*u+t*_*u+a*n*y-t*c*y)*N,e[15]=(a*p*i-d*c*i+d*n*u-t*p*u-a*n*m+t*c*m)*N,this}scale(e){const t=this.elements,n=e.x,i=e.y,r=e.z;return t[0]*=n,t[4]*=i,t[8]*=r,t[1]*=n,t[5]*=i,t[9]*=r,t[2]*=n,t[6]*=i,t[10]*=r,t[3]*=n,t[7]*=i,t[11]*=r,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),i=Math.sin(t),r=1-n,a=e.x,c=e.y,u=e.z,h=r*a,d=r*c;return this.set(h*a+n,h*c-i*u,h*u+i*c,0,h*c+i*u,d*c+n,d*u-i*a,0,h*u-i*c,d*u+i*a,r*u*u+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,i,r,a){return this.set(1,n,r,0,e,1,a,0,t,i,1,0,0,0,0,1),this}compose(e,t,n){const i=this.elements,r=t._x,a=t._y,c=t._z,u=t._w,h=r+r,d=a+a,p=c+c,m=r*h,v=r*d,x=r*p,_=a*d,y=a*p,S=c*p,w=u*h,T=u*d,E=u*p,C=n.x,P=n.y,N=n.z;return i[0]=(1-(_+S))*C,i[1]=(v+E)*C,i[2]=(x-T)*C,i[3]=0,i[4]=(v-E)*P,i[5]=(1-(m+S))*P,i[6]=(y+w)*P,i[7]=0,i[8]=(x+T)*N,i[9]=(y-w)*N,i[10]=(1-(m+_))*N,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}decompose(e,t,n){const i=this.elements;let r=Ns.set(i[0],i[1],i[2]).length();const a=Ns.set(i[4],i[5],i[6]).length(),c=Ns.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),e.x=i[12],e.y=i[13],e.z=i[14],li.copy(this);const h=1/r,d=1/a,p=1/c;return li.elements[0]*=h,li.elements[1]*=h,li.elements[2]*=h,li.elements[4]*=d,li.elements[5]*=d,li.elements[6]*=d,li.elements[8]*=p,li.elements[9]*=p,li.elements[10]*=p,t.setFromRotationMatrix(li),n.x=r,n.y=a,n.z=c,this}makePerspective(e,t,n,i,r,a){const c=this.elements,u=2*r/(t-e),h=2*r/(n-i),d=(t+e)/(t-e),p=(n+i)/(n-i),m=-(a+r)/(a-r),v=-2*a*r/(a-r);return c[0]=u,c[4]=0,c[8]=d,c[12]=0,c[1]=0,c[5]=h,c[9]=p,c[13]=0,c[2]=0,c[6]=0,c[10]=m,c[14]=v,c[3]=0,c[7]=0,c[11]=-1,c[15]=0,this}makeOrthographic(e,t,n,i,r,a){const c=this.elements,u=1/(t-e),h=1/(n-i),d=1/(a-r),p=(t+e)*u,m=(n+i)*h,v=(a+r)*d;return c[0]=2*u,c[4]=0,c[8]=0,c[12]=-p,c[1]=0,c[5]=2*h,c[9]=0,c[13]=-m,c[2]=0,c[6]=0,c[10]=-2*d,c[14]=-v,c[3]=0,c[7]=0,c[11]=0,c[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}const Ns=new I,li=new et,q_=new I(0,0,0),Y_=new I(1,1,1),ur=new I,Vl=new I,Dn=new I,rm=new et,sm=new Cn;class co{constructor(e=0,t=0,n=0,i=co.DefaultOrder){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=i}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,i=this._order){return this._x=e,this._y=t,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const i=e.elements,r=i[0],a=i[4],c=i[8],u=i[1],h=i[5],d=i[9],p=i[2],m=i[6],v=i[10];switch(t){case"XYZ":this._y=Math.asin(Gt(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-d,v),this._z=Math.atan2(-a,r)):(this._x=Math.atan2(m,h),this._z=0);break;case"YXZ":this._x=Math.asin(-Gt(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(c,v),this._z=Math.atan2(u,h)):(this._y=Math.atan2(-p,r),this._z=0);break;case"ZXY":this._x=Math.asin(Gt(m,-1,1)),Math.abs(m)<.9999999?(this._y=Math.atan2(-p,v),this._z=Math.atan2(-a,h)):(this._y=0,this._z=Math.atan2(u,r));break;case"ZYX":this._y=Math.asin(-Gt(p,-1,1)),Math.abs(p)<.9999999?(this._x=Math.atan2(m,v),this._z=Math.atan2(u,r)):(this._x=0,this._z=Math.atan2(-a,h));break;case"YZX":this._z=Math.asin(Gt(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(-d,h),this._y=Math.atan2(-p,r)):(this._x=0,this._y=Math.atan2(c,v));break;case"XZY":this._z=Math.asin(-Gt(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(m,h),this._y=Math.atan2(c,r)):(this._x=Math.atan2(-d,v),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return rm.makeRotationFromQuaternion(e),this.setFromRotationMatrix(rm,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return sm.setFromEuler(this),this.setFromQuaternion(sm,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}toVector3(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")}}co.DefaultOrder="XYZ";co.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class ss{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let Z_=0;const om=new I,Fs=new Cn,Oi=new et,Gl=new I,Uo=new I,J_=new I,j_=new Cn,am=new I(1,0,0),lm=new I(0,1,0),cm=new I(0,0,1),Q_={type:"added"},um={type:"removed"};class _t extends Ji{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:Z_++}),this.uuid=Fn(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=_t.DefaultUp.clone();const e=new I,t=new co,n=new Cn,i=new I(1,1,1);function r(){n.setFromEuler(t,!1)}function a(){t.setFromQuaternion(n,void 0,!1)}t._onChange(r),n._onChange(a),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new et},normalMatrix:{value:new An}}),this.matrix=new et,this.matrixWorld=new et,this.matrixAutoUpdate=_t.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.matrixWorldAutoUpdate=_t.DefaultMatrixWorldAutoUpdate,this.layers=new ss,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return Fs.setFromAxisAngle(e,t),this.quaternion.multiply(Fs),this}rotateOnWorldAxis(e,t){return Fs.setFromAxisAngle(e,t),this.quaternion.premultiply(Fs),this}rotateX(e){return this.rotateOnAxis(am,e)}rotateY(e){return this.rotateOnAxis(lm,e)}rotateZ(e){return this.rotateOnAxis(cm,e)}translateOnAxis(e,t){return om.copy(e).applyQuaternion(this.quaternion),this.position.add(om.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(am,e)}translateY(e){return this.translateOnAxis(lm,e)}translateZ(e){return this.translateOnAxis(cm,e)}localToWorld(e){return e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return e.applyMatrix4(Oi.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?Gl.copy(e):Gl.set(e,t,n);const i=this.parent;this.updateWorldMatrix(!0,!1),Uo.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Oi.lookAt(Uo,Gl,this.up):Oi.lookAt(Gl,Uo,this.up),this.quaternion.setFromRotationMatrix(Oi),i&&(Oi.extractRotation(i.matrixWorld),Fs.setFromRotationMatrix(Oi),this.quaternion.premultiply(Fs.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.parent!==null&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(Q_)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(um)),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){for(let e=0;e<this.children.length;e++){const t=this.children[e];t.parent=null,t.dispatchEvent(um)}return this.children.length=0,this}attach(e){return this.updateWorldMatrix(!0,!1),Oi.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),Oi.multiply(e.parent.matrixWorld)),e.applyMatrix4(Oi),this.add(e),e.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,i=this.children.length;n<i;n++){const a=this.children[n].getObjectByProperty(e,t);if(a!==void 0)return a}}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Uo,e,J_),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Uo,j_,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,i=t.length;n<i;n++){const r=t[n];(r.matrixWorldAutoUpdate===!0||e===!0)&&r.updateMatrixWorld(e)}}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.matrixWorldAutoUpdate===!0&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),t===!0){const i=this.children;for(let r=0,a=i.length;r<a;r++){const c=i[r];c.matrixWorldAutoUpdate===!0&&c.updateWorldMatrix(!1,!0)}}}toJSON(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),JSON.stringify(this.userData)!=="{}"&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON()));function r(c,u){return c[u.uuid]===void 0&&(c[u.uuid]=u.toJSON(e)),u.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(e.geometries,this.geometry);const c=this.geometry.parameters;if(c!==void 0&&c.shapes!==void 0){const u=c.shapes;if(Array.isArray(u))for(let h=0,d=u.length;h<d;h++){const p=u[h];r(e.shapes,p)}else r(e.shapes,u)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(r(e.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const c=[];for(let u=0,h=this.material.length;u<h;u++)c.push(r(e.materials,this.material[u]));i.material=c}else i.material=r(e.materials,this.material);if(this.children.length>0){i.children=[];for(let c=0;c<this.children.length;c++)i.children.push(this.children[c].toJSON(e).object)}if(this.animations.length>0){i.animations=[];for(let c=0;c<this.animations.length;c++){const u=this.animations[c];i.animations.push(r(e.animations,u))}}if(t){const c=a(e.geometries),u=a(e.materials),h=a(e.textures),d=a(e.images),p=a(e.shapes),m=a(e.skeletons),v=a(e.animations),x=a(e.nodes);c.length>0&&(n.geometries=c),u.length>0&&(n.materials=u),h.length>0&&(n.textures=h),d.length>0&&(n.images=d),p.length>0&&(n.shapes=p),m.length>0&&(n.skeletons=m),v.length>0&&(n.animations=v),x.length>0&&(n.nodes=x)}return n.object=i,n;function a(c){const u=[];for(const h in c){const d=c[h];delete d.metadata,u.push(d)}return u}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const i=e.children[n];this.add(i.clone())}return this}}_t.DefaultUp=new I(0,1,0);_t.DefaultMatrixAutoUpdate=!0;_t.DefaultMatrixWorldAutoUpdate=!0;const ci=new I,Ui=new I,vh=new I,Bi=new I,Os=new I,Us=new I,hm=new I,xh=new I,_h=new I,yh=new I;class ei{constructor(e=new I,t=new I,n=new I){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,i){i.subVectors(n,t),ci.subVectors(e,t),i.cross(ci);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(e,t,n,i,r){ci.subVectors(i,t),Ui.subVectors(n,t),vh.subVectors(e,t);const a=ci.dot(ci),c=ci.dot(Ui),u=ci.dot(vh),h=Ui.dot(Ui),d=Ui.dot(vh),p=a*h-c*c;if(p===0)return r.set(-2,-1,-1);const m=1/p,v=(h*u-c*d)*m,x=(a*d-c*u)*m;return r.set(1-v-x,x,v)}static containsPoint(e,t,n,i){return this.getBarycoord(e,t,n,i,Bi),Bi.x>=0&&Bi.y>=0&&Bi.x+Bi.y<=1}static getUV(e,t,n,i,r,a,c,u){return this.getBarycoord(e,t,n,i,Bi),u.set(0,0),u.addScaledVector(r,Bi.x),u.addScaledVector(a,Bi.y),u.addScaledVector(c,Bi.z),u}static isFrontFacing(e,t,n,i){return ci.subVectors(n,t),Ui.subVectors(e,t),ci.cross(Ui).dot(i)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this}setFromAttributeAndIndices(e,t,n,i){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,i),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return ci.subVectors(this.c,this.b),Ui.subVectors(this.a,this.b),ci.cross(Ui).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return ei.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return ei.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,i,r){return ei.getUV(e,this.a,this.b,this.c,t,n,i,r)}containsPoint(e){return ei.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return ei.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,i=this.b,r=this.c;let a,c;Os.subVectors(i,n),Us.subVectors(r,n),xh.subVectors(e,n);const u=Os.dot(xh),h=Us.dot(xh);if(u<=0&&h<=0)return t.copy(n);_h.subVectors(e,i);const d=Os.dot(_h),p=Us.dot(_h);if(d>=0&&p<=d)return t.copy(i);const m=u*p-d*h;if(m<=0&&u>=0&&d<=0)return a=u/(u-d),t.copy(n).addScaledVector(Os,a);yh.subVectors(e,r);const v=Os.dot(yh),x=Us.dot(yh);if(x>=0&&v<=x)return t.copy(r);const _=v*h-u*x;if(_<=0&&h>=0&&x<=0)return c=h/(h-x),t.copy(n).addScaledVector(Us,c);const y=d*x-v*p;if(y<=0&&p-d>=0&&v-x>=0)return hm.subVectors(r,i),c=(p-d)/(p-d+(v-x)),t.copy(i).addScaledVector(hm,c);const S=1/(y+_+m);return a=_*S,c=m*S,t.copy(n).addScaledVector(Os,a).addScaledVector(Us,c)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}let K_=0;class on extends Ji{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:K_++}),this.uuid=Fn(),this.name="",this.type="Material",this.blending=es,this.side=as,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=Uf,this.blendDst=Bf,this.blendEquation=Yr,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=Ic,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=L0,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Pc,this.stencilZFail=Pc,this.stencilZPass=Pc,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const n=e[t];if(n===void 0){console.warn("THREE.Material: '"+t+"' parameter is undefined.");continue}const i=this[t];if(i===void 0){console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.");continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==es&&(n.blending=this.blending),this.side!==as&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.colorWrite=this.colorWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(n.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=this.flatShading),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),JSON.stringify(this.userData)!=="{}"&&(n.userData=this.userData);function i(r){const a=[];for(const c in r){const u=r[c];delete u.metadata,a.push(u)}return a}if(t){const r=i(e.textures),a=i(e.images);r.length>0&&(n.textures=r),a.length>0&&(n.images=a)}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const i=t.length;n=new Array(i);for(let r=0;r!==i;++r)n[r]=t[r].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}}class Tr extends on{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Le(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=va,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const qt=new I,Hl=new fe;class Et{constructor(e,t,n){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n===!0,this.usage=oa,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[e+i]=t.array[n+i];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)Hl.fromBufferAttribute(this,t),Hl.applyMatrix3(e),this.setXY(t,Hl.x,Hl.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)qt.fromBufferAttribute(this,t),qt.applyMatrix3(e),this.setXYZ(t,qt.x,qt.y,qt.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)qt.fromBufferAttribute(this,t),qt.applyMatrix4(e),this.setXYZ(t,qt.x,qt.y,qt.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)qt.fromBufferAttribute(this,t),qt.applyNormalMatrix(e),this.setXYZ(t,qt.x,qt.y,qt.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)qt.fromBufferAttribute(this,t),qt.transformDirection(e),this.setXYZ(t,qt.x,qt.y,qt.z);return this}set(e,t=0){return this.array.set(e,t),this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=Wi(t,this.array)),t}setX(e,t){return this.normalized&&(t=Tt(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=Wi(t,this.array)),t}setY(e,t){return this.normalized&&(t=Tt(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=Wi(t,this.array)),t}setZ(e,t){return this.normalized&&(t=Tt(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=Wi(t,this.array)),t}setW(e,t){return this.normalized&&(t=Tt(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=Tt(t,this.array),n=Tt(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,i){return e*=this.itemSize,this.normalized&&(t=Tt(t,this.array),n=Tt(n,this.array),i=Tt(i,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this}setXYZW(e,t,n,i,r){return e*=this.itemSize,this.normalized&&(t=Tt(t,this.array),n=Tt(n,this.array),i=Tt(i,this.array),r=Tt(r,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=r,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==oa&&(e.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(e.updateRange=this.updateRange),e}copyColorsArray(){console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.")}copyVector2sArray(){console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.")}copyVector3sArray(){console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.")}copyVector4sArray(){console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.")}}class $_ extends Et{constructor(e,t,n){super(new Int8Array(e),t,n)}}class ey extends Et{constructor(e,t,n){super(new Uint8Array(e),t,n)}}class ty extends Et{constructor(e,t,n){super(new Uint8ClampedArray(e),t,n)}}class ny extends Et{constructor(e,t,n){super(new Int16Array(e),t,n)}}class qf extends Et{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class iy extends Et{constructor(e,t,n){super(new Int32Array(e),t,n)}}class Yf extends Et{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class ry extends Et{constructor(e,t,n){super(new Uint16Array(e),t,n),this.isFloat16BufferAttribute=!0}}class De extends Et{constructor(e,t,n){super(new Float32Array(e),t,n)}}class sy extends Et{constructor(e,t,n){super(new Float64Array(e),t,n)}}let oy=0;const Qn=new et,Mh=new _t,Bs=new I,zn=new fs,Bo=new fs,tn=new I;class st extends Ji{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:oy++}),this.uuid=Fn(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(I0(e)?Yf:qf)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const r=new An().getNormalMatrix(e);n.applyNormalMatrix(r),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(e),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return Qn.makeRotationFromQuaternion(e),this.applyMatrix4(Qn),this}rotateX(e){return Qn.makeRotationX(e),this.applyMatrix4(Qn),this}rotateY(e){return Qn.makeRotationY(e),this.applyMatrix4(Qn),this}rotateZ(e){return Qn.makeRotationZ(e),this.applyMatrix4(Qn),this}translate(e,t,n){return Qn.makeTranslation(e,t,n),this.applyMatrix4(Qn),this}scale(e,t,n){return Qn.makeScale(e,t,n),this.applyMatrix4(Qn),this}lookAt(e){return Mh.lookAt(e),Mh.updateMatrix(),this.applyMatrix4(Mh.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Bs).negate(),this.translate(Bs.x,Bs.y,Bs.z),this}setFromPoints(e){const t=[];for(let n=0,i=e.length;n<i;n++){const r=e[n];t.push(r.x,r.y,r.z||0)}return this.setAttribute("position",new De(t,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new fs);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new I(-1/0,-1/0,-1/0),new I(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,i=t.length;n<i;n++){const r=t[n];zn.setFromBufferAttribute(r),this.morphTargetsRelative?(tn.addVectors(this.boundingBox.min,zn.min),this.boundingBox.expandByPoint(tn),tn.addVectors(this.boundingBox.max,zn.max),this.boundingBox.expandByPoint(tn)):(this.boundingBox.expandByPoint(zn.min),this.boundingBox.expandByPoint(zn.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new ds);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new I,1/0);return}if(e){const n=this.boundingSphere.center;if(zn.setFromBufferAttribute(e),t)for(let r=0,a=t.length;r<a;r++){const c=t[r];Bo.setFromBufferAttribute(c),this.morphTargetsRelative?(tn.addVectors(zn.min,Bo.min),zn.expandByPoint(tn),tn.addVectors(zn.max,Bo.max),zn.expandByPoint(tn)):(zn.expandByPoint(Bo.min),zn.expandByPoint(Bo.max))}zn.getCenter(n);let i=0;for(let r=0,a=e.count;r<a;r++)tn.fromBufferAttribute(e,r),i=Math.max(i,n.distanceToSquared(tn));if(t)for(let r=0,a=t.length;r<a;r++){const c=t[r],u=this.morphTargetsRelative;for(let h=0,d=c.count;h<d;h++)tn.fromBufferAttribute(c,h),u&&(Bs.fromBufferAttribute(e,h),tn.add(Bs)),i=Math.max(i,n.distanceToSquared(tn))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.array,i=t.position.array,r=t.normal.array,a=t.uv.array,c=i.length/3;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new Et(new Float32Array(4*c),4));const u=this.getAttribute("tangent").array,h=[],d=[];for(let O=0;O<c;O++)h[O]=new I,d[O]=new I;const p=new I,m=new I,v=new I,x=new fe,_=new fe,y=new fe,S=new I,w=new I;function T(O,X,ae){p.fromArray(i,O*3),m.fromArray(i,X*3),v.fromArray(i,ae*3),x.fromArray(a,O*2),_.fromArray(a,X*2),y.fromArray(a,ae*2),m.sub(p),v.sub(p),_.sub(x),y.sub(x);const J=1/(_.x*y.y-y.x*_.y);!isFinite(J)||(S.copy(m).multiplyScalar(y.y).addScaledVector(v,-_.y).multiplyScalar(J),w.copy(v).multiplyScalar(_.x).addScaledVector(m,-y.x).multiplyScalar(J),h[O].add(S),h[X].add(S),h[ae].add(S),d[O].add(w),d[X].add(w),d[ae].add(w))}let E=this.groups;E.length===0&&(E=[{start:0,count:n.length}]);for(let O=0,X=E.length;O<X;++O){const ae=E[O],J=ae.start,H=ae.count;for(let K=J,ie=J+H;K<ie;K+=3)T(n[K+0],n[K+1],n[K+2])}const C=new I,P=new I,N=new I,A=new I;function L(O){N.fromArray(r,O*3),A.copy(N);const X=h[O];C.copy(X),C.sub(N.multiplyScalar(N.dot(X))).normalize(),P.crossVectors(A,X);const J=P.dot(d[O])<0?-1:1;u[O*4]=C.x,u[O*4+1]=C.y,u[O*4+2]=C.z,u[O*4+3]=J}for(let O=0,X=E.length;O<X;++O){const ae=E[O],J=ae.start,H=ae.count;for(let K=J,ie=J+H;K<ie;K+=3)L(n[K+0]),L(n[K+1]),L(n[K+2])}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new Et(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let m=0,v=n.count;m<v;m++)n.setXYZ(m,0,0,0);const i=new I,r=new I,a=new I,c=new I,u=new I,h=new I,d=new I,p=new I;if(e)for(let m=0,v=e.count;m<v;m+=3){const x=e.getX(m+0),_=e.getX(m+1),y=e.getX(m+2);i.fromBufferAttribute(t,x),r.fromBufferAttribute(t,_),a.fromBufferAttribute(t,y),d.subVectors(a,r),p.subVectors(i,r),d.cross(p),c.fromBufferAttribute(n,x),u.fromBufferAttribute(n,_),h.fromBufferAttribute(n,y),c.add(d),u.add(d),h.add(d),n.setXYZ(x,c.x,c.y,c.z),n.setXYZ(_,u.x,u.y,u.z),n.setXYZ(y,h.x,h.y,h.z)}else for(let m=0,v=t.count;m<v;m+=3)i.fromBufferAttribute(t,m+0),r.fromBufferAttribute(t,m+1),a.fromBufferAttribute(t,m+2),d.subVectors(a,r),p.subVectors(i,r),d.cross(p),n.setXYZ(m+0,d.x,d.y,d.z),n.setXYZ(m+1,d.x,d.y,d.z),n.setXYZ(m+2,d.x,d.y,d.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(){return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead."),this}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)tn.fromBufferAttribute(e,t),tn.normalize(),e.setXYZ(t,tn.x,tn.y,tn.z)}toNonIndexed(){function e(c,u){const h=c.array,d=c.itemSize,p=c.normalized,m=new h.constructor(u.length*d);let v=0,x=0;for(let _=0,y=u.length;_<y;_++){c.isInterleavedBufferAttribute?v=u[_]*c.data.stride+c.offset:v=u[_]*d;for(let S=0;S<d;S++)m[x++]=h[v++]}return new Et(m,d,p)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new st,n=this.index.array,i=this.attributes;for(const c in i){const u=i[c],h=e(u,n);t.setAttribute(c,h)}const r=this.morphAttributes;for(const c in r){const u=[],h=r[c];for(let d=0,p=h.length;d<p;d++){const m=h[d],v=e(m,n);u.push(v)}t.morphAttributes[c]=u}t.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let c=0,u=a.length;c<u;c++){const h=a[c];t.addGroup(h.start,h.count,h.materialIndex)}return t}toJSON(){const e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const u=this.parameters;for(const h in u)u[h]!==void 0&&(e[h]=u[h]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const u in n){const h=n[u];e.data.attributes[u]=h.toJSON(e.data)}const i={};let r=!1;for(const u in this.morphAttributes){const h=this.morphAttributes[u],d=[];for(let p=0,m=h.length;p<m;p++){const v=h[p];d.push(v.toJSON(e.data))}d.length>0&&(i[u]=d,r=!0)}r&&(e.data.morphAttributes=i,e.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(e.data.groups=JSON.parse(JSON.stringify(a)));const c=this.boundingSphere;return c!==null&&(e.data.boundingSphere={center:c.center.toArray(),radius:c.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone(t));const i=e.attributes;for(const h in i){const d=i[h];this.setAttribute(h,d.clone(t))}const r=e.morphAttributes;for(const h in r){const d=[],p=r[h];for(let m=0,v=p.length;m<v;m++)d.push(p[m].clone(t));this.morphAttributes[h]=d}this.morphTargetsRelative=e.morphTargetsRelative;const a=e.groups;for(let h=0,d=a.length;h<d;h++){const p=a[h];this.addGroup(p.start,p.count,p.materialIndex)}const c=e.boundingBox;c!==null&&(this.boundingBox=c.clone());const u=e.boundingSphere;return u!==null&&(this.boundingSphere=u.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,e.parameters!==void 0&&(this.parameters=Object.assign({},e.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}const fm=new et,ks=new _a,Sh=new ds,hr=new I,fr=new I,dr=new I,wh=new I,bh=new I,Th=new I,Wl=new I,Xl=new I,ql=new I,Yl=new fe,Zl=new fe,Jl=new fe,Eh=new I,jl=new I;class sn extends _t{constructor(e=new st,t=new Tr){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,a=i.length;r<a;r++){const c=i[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[c]=r}}}}raycast(e,t){const n=this.geometry,i=this.material,r=this.matrixWorld;if(i===void 0||(n.boundingSphere===null&&n.computeBoundingSphere(),Sh.copy(n.boundingSphere),Sh.applyMatrix4(r),e.ray.intersectsSphere(Sh)===!1)||(fm.copy(r).invert(),ks.copy(e.ray).applyMatrix4(fm),n.boundingBox!==null&&ks.intersectsBox(n.boundingBox)===!1))return;let a;const c=n.index,u=n.attributes.position,h=n.morphAttributes.position,d=n.morphTargetsRelative,p=n.attributes.uv,m=n.attributes.uv2,v=n.groups,x=n.drawRange;if(c!==null)if(Array.isArray(i))for(let _=0,y=v.length;_<y;_++){const S=v[_],w=i[S.materialIndex],T=Math.max(S.start,x.start),E=Math.min(c.count,Math.min(S.start+S.count,x.start+x.count));for(let C=T,P=E;C<P;C+=3){const N=c.getX(C),A=c.getX(C+1),L=c.getX(C+2);a=Ql(this,w,e,ks,u,h,d,p,m,N,A,L),a&&(a.faceIndex=Math.floor(C/3),a.face.materialIndex=S.materialIndex,t.push(a))}}else{const _=Math.max(0,x.start),y=Math.min(c.count,x.start+x.count);for(let S=_,w=y;S<w;S+=3){const T=c.getX(S),E=c.getX(S+1),C=c.getX(S+2);a=Ql(this,i,e,ks,u,h,d,p,m,T,E,C),a&&(a.faceIndex=Math.floor(S/3),t.push(a))}}else if(u!==void 0)if(Array.isArray(i))for(let _=0,y=v.length;_<y;_++){const S=v[_],w=i[S.materialIndex],T=Math.max(S.start,x.start),E=Math.min(u.count,Math.min(S.start+S.count,x.start+x.count));for(let C=T,P=E;C<P;C+=3){const N=C,A=C+1,L=C+2;a=Ql(this,w,e,ks,u,h,d,p,m,N,A,L),a&&(a.faceIndex=Math.floor(C/3),a.face.materialIndex=S.materialIndex,t.push(a))}}else{const _=Math.max(0,x.start),y=Math.min(u.count,x.start+x.count);for(let S=_,w=y;S<w;S+=3){const T=S,E=S+1,C=S+2;a=Ql(this,i,e,ks,u,h,d,p,m,T,E,C),a&&(a.faceIndex=Math.floor(S/3),t.push(a))}}}}function ay(l,e,t,n,i,r,a,c){let u;if(e.side===Nn?u=n.intersectTriangle(a,r,i,!0,c):u=n.intersectTriangle(i,r,a,e.side!==Gi,c),u===null)return null;jl.copy(c),jl.applyMatrix4(l.matrixWorld);const h=t.ray.origin.distanceTo(jl);return h<t.near||h>t.far?null:{distance:h,point:jl.clone(),object:l}}function Ql(l,e,t,n,i,r,a,c,u,h,d,p){hr.fromBufferAttribute(i,h),fr.fromBufferAttribute(i,d),dr.fromBufferAttribute(i,p);const m=l.morphTargetInfluences;if(r&&m){Wl.set(0,0,0),Xl.set(0,0,0),ql.set(0,0,0);for(let x=0,_=r.length;x<_;x++){const y=m[x],S=r[x];y!==0&&(wh.fromBufferAttribute(S,h),bh.fromBufferAttribute(S,d),Th.fromBufferAttribute(S,p),a?(Wl.addScaledVector(wh,y),Xl.addScaledVector(bh,y),ql.addScaledVector(Th,y)):(Wl.addScaledVector(wh.sub(hr),y),Xl.addScaledVector(bh.sub(fr),y),ql.addScaledVector(Th.sub(dr),y)))}hr.add(Wl),fr.add(Xl),dr.add(ql)}l.isSkinnedMesh&&(l.boneTransform(h,hr),l.boneTransform(d,fr),l.boneTransform(p,dr));const v=ay(l,e,t,n,hr,fr,dr,Eh);if(v){c&&(Yl.fromBufferAttribute(c,h),Zl.fromBufferAttribute(c,d),Jl.fromBufferAttribute(c,p),v.uv=ei.getUV(Eh,hr,fr,dr,Yl,Zl,Jl,new fe)),u&&(Yl.fromBufferAttribute(u,h),Zl.fromBufferAttribute(u,d),Jl.fromBufferAttribute(u,p),v.uv2=ei.getUV(Eh,hr,fr,dr,Yl,Zl,Jl,new fe));const x={a:h,b:d,c:p,normal:new I,materialIndex:0};ei.getNormal(hr,fr,dr,x.normal),v.face=x}return v}class Er extends st{constructor(e=1,t=1,n=1,i=1,r=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:r,depthSegments:a};const c=this;i=Math.floor(i),r=Math.floor(r),a=Math.floor(a);const u=[],h=[],d=[],p=[];let m=0,v=0;x("z","y","x",-1,-1,n,t,e,a,r,0),x("z","y","x",1,-1,n,t,-e,a,r,1),x("x","z","y",1,1,e,n,t,i,a,2),x("x","z","y",1,-1,e,n,-t,i,a,3),x("x","y","z",1,-1,e,t,n,i,r,4),x("x","y","z",-1,-1,e,t,-n,i,r,5),this.setIndex(u),this.setAttribute("position",new De(h,3)),this.setAttribute("normal",new De(d,3)),this.setAttribute("uv",new De(p,2));function x(_,y,S,w,T,E,C,P,N,A,L){const O=E/N,X=C/A,ae=E/2,J=C/2,H=P/2,K=N+1,ie=A+1;let he=0,k=0;const U=new I;for(let B=0;B<ie;B++){const le=B*X-J;for(let ne=0;ne<K;ne++){const de=ne*O-ae;U[_]=de*w,U[y]=le*T,U[S]=H,h.push(U.x,U.y,U.z),U[_]=0,U[y]=0,U[S]=P>0?1:-1,d.push(U.x,U.y,U.z),p.push(ne/N),p.push(1-B/A),he+=1}}for(let B=0;B<A;B++)for(let le=0;le<N;le++){const ne=m+le+K*B,de=m+le+K*(B+1),we=m+(le+1)+K*(B+1),Be=m+(le+1)+K*B;u.push(ne,de,Be),u.push(de,we,Be),k+=6}c.addGroup(v,k,L),v+=k,m+=he}}static fromJSON(e){return new Er(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function so(l){const e={};for(const t in l){e[t]={};for(const n in l[t]){const i=l[t][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?e[t][n]=i.clone():Array.isArray(i)?e[t][n]=i.slice():e[t][n]=i}}return e}function fn(l){const e={};for(let t=0;t<l.length;t++){const n=so(l[t]);for(const i in n)e[i]=n[i]}return e}function ly(l){const e=[];for(let t=0;t<l.length;t++)e.push(l[t].clone());return e}const z0={clone:so,merge:fn};var cy=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,uy=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class bi extends on{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=cy,this.fragmentShader=uy,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=so(e.uniforms),this.uniformsGroups=ly(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const i in this.uniforms){const a=this.uniforms[i].value;a&&a.isTexture?t.uniforms[i]={type:"t",value:a.toJSON(e).uuid}:a&&a.isColor?t.uniforms[i]={type:"c",value:a.getHex()}:a&&a.isVector2?t.uniforms[i]={type:"v2",value:a.toArray()}:a&&a.isVector3?t.uniforms[i]={type:"v3",value:a.toArray()}:a&&a.isVector4?t.uniforms[i]={type:"v4",value:a.toArray()}:a&&a.isMatrix3?t.uniforms[i]={type:"m3",value:a.toArray()}:a&&a.isMatrix4?t.uniforms[i]={type:"m4",value:a.toArray()}:t.uniforms[i]={value:a}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}class ya extends _t{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new et,this.projectionMatrix=new et,this.projectionMatrixInverse=new et}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}class nn extends ya{constructor(e=50,t=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=aa*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(is*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return aa*2*Math.atan(Math.tan(is*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,t,n,i,r,a){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(is*.5*this.fov)/this.zoom,n=2*t,i=this.aspect*n,r=-.5*i;const a=this.view;if(this.view!==null&&this.view.enabled){const u=a.fullWidth,h=a.fullHeight;r+=a.offsetX*i/u,t-=a.offsetY*n/h,i*=a.width/u,n*=a.height/h}const c=this.filmOffset;c!==0&&(r+=e*c/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,t,t-n,e,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const Vs=90,Gs=1;class N0 extends _t{constructor(e,t,n){super(),this.type="CubeCamera",this.renderTarget=n;const i=new nn(Vs,Gs,e,t);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new I(1,0,0)),this.add(i);const r=new nn(Vs,Gs,e,t);r.layers=this.layers,r.up.set(0,-1,0),r.lookAt(new I(-1,0,0)),this.add(r);const a=new nn(Vs,Gs,e,t);a.layers=this.layers,a.up.set(0,0,1),a.lookAt(new I(0,1,0)),this.add(a);const c=new nn(Vs,Gs,e,t);c.layers=this.layers,c.up.set(0,0,-1),c.lookAt(new I(0,-1,0)),this.add(c);const u=new nn(Vs,Gs,e,t);u.layers=this.layers,u.up.set(0,-1,0),u.lookAt(new I(0,0,1)),this.add(u);const h=new nn(Vs,Gs,e,t);h.layers=this.layers,h.up.set(0,-1,0),h.lookAt(new I(0,0,-1)),this.add(h)}update(e,t){this.parent===null&&this.updateMatrixWorld();const n=this.renderTarget,[i,r,a,c,u,h]=this.children,d=e.getRenderTarget(),p=e.toneMapping,m=e.xr.enabled;e.toneMapping=hi,e.xr.enabled=!1;const v=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0),e.render(t,i),e.setRenderTarget(n,1),e.render(t,r),e.setRenderTarget(n,2),e.render(t,a),e.setRenderTarget(n,3),e.render(t,c),e.setRenderTarget(n,4),e.render(t,u),n.texture.generateMipmaps=v,e.setRenderTarget(n,5),e.render(t,h),e.setRenderTarget(d),e.toneMapping=p,e.xr.enabled=m,n.texture.needsPMREMUpdate=!0}}class Ma extends Zt{constructor(e,t,n,i,r,a,c,u,h,d){e=e!==void 0?e:[],t=t!==void 0?t:_r,super(e,t,n,i,r,a,c,u,h,d),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class F0 extends ni{constructor(e,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},i=[n,n,n,n,n,n];this.texture=new Ma(i,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:Vt}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.encoding=t.encoding,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new Er(5,5,5),r=new bi({name:"CubemapFromEquirect",uniforms:so(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:Nn,blending:Xi});r.uniforms.tEquirect.value=t;const a=new sn(i,r),c=t.minFilter;return t.minFilter===hs&&(t.minFilter=Vt),new N0(1,10,this).update(e,a),t.minFilter=c,a.geometry.dispose(),a.material.dispose(),this}clear(e,t,n,i){const r=e.getRenderTarget();for(let a=0;a<6;a++)e.setRenderTarget(this,a),e.clear(t,n,i);e.setRenderTarget(r)}}const Ah=new I,hy=new I,fy=new An;class mr{constructor(e=new I(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const i=Ah.subVectors(n,t).cross(hy.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)}intersectLine(e,t){const n=e.delta(Ah),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const r=-(e.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:t.copy(n).multiplyScalar(r).add(e.start)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||fy.getNormalMatrix(e),i=this.coplanarPoint(Ah).applyMatrix4(e),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const Hs=new ds,Kl=new I;class Wc{constructor(e=new mr,t=new mr,n=new mr,i=new mr,r=new mr,a=new mr){this.planes=[e,t,n,i,r,a]}set(e,t,n,i,r,a){const c=this.planes;return c[0].copy(e),c[1].copy(t),c[2].copy(n),c[3].copy(i),c[4].copy(r),c[5].copy(a),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e){const t=this.planes,n=e.elements,i=n[0],r=n[1],a=n[2],c=n[3],u=n[4],h=n[5],d=n[6],p=n[7],m=n[8],v=n[9],x=n[10],_=n[11],y=n[12],S=n[13],w=n[14],T=n[15];return t[0].setComponents(c-i,p-u,_-m,T-y).normalize(),t[1].setComponents(c+i,p+u,_+m,T+y).normalize(),t[2].setComponents(c+r,p+h,_+v,T+S).normalize(),t[3].setComponents(c-r,p-h,_-v,T-S).normalize(),t[4].setComponents(c-a,p-d,_-x,T-w).normalize(),t[5].setComponents(c+a,p+d,_+x,T+w).normalize(),this}intersectsObject(e){const t=e.geometry;return t.boundingSphere===null&&t.computeBoundingSphere(),Hs.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere(Hs)}intersectsSprite(e){return Hs.center.set(0,0,0),Hs.radius=.7071067811865476,Hs.applyMatrix4(e.matrixWorld),this.intersectsSphere(Hs)}intersectsSphere(e){const t=this.planes,n=e.center,i=-e.radius;for(let r=0;r<6;r++)if(t[r].distanceToPoint(n)<i)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const i=t[n];if(Kl.x=i.normal.x>0?e.max.x:e.min.x,Kl.y=i.normal.y>0?e.max.y:e.min.y,Kl.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint(Kl)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function O0(){let l=null,e=!1,t=null,n=null;function i(r,a){t(r,a),n=l.requestAnimationFrame(i)}return{start:function(){e!==!0&&t!==null&&(n=l.requestAnimationFrame(i),e=!0)},stop:function(){l.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(r){t=r},setContext:function(r){l=r}}}function dy(l,e){const t=e.isWebGL2,n=new WeakMap;function i(h,d){const p=h.array,m=h.usage,v=l.createBuffer();l.bindBuffer(d,v),l.bufferData(d,p,m),h.onUploadCallback();let x;if(p instanceof Float32Array)x=5126;else if(p instanceof Uint16Array)if(h.isFloat16BufferAttribute)if(t)x=5131;else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else x=5123;else if(p instanceof Int16Array)x=5122;else if(p instanceof Uint32Array)x=5125;else if(p instanceof Int32Array)x=5124;else if(p instanceof Int8Array)x=5120;else if(p instanceof Uint8Array)x=5121;else if(p instanceof Uint8ClampedArray)x=5121;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+p);return{buffer:v,type:x,bytesPerElement:p.BYTES_PER_ELEMENT,version:h.version}}function r(h,d,p){const m=d.array,v=d.updateRange;l.bindBuffer(p,h),v.count===-1?l.bufferSubData(p,0,m):(t?l.bufferSubData(p,v.offset*m.BYTES_PER_ELEMENT,m,v.offset,v.count):l.bufferSubData(p,v.offset*m.BYTES_PER_ELEMENT,m.subarray(v.offset,v.offset+v.count)),v.count=-1)}function a(h){return h.isInterleavedBufferAttribute&&(h=h.data),n.get(h)}function c(h){h.isInterleavedBufferAttribute&&(h=h.data);const d=n.get(h);d&&(l.deleteBuffer(d.buffer),n.delete(h))}function u(h,d){if(h.isGLBufferAttribute){const m=n.get(h);(!m||m.version<h.version)&&n.set(h,{buffer:h.buffer,type:h.type,bytesPerElement:h.elementSize,version:h.version});return}h.isInterleavedBufferAttribute&&(h=h.data);const p=n.get(h);p===void 0?n.set(h,i(h,d)):p.version<h.version&&(r(p.buffer,h,d),p.version=h.version)}return{get:a,remove:c,update:u}}class uo extends st{constructor(e=1,t=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};const r=e/2,a=t/2,c=Math.floor(n),u=Math.floor(i),h=c+1,d=u+1,p=e/c,m=t/u,v=[],x=[],_=[],y=[];for(let S=0;S<d;S++){const w=S*m-a;for(let T=0;T<h;T++){const E=T*p-r;x.push(E,-w,0),_.push(0,0,1),y.push(T/c),y.push(1-S/u)}}for(let S=0;S<u;S++)for(let w=0;w<c;w++){const T=w+h*S,E=w+h*(S+1),C=w+1+h*(S+1),P=w+1+h*S;v.push(T,E,P),v.push(E,C,P)}this.setIndex(v),this.setAttribute("position",new De(x,3)),this.setAttribute("normal",new De(_,3)),this.setAttribute("uv",new De(y,2))}static fromJSON(e){return new uo(e.width,e.height,e.widthSegments,e.heightSegments)}}var py=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`,my=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,gy=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,vy=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,xy=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,_y=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,yy="vec3 transformed = vec3( position );",My=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,Sy=`vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
#ifdef USE_IRIDESCENCE
	vec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif`,wy=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			 return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float R21 = R12;
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,by=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = dFdx( surf_pos.xyz );
		vec3 vSigmaY = dFdy( surf_pos.xyz );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,Ty=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,Ey=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,Ay=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,Cy=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,Py=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,Ly=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,Ry=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,Iy=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,Dy=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`,zy=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,Ny=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,Fy=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,Oy=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`,Uy=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,By=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,ky="gl_FragColor = linearToOutputTexel( gl_FragColor );",Vy=`vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,Gy=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,Hy=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,Wy=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,Xy=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,qy=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,Yy=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,Zy=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,Jy=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,jy=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,Qy=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,Ky=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vUv2 );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,$y=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,e1=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,t1=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert
#define Material_LightProbeLOD( material )	(0)`,n1=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( PHYSICALLY_CORRECT_LIGHTS )
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#else
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,i1=`#if defined( USE_ENVMAP )
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`,r1=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,s1=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
#define Material_LightProbeLOD( material )	(0)`,o1=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,a1=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
#define Material_LightProbeLOD( material )	(0)`,l1=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULARINTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;
		#endif
		#ifdef USE_SPECULARCOLORMAP
			specularColorFactor *= texture2D( specularColorMap, vUv ).rgb;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEENCOLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEENROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;
	#endif
#endif`,c1=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	#ifdef USE_IRIDESCENCE
		reflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );
	#else
		reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
	#endif
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,u1=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometry.viewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,h1=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,f1=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,d1=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,p1=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,m1=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,g1=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,v1=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,x1=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,_1=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,y1=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,M1=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`,S1=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,w1=`#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,b1=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,T1=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,E1=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,A1=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );
	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * faceDirection;
			bitangent = bitangent * faceDirection;
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`,C1=`#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,P1=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,L1=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,R1=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,I1=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );
	}
#endif`,D1=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,z1=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
	#endif
#endif`,N1=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`,F1=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,O1=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,U1=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`,B1=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,k1=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,V1=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,G1=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,H1=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`,W1=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,X1=`#if NUM_SPOT_LIGHT_COORDS > 0
  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
  uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );
		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
		bool frustumTest = all( frustumTestVec );
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,q1=`#if NUM_SPOT_LIGHT_COORDS > 0
  uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,Y1=`#if defined( USE_SHADOWMAP ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_COORDS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`,Z1=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,J1=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,j1=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	uniform int boneTextureSize;
	mat4 getBoneMatrix( const in float i ) {
		float j = i * 4.0;
		float x = mod( j, float( boneTextureSize ) );
		float y = floor( j / float( boneTextureSize ) );
		float dx = 1.0 / float( boneTextureSize );
		float dy = 1.0 / float( boneTextureSize );
		y = dy * ( y + 0.5 );
		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
		mat4 bone = mat4( v1, v2, v3, v4 );
		return bone;
	}
#endif`,Q1=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,K1=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,$1=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,eM=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,tM=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,nM=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,iM=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );
#endif`,rM=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		#ifdef texture2DLodEXT
			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#else
			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#endif
	}
	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( attenuationDistance == 0.0 ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`,sM=`#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`,oM=`#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`,aM=`#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`,lM=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`,cM=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`,uM=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`,hM=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const fM=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,dM=`uniform sampler2D t2D;
varying vec2 vUv;
void main() {
	gl_FragColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		gl_FragColor = vec4( mix( pow( gl_FragColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), gl_FragColor.rgb * 0.0773993808, vec3( lessThanEqual( gl_FragColor.rgb, vec3( 0.04045 ) ) ) ), gl_FragColor.w );
	#endif
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,pM=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,mM=`#include <envmap_common_pars_fragment>
uniform float opacity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	vec3 vReflect = vWorldDirection;
	#include <envmap_fragment>
	gl_FragColor = envColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,gM=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,vM=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,xM=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,_M=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,yM=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,MM=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,SM=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,wM=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,bM=`#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,TM=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,EM=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,AM=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,CM=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,PM=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,LM=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`,RM=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,IM=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,DM=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,zM=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,NM=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULARINTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
	#ifdef USE_SPECULARCOLORMAP
		uniform sampler2D specularColorMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEENCOLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEENROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <bsdfs>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,FM=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,OM=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,UM=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,BM=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,kM=`#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,VM=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,GM=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,HM=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,at={alphamap_fragment:py,alphamap_pars_fragment:my,alphatest_fragment:gy,alphatest_pars_fragment:vy,aomap_fragment:xy,aomap_pars_fragment:_y,begin_vertex:yy,beginnormal_vertex:My,bsdfs:Sy,iridescence_fragment:wy,bumpmap_pars_fragment:by,clipping_planes_fragment:Ty,clipping_planes_pars_fragment:Ey,clipping_planes_pars_vertex:Ay,clipping_planes_vertex:Cy,color_fragment:Py,color_pars_fragment:Ly,color_pars_vertex:Ry,color_vertex:Iy,common:Dy,cube_uv_reflection_fragment:zy,defaultnormal_vertex:Ny,displacementmap_pars_vertex:Fy,displacementmap_vertex:Oy,emissivemap_fragment:Uy,emissivemap_pars_fragment:By,encodings_fragment:ky,encodings_pars_fragment:Vy,envmap_fragment:Gy,envmap_common_pars_fragment:Hy,envmap_pars_fragment:Wy,envmap_pars_vertex:Xy,envmap_physical_pars_fragment:i1,envmap_vertex:qy,fog_vertex:Yy,fog_pars_vertex:Zy,fog_fragment:Jy,fog_pars_fragment:jy,gradientmap_pars_fragment:Qy,lightmap_fragment:Ky,lightmap_pars_fragment:$y,lights_lambert_fragment:e1,lights_lambert_pars_fragment:t1,lights_pars_begin:n1,lights_toon_fragment:r1,lights_toon_pars_fragment:s1,lights_phong_fragment:o1,lights_phong_pars_fragment:a1,lights_physical_fragment:l1,lights_physical_pars_fragment:c1,lights_fragment_begin:u1,lights_fragment_maps:h1,lights_fragment_end:f1,logdepthbuf_fragment:d1,logdepthbuf_pars_fragment:p1,logdepthbuf_pars_vertex:m1,logdepthbuf_vertex:g1,map_fragment:v1,map_pars_fragment:x1,map_particle_fragment:_1,map_particle_pars_fragment:y1,metalnessmap_fragment:M1,metalnessmap_pars_fragment:S1,morphcolor_vertex:w1,morphnormal_vertex:b1,morphtarget_pars_vertex:T1,morphtarget_vertex:E1,normal_fragment_begin:A1,normal_fragment_maps:C1,normal_pars_fragment:P1,normal_pars_vertex:L1,normal_vertex:R1,normalmap_pars_fragment:I1,clearcoat_normal_fragment_begin:D1,clearcoat_normal_fragment_maps:z1,clearcoat_pars_fragment:N1,iridescence_pars_fragment:F1,output_fragment:O1,packing:U1,premultiplied_alpha_fragment:B1,project_vertex:k1,dithering_fragment:V1,dithering_pars_fragment:G1,roughnessmap_fragment:H1,roughnessmap_pars_fragment:W1,shadowmap_pars_fragment:X1,shadowmap_pars_vertex:q1,shadowmap_vertex:Y1,shadowmask_pars_fragment:Z1,skinbase_vertex:J1,skinning_pars_vertex:j1,skinning_vertex:Q1,skinnormal_vertex:K1,specularmap_fragment:$1,specularmap_pars_fragment:eM,tonemapping_fragment:tM,tonemapping_pars_fragment:nM,transmission_fragment:iM,transmission_pars_fragment:rM,uv_pars_fragment:sM,uv_pars_vertex:oM,uv_vertex:aM,uv2_pars_fragment:lM,uv2_pars_vertex:cM,uv2_vertex:uM,worldpos_vertex:hM,background_vert:fM,background_frag:dM,cube_vert:pM,cube_frag:mM,depth_vert:gM,depth_frag:vM,distanceRGBA_vert:xM,distanceRGBA_frag:_M,equirect_vert:yM,equirect_frag:MM,linedashed_vert:SM,linedashed_frag:wM,meshbasic_vert:bM,meshbasic_frag:TM,meshlambert_vert:EM,meshlambert_frag:AM,meshmatcap_vert:CM,meshmatcap_frag:PM,meshnormal_vert:LM,meshnormal_frag:RM,meshphong_vert:IM,meshphong_frag:DM,meshphysical_vert:zM,meshphysical_frag:NM,meshtoon_vert:FM,meshtoon_frag:OM,points_vert:UM,points_frag:BM,shadow_vert:kM,shadow_frag:VM,sprite_vert:GM,sprite_frag:HM},_e={common:{diffuse:{value:new Le(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new An},uv2Transform:{value:new An},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new fe(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Le(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Le(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new An}},sprite:{diffuse:{value:new Le(16777215)},opacity:{value:1},center:{value:new fe(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new An}}},ui={basic:{uniforms:fn([_e.common,_e.specularmap,_e.envmap,_e.aomap,_e.lightmap,_e.fog]),vertexShader:at.meshbasic_vert,fragmentShader:at.meshbasic_frag},lambert:{uniforms:fn([_e.common,_e.specularmap,_e.envmap,_e.aomap,_e.lightmap,_e.emissivemap,_e.bumpmap,_e.normalmap,_e.displacementmap,_e.fog,_e.lights,{emissive:{value:new Le(0)}}]),vertexShader:at.meshlambert_vert,fragmentShader:at.meshlambert_frag},phong:{uniforms:fn([_e.common,_e.specularmap,_e.envmap,_e.aomap,_e.lightmap,_e.emissivemap,_e.bumpmap,_e.normalmap,_e.displacementmap,_e.fog,_e.lights,{emissive:{value:new Le(0)},specular:{value:new Le(1118481)},shininess:{value:30}}]),vertexShader:at.meshphong_vert,fragmentShader:at.meshphong_frag},standard:{uniforms:fn([_e.common,_e.envmap,_e.aomap,_e.lightmap,_e.emissivemap,_e.bumpmap,_e.normalmap,_e.displacementmap,_e.roughnessmap,_e.metalnessmap,_e.fog,_e.lights,{emissive:{value:new Le(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:at.meshphysical_vert,fragmentShader:at.meshphysical_frag},toon:{uniforms:fn([_e.common,_e.aomap,_e.lightmap,_e.emissivemap,_e.bumpmap,_e.normalmap,_e.displacementmap,_e.gradientmap,_e.fog,_e.lights,{emissive:{value:new Le(0)}}]),vertexShader:at.meshtoon_vert,fragmentShader:at.meshtoon_frag},matcap:{uniforms:fn([_e.common,_e.bumpmap,_e.normalmap,_e.displacementmap,_e.fog,{matcap:{value:null}}]),vertexShader:at.meshmatcap_vert,fragmentShader:at.meshmatcap_frag},points:{uniforms:fn([_e.points,_e.fog]),vertexShader:at.points_vert,fragmentShader:at.points_frag},dashed:{uniforms:fn([_e.common,_e.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:at.linedashed_vert,fragmentShader:at.linedashed_frag},depth:{uniforms:fn([_e.common,_e.displacementmap]),vertexShader:at.depth_vert,fragmentShader:at.depth_frag},normal:{uniforms:fn([_e.common,_e.bumpmap,_e.normalmap,_e.displacementmap,{opacity:{value:1}}]),vertexShader:at.meshnormal_vert,fragmentShader:at.meshnormal_frag},sprite:{uniforms:fn([_e.sprite,_e.fog]),vertexShader:at.sprite_vert,fragmentShader:at.sprite_frag},background:{uniforms:{uvTransform:{value:new An},t2D:{value:null}},vertexShader:at.background_vert,fragmentShader:at.background_frag},cube:{uniforms:fn([_e.envmap,{opacity:{value:1}}]),vertexShader:at.cube_vert,fragmentShader:at.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:at.equirect_vert,fragmentShader:at.equirect_frag},distanceRGBA:{uniforms:fn([_e.common,_e.displacementmap,{referencePosition:{value:new I},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:at.distanceRGBA_vert,fragmentShader:at.distanceRGBA_frag},shadow:{uniforms:fn([_e.lights,_e.fog,{color:{value:new Le(0)},opacity:{value:1}}]),vertexShader:at.shadow_vert,fragmentShader:at.shadow_frag}};ui.physical={uniforms:fn([ui.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new fe(1,1)},clearcoatNormalMap:{value:null},iridescence:{value:0},iridescenceMap:{value:null},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},sheen:{value:0},sheenColor:{value:new Le(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new fe},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new Le(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new Le(1,1,1)},specularColorMap:{value:null}}]),vertexShader:at.meshphysical_vert,fragmentShader:at.meshphysical_frag};function WM(l,e,t,n,i,r){const a=new Le(0);let c=i===!0?0:1,u,h,d=null,p=0,m=null;function v(_,y){let S=!1,w=y.isScene===!0?y.background:null;w&&w.isTexture&&(w=e.get(w));const T=l.xr,E=T.getSession&&T.getSession();E&&E.environmentBlendMode==="additive"&&(w=null),w===null?x(a,c):w&&w.isColor&&(x(w,1),S=!0),(l.autoClear||S)&&l.clear(l.autoClearColor,l.autoClearDepth,l.autoClearStencil),w&&(w.isCubeTexture||w.mapping===lo)?(h===void 0&&(h=new sn(new Er(1,1,1),new bi({name:"BackgroundCubeMaterial",uniforms:so(ui.cube.uniforms),vertexShader:ui.cube.vertexShader,fragmentShader:ui.cube.fragmentShader,side:Nn,depthTest:!1,depthWrite:!1,fog:!1})),h.geometry.deleteAttribute("normal"),h.geometry.deleteAttribute("uv"),h.onBeforeRender=function(C,P,N){this.matrixWorld.copyPosition(N.matrixWorld)},Object.defineProperty(h.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),n.update(h)),h.material.uniforms.envMap.value=w,h.material.uniforms.flipEnvMap.value=w.isCubeTexture&&w.isRenderTargetTexture===!1?-1:1,(d!==w||p!==w.version||m!==l.toneMapping)&&(h.material.needsUpdate=!0,d=w,p=w.version,m=l.toneMapping),h.layers.enableAll(),_.unshift(h,h.geometry,h.material,0,0,null)):w&&w.isTexture&&(u===void 0&&(u=new sn(new uo(2,2),new bi({name:"BackgroundMaterial",uniforms:so(ui.background.uniforms),vertexShader:ui.background.vertexShader,fragmentShader:ui.background.fragmentShader,side:as,depthTest:!1,depthWrite:!1,fog:!1})),u.geometry.deleteAttribute("normal"),Object.defineProperty(u.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(u)),u.material.uniforms.t2D.value=w,w.matrixAutoUpdate===!0&&w.updateMatrix(),u.material.uniforms.uvTransform.value.copy(w.matrix),(d!==w||p!==w.version||m!==l.toneMapping)&&(u.material.needsUpdate=!0,d=w,p=w.version,m=l.toneMapping),u.layers.enableAll(),_.unshift(u,u.geometry,u.material,0,0,null))}function x(_,y){t.buffers.color.setClear(_.r,_.g,_.b,y,r)}return{getClearColor:function(){return a},setClearColor:function(_,y=1){a.set(_),c=y,x(a,c)},getClearAlpha:function(){return c},setClearAlpha:function(_){c=_,x(a,c)},render:v}}function XM(l,e,t,n){const i=l.getParameter(34921),r=n.isWebGL2?null:e.get("OES_vertex_array_object"),a=n.isWebGL2||r!==null,c={},u=y(null);let h=u,d=!1;function p(H,K,ie,he,k){let U=!1;if(a){const B=_(he,ie,K);h!==B&&(h=B,v(h.object)),U=S(H,he,ie,k),U&&w(H,he,ie,k)}else{const B=K.wireframe===!0;(h.geometry!==he.id||h.program!==ie.id||h.wireframe!==B)&&(h.geometry=he.id,h.program=ie.id,h.wireframe=B,U=!0)}k!==null&&t.update(k,34963),(U||d)&&(d=!1,A(H,K,ie,he),k!==null&&l.bindBuffer(34963,t.get(k).buffer))}function m(){return n.isWebGL2?l.createVertexArray():r.createVertexArrayOES()}function v(H){return n.isWebGL2?l.bindVertexArray(H):r.bindVertexArrayOES(H)}function x(H){return n.isWebGL2?l.deleteVertexArray(H):r.deleteVertexArrayOES(H)}function _(H,K,ie){const he=ie.wireframe===!0;let k=c[H.id];k===void 0&&(k={},c[H.id]=k);let U=k[K.id];U===void 0&&(U={},k[K.id]=U);let B=U[he];return B===void 0&&(B=y(m()),U[he]=B),B}function y(H){const K=[],ie=[],he=[];for(let k=0;k<i;k++)K[k]=0,ie[k]=0,he[k]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:K,enabledAttributes:ie,attributeDivisors:he,object:H,attributes:{},index:null}}function S(H,K,ie,he){const k=h.attributes,U=K.attributes;let B=0;const le=ie.getAttributes();for(const ne in le)if(le[ne].location>=0){const we=k[ne];let Be=U[ne];if(Be===void 0&&(ne==="instanceMatrix"&&H.instanceMatrix&&(Be=H.instanceMatrix),ne==="instanceColor"&&H.instanceColor&&(Be=H.instanceColor)),we===void 0||we.attribute!==Be||Be&&we.data!==Be.data)return!0;B++}return h.attributesNum!==B||h.index!==he}function w(H,K,ie,he){const k={},U=K.attributes;let B=0;const le=ie.getAttributes();for(const ne in le)if(le[ne].location>=0){let we=U[ne];we===void 0&&(ne==="instanceMatrix"&&H.instanceMatrix&&(we=H.instanceMatrix),ne==="instanceColor"&&H.instanceColor&&(we=H.instanceColor));const Be={};Be.attribute=we,we&&we.data&&(Be.data=we.data),k[ne]=Be,B++}h.attributes=k,h.attributesNum=B,h.index=he}function T(){const H=h.newAttributes;for(let K=0,ie=H.length;K<ie;K++)H[K]=0}function E(H){C(H,0)}function C(H,K){const ie=h.newAttributes,he=h.enabledAttributes,k=h.attributeDivisors;ie[H]=1,he[H]===0&&(l.enableVertexAttribArray(H),he[H]=1),k[H]!==K&&((n.isWebGL2?l:e.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](H,K),k[H]=K)}function P(){const H=h.newAttributes,K=h.enabledAttributes;for(let ie=0,he=K.length;ie<he;ie++)K[ie]!==H[ie]&&(l.disableVertexAttribArray(ie),K[ie]=0)}function N(H,K,ie,he,k,U){n.isWebGL2===!0&&(ie===5124||ie===5125)?l.vertexAttribIPointer(H,K,ie,k,U):l.vertexAttribPointer(H,K,ie,he,k,U)}function A(H,K,ie,he){if(n.isWebGL2===!1&&(H.isInstancedMesh||he.isInstancedBufferGeometry)&&e.get("ANGLE_instanced_arrays")===null)return;T();const k=he.attributes,U=ie.getAttributes(),B=K.defaultAttributeValues;for(const le in U){const ne=U[le];if(ne.location>=0){let de=k[le];if(de===void 0&&(le==="instanceMatrix"&&H.instanceMatrix&&(de=H.instanceMatrix),le==="instanceColor"&&H.instanceColor&&(de=H.instanceColor)),de!==void 0){const we=de.normalized,Be=de.itemSize,se=t.get(de);if(se===void 0)continue;const Ye=se.buffer,He=se.type,Xe=se.bytesPerElement;if(de.isInterleavedBufferAttribute){const ye=de.data,qe=ye.stride,ue=de.offset;if(ye.isInstancedInterleavedBuffer){for(let te=0;te<ne.locationSize;te++)C(ne.location+te,ye.meshPerAttribute);H.isInstancedMesh!==!0&&he._maxInstanceCount===void 0&&(he._maxInstanceCount=ye.meshPerAttribute*ye.count)}else for(let te=0;te<ne.locationSize;te++)E(ne.location+te);l.bindBuffer(34962,Ye);for(let te=0;te<ne.locationSize;te++)N(ne.location+te,Be/ne.locationSize,He,we,qe*Xe,(ue+Be/ne.locationSize*te)*Xe)}else{if(de.isInstancedBufferAttribute){for(let ye=0;ye<ne.locationSize;ye++)C(ne.location+ye,de.meshPerAttribute);H.isInstancedMesh!==!0&&he._maxInstanceCount===void 0&&(he._maxInstanceCount=de.meshPerAttribute*de.count)}else for(let ye=0;ye<ne.locationSize;ye++)E(ne.location+ye);l.bindBuffer(34962,Ye);for(let ye=0;ye<ne.locationSize;ye++)N(ne.location+ye,Be/ne.locationSize,He,we,Be*Xe,Be/ne.locationSize*ye*Xe)}}else if(B!==void 0){const we=B[le];if(we!==void 0)switch(we.length){case 2:l.vertexAttrib2fv(ne.location,we);break;case 3:l.vertexAttrib3fv(ne.location,we);break;case 4:l.vertexAttrib4fv(ne.location,we);break;default:l.vertexAttrib1fv(ne.location,we)}}}}P()}function L(){ae();for(const H in c){const K=c[H];for(const ie in K){const he=K[ie];for(const k in he)x(he[k].object),delete he[k];delete K[ie]}delete c[H]}}function O(H){if(c[H.id]===void 0)return;const K=c[H.id];for(const ie in K){const he=K[ie];for(const k in he)x(he[k].object),delete he[k];delete K[ie]}delete c[H.id]}function X(H){for(const K in c){const ie=c[K];if(ie[H.id]===void 0)continue;const he=ie[H.id];for(const k in he)x(he[k].object),delete he[k];delete ie[H.id]}}function ae(){J(),d=!0,h!==u&&(h=u,v(h.object))}function J(){u.geometry=null,u.program=null,u.wireframe=!1}return{setup:p,reset:ae,resetDefaultState:J,dispose:L,releaseStatesOfGeometry:O,releaseStatesOfProgram:X,initAttributes:T,enableAttribute:E,disableUnusedAttributes:P}}function qM(l,e,t,n){const i=n.isWebGL2;let r;function a(h){r=h}function c(h,d){l.drawArrays(r,h,d),t.update(d,r,1)}function u(h,d,p){if(p===0)return;let m,v;if(i)m=l,v="drawArraysInstanced";else if(m=e.get("ANGLE_instanced_arrays"),v="drawArraysInstancedANGLE",m===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}m[v](r,h,d,p),t.update(d,r,p)}this.setMode=a,this.render=c,this.renderInstances=u}function YM(l,e,t){let n;function i(){if(n!==void 0)return n;if(e.has("EXT_texture_filter_anisotropic")===!0){const N=e.get("EXT_texture_filter_anisotropic");n=l.getParameter(N.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n}function r(N){if(N==="highp"){if(l.getShaderPrecisionFormat(35633,36338).precision>0&&l.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";N="mediump"}return N==="mediump"&&l.getShaderPrecisionFormat(35633,36337).precision>0&&l.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const a=typeof WebGL2RenderingContext<"u"&&l instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext<"u"&&l instanceof WebGL2ComputeRenderingContext;let c=t.precision!==void 0?t.precision:"highp";const u=r(c);u!==c&&(console.warn("THREE.WebGLRenderer:",c,"not supported, using",u,"instead."),c=u);const h=a||e.has("WEBGL_draw_buffers"),d=t.logarithmicDepthBuffer===!0,p=l.getParameter(34930),m=l.getParameter(35660),v=l.getParameter(3379),x=l.getParameter(34076),_=l.getParameter(34921),y=l.getParameter(36347),S=l.getParameter(36348),w=l.getParameter(36349),T=m>0,E=a||e.has("OES_texture_float"),C=T&&E,P=a?l.getParameter(36183):0;return{isWebGL2:a,drawBuffers:h,getMaxAnisotropy:i,getMaxPrecision:r,precision:c,logarithmicDepthBuffer:d,maxTextures:p,maxVertexTextures:m,maxTextureSize:v,maxCubemapSize:x,maxAttributes:_,maxVertexUniforms:y,maxVaryings:S,maxFragmentUniforms:w,vertexTextures:T,floatFragmentTextures:E,floatVertexTextures:C,maxSamples:P}}function ZM(l){const e=this;let t=null,n=0,i=!1,r=!1;const a=new mr,c=new An,u={value:null,needsUpdate:!1};this.uniform=u,this.numPlanes=0,this.numIntersection=0,this.init=function(p,m,v){const x=p.length!==0||m||n!==0||i;return i=m,t=d(p,v,0),n=p.length,x},this.beginShadows=function(){r=!0,d(null)},this.endShadows=function(){r=!1,h()},this.setState=function(p,m,v){const x=p.clippingPlanes,_=p.clipIntersection,y=p.clipShadows,S=l.get(p);if(!i||x===null||x.length===0||r&&!y)r?d(null):h();else{const w=r?0:n,T=w*4;let E=S.clippingState||null;u.value=E,E=d(x,m,T,v);for(let C=0;C!==T;++C)E[C]=t[C];S.clippingState=E,this.numIntersection=_?this.numPlanes:0,this.numPlanes+=w}};function h(){u.value!==t&&(u.value=t,u.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function d(p,m,v,x){const _=p!==null?p.length:0;let y=null;if(_!==0){if(y=u.value,x!==!0||y===null){const S=v+_*4,w=m.matrixWorldInverse;c.getNormalMatrix(w),(y===null||y.length<S)&&(y=new Float32Array(S));for(let T=0,E=v;T!==_;++T,E+=4)a.copy(p[T]).applyMatrix4(w,c),a.normal.toArray(y,E),y[E+3]=a.constant}u.value=y,u.needsUpdate=!0}return e.numPlanes=_,e.numIntersection=0,y}}function JM(l){let e=new WeakMap;function t(a,c){return c===$o?a.mapping=_r:c===ea&&(a.mapping=yr),a}function n(a){if(a&&a.isTexture&&a.isRenderTargetTexture===!1){const c=a.mapping;if(c===$o||c===ea)if(e.has(a)){const u=e.get(a).texture;return t(u,a.mapping)}else{const u=a.image;if(u&&u.height>0){const h=new F0(u.height/2);return h.fromEquirectangularTexture(l,a),e.set(a,h),a.addEventListener("dispose",i),t(h.texture,a.mapping)}else return null}}return a}function i(a){const c=a.target;c.removeEventListener("dispose",i);const u=e.get(c);u!==void 0&&(e.delete(c),u.dispose())}function r(){e=new WeakMap}return{get:n,dispose:r}}class Sa extends ya{constructor(e=-1,t=1,n=1,i=-1,r=.1,a=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=i,this.near=r,this.far=a,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,i,r,a){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-e,a=n+e,c=i+t,u=i-t;if(this.view!==null&&this.view.enabled){const h=(this.right-this.left)/this.view.fullWidth/this.zoom,d=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=h*this.view.offsetX,a=r+h*this.view.width,c-=d*this.view.offsetY,u=c-d*this.view.height}this.projectionMatrix.makeOrthographic(r,a,c,u,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}const eo=4,dm=[.125,.215,.35,.446,.526,.582],Zr=20,Ch=new Sa,pm=new Le;let Ph=null;const qr=(1+Math.sqrt(5))/2,Ws=1/qr,mm=[new I(1,1,1),new I(-1,1,1),new I(1,1,-1),new I(-1,1,-1),new I(0,qr,Ws),new I(0,qr,-Ws),new I(Ws,0,qr),new I(-Ws,0,qr),new I(qr,Ws,0),new I(-qr,Ws,0)];class bf{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,i=100){Ph=this._renderer.getRenderTarget(),this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(e,n,i,r),t>0&&this._blur(r,0,0,t),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=xm(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=vm(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(Ph),e.scissorTest=!1,$l(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===_r||e.mapping===yr?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),Ph=this._renderer.getRenderTarget();const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:Vt,minFilter:Vt,generateMipmaps:!1,type:ro,format:ti,encoding:qi,depthBuffer:!1},i=gm(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=gm(e,t,n);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=jM(r)),this._blurMaterial=QM(r,e,t)}return i}_compileMaterial(e){const t=new sn(this._lodPlanes[0],e);this._renderer.compile(t,Ch)}_sceneToCubeUV(e,t,n,i){const c=new nn(90,1,t,n),u=[1,-1,1,1,1,1],h=[1,1,1,-1,-1,-1],d=this._renderer,p=d.autoClear,m=d.toneMapping;d.getClearColor(pm),d.toneMapping=hi,d.autoClear=!1;const v=new Tr({name:"PMREM.Background",side:Nn,depthWrite:!1,depthTest:!1}),x=new sn(new Er,v);let _=!1;const y=e.background;y?y.isColor&&(v.color.copy(y),e.background=null,_=!0):(v.color.copy(pm),_=!0);for(let S=0;S<6;S++){const w=S%3;w===0?(c.up.set(0,u[S],0),c.lookAt(h[S],0,0)):w===1?(c.up.set(0,0,u[S]),c.lookAt(0,h[S],0)):(c.up.set(0,u[S],0),c.lookAt(0,0,h[S]));const T=this._cubeSize;$l(i,w*T,S>2?T:0,T,T),d.setRenderTarget(i),_&&d.render(x,c),d.render(e,c)}x.geometry.dispose(),x.material.dispose(),d.toneMapping=m,d.autoClear=p,e.background=y}_textureToCubeUV(e,t){const n=this._renderer,i=e.mapping===_r||e.mapping===yr;i?(this._cubemapMaterial===null&&(this._cubemapMaterial=xm()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=vm());const r=i?this._cubemapMaterial:this._equirectMaterial,a=new sn(this._lodPlanes[0],r),c=r.uniforms;c.envMap.value=e;const u=this._cubeSize;$l(t,0,0,3*u,2*u),n.setRenderTarget(t),n.render(a,Ch)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;for(let i=1;i<this._lodPlanes.length;i++){const r=Math.sqrt(this._sigmas[i]*this._sigmas[i]-this._sigmas[i-1]*this._sigmas[i-1]),a=mm[(i-1)%mm.length];this._blur(e,i-1,i,r,a)}t.autoClear=n}_blur(e,t,n,i,r){const a=this._pingPongRenderTarget;this._halfBlur(e,a,t,n,i,"latitudinal",r),this._halfBlur(a,e,n,n,i,"longitudinal",r)}_halfBlur(e,t,n,i,r,a,c){const u=this._renderer,h=this._blurMaterial;a!=="latitudinal"&&a!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const d=3,p=new sn(this._lodPlanes[i],h),m=h.uniforms,v=this._sizeLods[n]-1,x=isFinite(r)?Math.PI/(2*v):2*Math.PI/(2*Zr-1),_=r/x,y=isFinite(r)?1+Math.floor(d*_):Zr;y>Zr&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${y} samples when the maximum is set to ${Zr}`);const S=[];let w=0;for(let N=0;N<Zr;++N){const A=N/_,L=Math.exp(-A*A/2);S.push(L),N===0?w+=L:N<y&&(w+=2*L)}for(let N=0;N<S.length;N++)S[N]=S[N]/w;m.envMap.value=e.texture,m.samples.value=y,m.weights.value=S,m.latitudinal.value=a==="latitudinal",c&&(m.poleAxis.value=c);const{_lodMax:T}=this;m.dTheta.value=x,m.mipInt.value=T-n;const E=this._sizeLods[i],C=3*E*(i>T-eo?i-T+eo:0),P=4*(this._cubeSize-E);$l(t,C,P,3*E,2*E),u.setRenderTarget(t),u.render(p,Ch)}}function jM(l){const e=[],t=[],n=[];let i=l;const r=l-eo+1+dm.length;for(let a=0;a<r;a++){const c=Math.pow(2,i);t.push(c);let u=1/c;a>l-eo?u=dm[a-l+eo-1]:a===0&&(u=0),n.push(u);const h=1/(c-2),d=-h,p=1+h,m=[d,d,p,d,p,p,d,d,p,p,d,p],v=6,x=6,_=3,y=2,S=1,w=new Float32Array(_*x*v),T=new Float32Array(y*x*v),E=new Float32Array(S*x*v);for(let P=0;P<v;P++){const N=P%3*2/3-1,A=P>2?0:-1,L=[N,A,0,N+2/3,A,0,N+2/3,A+1,0,N,A,0,N+2/3,A+1,0,N,A+1,0];w.set(L,_*x*P),T.set(m,y*x*P);const O=[P,P,P,P,P,P];E.set(O,S*x*P)}const C=new st;C.setAttribute("position",new Et(w,_)),C.setAttribute("uv",new Et(T,y)),C.setAttribute("faceIndex",new Et(E,S)),e.push(C),i>eo&&i--}return{lodPlanes:e,sizeLods:t,sigmas:n}}function gm(l,e,t){const n=new ni(l,e,t);return n.texture.mapping=lo,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function $l(l,e,t,n,i){l.viewport.set(e,t,n,i),l.scissor.set(e,t,n,i)}function QM(l,e,t){const n=new Float32Array(Zr),i=new I(0,1,0);return new bi({name:"SphericalGaussianBlur",defines:{n:Zr,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${l}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:Zf(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:Xi,depthTest:!1,depthWrite:!1})}function vm(){return new bi({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:Zf(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:Xi,depthTest:!1,depthWrite:!1})}function xm(){return new bi({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Zf(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:Xi,depthTest:!1,depthWrite:!1})}function Zf(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function KM(l){let e=new WeakMap,t=null;function n(c){if(c&&c.isTexture){const u=c.mapping,h=u===$o||u===ea,d=u===_r||u===yr;if(h||d)if(c.isRenderTargetTexture&&c.needsPMREMUpdate===!0){c.needsPMREMUpdate=!1;let p=e.get(c);return t===null&&(t=new bf(l)),p=h?t.fromEquirectangular(c,p):t.fromCubemap(c,p),e.set(c,p),p.texture}else{if(e.has(c))return e.get(c).texture;{const p=c.image;if(h&&p&&p.height>0||d&&p&&i(p)){t===null&&(t=new bf(l));const m=h?t.fromEquirectangular(c):t.fromCubemap(c);return e.set(c,m),c.addEventListener("dispose",r),m.texture}else return null}}}return c}function i(c){let u=0;const h=6;for(let d=0;d<h;d++)c[d]!==void 0&&u++;return u===h}function r(c){const u=c.target;u.removeEventListener("dispose",r);const h=e.get(u);h!==void 0&&(e.delete(u),h.dispose())}function a(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:n,dispose:a}}function $M(l){const e={};function t(n){if(e[n]!==void 0)return e[n];let i;switch(n){case"WEBGL_depth_texture":i=l.getExtension("WEBGL_depth_texture")||l.getExtension("MOZ_WEBGL_depth_texture")||l.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=l.getExtension("EXT_texture_filter_anisotropic")||l.getExtension("MOZ_EXT_texture_filter_anisotropic")||l.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=l.getExtension("WEBGL_compressed_texture_s3tc")||l.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||l.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=l.getExtension("WEBGL_compressed_texture_pvrtc")||l.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=l.getExtension(n)}return e[n]=i,i}return{has:function(n){return t(n)!==null},init:function(n){n.isWebGL2?t("EXT_color_buffer_float"):(t("WEBGL_depth_texture"),t("OES_texture_float"),t("OES_texture_half_float"),t("OES_texture_half_float_linear"),t("OES_standard_derivatives"),t("OES_element_index_uint"),t("OES_vertex_array_object"),t("ANGLE_instanced_arrays")),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture")},get:function(n){const i=t(n);return i===null&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),i}}}function eS(l,e,t,n){const i={},r=new WeakMap;function a(p){const m=p.target;m.index!==null&&e.remove(m.index);for(const x in m.attributes)e.remove(m.attributes[x]);m.removeEventListener("dispose",a),delete i[m.id];const v=r.get(m);v&&(e.remove(v),r.delete(m)),n.releaseStatesOfGeometry(m),m.isInstancedBufferGeometry===!0&&delete m._maxInstanceCount,t.memory.geometries--}function c(p,m){return i[m.id]===!0||(m.addEventListener("dispose",a),i[m.id]=!0,t.memory.geometries++),m}function u(p){const m=p.attributes;for(const x in m)e.update(m[x],34962);const v=p.morphAttributes;for(const x in v){const _=v[x];for(let y=0,S=_.length;y<S;y++)e.update(_[y],34962)}}function h(p){const m=[],v=p.index,x=p.attributes.position;let _=0;if(v!==null){const w=v.array;_=v.version;for(let T=0,E=w.length;T<E;T+=3){const C=w[T+0],P=w[T+1],N=w[T+2];m.push(C,P,P,N,N,C)}}else{const w=x.array;_=x.version;for(let T=0,E=w.length/3-1;T<E;T+=3){const C=T+0,P=T+1,N=T+2;m.push(C,P,P,N,N,C)}}const y=new(I0(m)?Yf:qf)(m,1);y.version=_;const S=r.get(p);S&&e.remove(S),r.set(p,y)}function d(p){const m=r.get(p);if(m){const v=p.index;v!==null&&m.version<v.version&&h(p)}else h(p);return r.get(p)}return{get:c,update:u,getWireframeAttribute:d}}function tS(l,e,t,n){const i=n.isWebGL2;let r;function a(m){r=m}let c,u;function h(m){c=m.type,u=m.bytesPerElement}function d(m,v){l.drawElements(r,v,c,m*u),t.update(v,r,1)}function p(m,v,x){if(x===0)return;let _,y;if(i)_=l,y="drawElementsInstanced";else if(_=e.get("ANGLE_instanced_arrays"),y="drawElementsInstancedANGLE",_===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}_[y](r,v,c,m*u,x),t.update(v,r,x)}this.setMode=a,this.setIndex=h,this.render=d,this.renderInstances=p}function nS(l){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(r,a,c){switch(t.calls++,a){case 4:t.triangles+=c*(r/3);break;case 1:t.lines+=c*(r/2);break;case 3:t.lines+=c*(r-1);break;case 2:t.lines+=c*r;break;case 0:t.points+=c*r;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",a);break}}function i(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:i,update:n}}function iS(l,e){return l[0]-e[0]}function rS(l,e){return Math.abs(e[1])-Math.abs(l[1])}function sS(l,e,t){const n={},i=new Float32Array(8),r=new WeakMap,a=new wt,c=[];for(let h=0;h<8;h++)c[h]=[h,0];function u(h,d,p,m){const v=h.morphTargetInfluences;if(e.isWebGL2===!0){const x=d.morphAttributes.position||d.morphAttributes.normal||d.morphAttributes.color,_=x!==void 0?x.length:0;let y=r.get(d);if(y===void 0||y.count!==_){let K=function(){J.dispose(),r.delete(d),d.removeEventListener("dispose",K)};y!==void 0&&y.texture.dispose();const T=d.morphAttributes.position!==void 0,E=d.morphAttributes.normal!==void 0,C=d.morphAttributes.color!==void 0,P=d.morphAttributes.position||[],N=d.morphAttributes.normal||[],A=d.morphAttributes.color||[];let L=0;T===!0&&(L=1),E===!0&&(L=2),C===!0&&(L=3);let O=d.attributes.position.count*L,X=1;O>e.maxTextureSize&&(X=Math.ceil(O/e.maxTextureSize),O=e.maxTextureSize);const ae=new Float32Array(O*X*4*_),J=new xa(ae,O,X,_);J.type=Hi,J.needsUpdate=!0;const H=L*4;for(let ie=0;ie<_;ie++){const he=P[ie],k=N[ie],U=A[ie],B=O*X*4*ie;for(let le=0;le<he.count;le++){const ne=le*H;T===!0&&(a.fromBufferAttribute(he,le),ae[B+ne+0]=a.x,ae[B+ne+1]=a.y,ae[B+ne+2]=a.z,ae[B+ne+3]=0),E===!0&&(a.fromBufferAttribute(k,le),ae[B+ne+4]=a.x,ae[B+ne+5]=a.y,ae[B+ne+6]=a.z,ae[B+ne+7]=0),C===!0&&(a.fromBufferAttribute(U,le),ae[B+ne+8]=a.x,ae[B+ne+9]=a.y,ae[B+ne+10]=a.z,ae[B+ne+11]=U.itemSize===4?a.w:1)}}y={count:_,texture:J,size:new fe(O,X)},r.set(d,y),d.addEventListener("dispose",K)}let S=0;for(let T=0;T<v.length;T++)S+=v[T];const w=d.morphTargetsRelative?1:1-S;m.getUniforms().setValue(l,"morphTargetBaseInfluence",w),m.getUniforms().setValue(l,"morphTargetInfluences",v),m.getUniforms().setValue(l,"morphTargetsTexture",y.texture,t),m.getUniforms().setValue(l,"morphTargetsTextureSize",y.size)}else{const x=v===void 0?0:v.length;let _=n[d.id];if(_===void 0||_.length!==x){_=[];for(let E=0;E<x;E++)_[E]=[E,0];n[d.id]=_}for(let E=0;E<x;E++){const C=_[E];C[0]=E,C[1]=v[E]}_.sort(rS);for(let E=0;E<8;E++)E<x&&_[E][1]?(c[E][0]=_[E][0],c[E][1]=_[E][1]):(c[E][0]=Number.MAX_SAFE_INTEGER,c[E][1]=0);c.sort(iS);const y=d.morphAttributes.position,S=d.morphAttributes.normal;let w=0;for(let E=0;E<8;E++){const C=c[E],P=C[0],N=C[1];P!==Number.MAX_SAFE_INTEGER&&N?(y&&d.getAttribute("morphTarget"+E)!==y[P]&&d.setAttribute("morphTarget"+E,y[P]),S&&d.getAttribute("morphNormal"+E)!==S[P]&&d.setAttribute("morphNormal"+E,S[P]),i[E]=N,w+=N):(y&&d.hasAttribute("morphTarget"+E)===!0&&d.deleteAttribute("morphTarget"+E),S&&d.hasAttribute("morphNormal"+E)===!0&&d.deleteAttribute("morphNormal"+E),i[E]=0)}const T=d.morphTargetsRelative?1:1-w;m.getUniforms().setValue(l,"morphTargetBaseInfluence",T),m.getUniforms().setValue(l,"morphTargetInfluences",i)}}return{update:u}}function oS(l,e,t,n){let i=new WeakMap;function r(u){const h=n.render.frame,d=u.geometry,p=e.get(u,d);return i.get(p)!==h&&(e.update(p),i.set(p,h)),u.isInstancedMesh&&(u.hasEventListener("dispose",c)===!1&&u.addEventListener("dispose",c),t.update(u.instanceMatrix,34962),u.instanceColor!==null&&t.update(u.instanceColor,34962)),p}function a(){i=new WeakMap}function c(u){const h=u.target;h.removeEventListener("dispose",c),t.remove(h.instanceMatrix),h.instanceColor!==null&&t.remove(h.instanceColor)}return{update:r,dispose:a}}const U0=new Zt,B0=new xa,k0=new Hc,V0=new Ma,_m=[],ym=[],Mm=new Float32Array(16),Sm=new Float32Array(9),wm=new Float32Array(4);function ho(l,e,t){const n=l[0];if(n<=0||n>0)return l;const i=e*t;let r=_m[i];if(r===void 0&&(r=new Float32Array(i),_m[i]=r),e!==0){n.toArray(r,0);for(let a=1,c=0;a!==e;++a)c+=t,l[a].toArray(r,c)}return r}function xn(l,e){if(l.length!==e.length)return!1;for(let t=0,n=l.length;t<n;t++)if(l[t]!==e[t])return!1;return!0}function _n(l,e){for(let t=0,n=e.length;t<n;t++)l[t]=e[t]}function Xc(l,e){let t=ym[e];t===void 0&&(t=new Int32Array(e),ym[e]=t);for(let n=0;n!==e;++n)t[n]=l.allocateTextureUnit();return t}function aS(l,e){const t=this.cache;t[0]!==e&&(l.uniform1f(this.addr,e),t[0]=e)}function lS(l,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(l.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(xn(t,e))return;l.uniform2fv(this.addr,e),_n(t,e)}}function cS(l,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(l.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(l.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(xn(t,e))return;l.uniform3fv(this.addr,e),_n(t,e)}}function uS(l,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(l.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(xn(t,e))return;l.uniform4fv(this.addr,e),_n(t,e)}}function hS(l,e){const t=this.cache,n=e.elements;if(n===void 0){if(xn(t,e))return;l.uniformMatrix2fv(this.addr,!1,e),_n(t,e)}else{if(xn(t,n))return;wm.set(n),l.uniformMatrix2fv(this.addr,!1,wm),_n(t,n)}}function fS(l,e){const t=this.cache,n=e.elements;if(n===void 0){if(xn(t,e))return;l.uniformMatrix3fv(this.addr,!1,e),_n(t,e)}else{if(xn(t,n))return;Sm.set(n),l.uniformMatrix3fv(this.addr,!1,Sm),_n(t,n)}}function dS(l,e){const t=this.cache,n=e.elements;if(n===void 0){if(xn(t,e))return;l.uniformMatrix4fv(this.addr,!1,e),_n(t,e)}else{if(xn(t,n))return;Mm.set(n),l.uniformMatrix4fv(this.addr,!1,Mm),_n(t,n)}}function pS(l,e){const t=this.cache;t[0]!==e&&(l.uniform1i(this.addr,e),t[0]=e)}function mS(l,e){const t=this.cache;xn(t,e)||(l.uniform2iv(this.addr,e),_n(t,e))}function gS(l,e){const t=this.cache;xn(t,e)||(l.uniform3iv(this.addr,e),_n(t,e))}function vS(l,e){const t=this.cache;xn(t,e)||(l.uniform4iv(this.addr,e),_n(t,e))}function xS(l,e){const t=this.cache;t[0]!==e&&(l.uniform1ui(this.addr,e),t[0]=e)}function _S(l,e){const t=this.cache;xn(t,e)||(l.uniform2uiv(this.addr,e),_n(t,e))}function yS(l,e){const t=this.cache;xn(t,e)||(l.uniform3uiv(this.addr,e),_n(t,e))}function MS(l,e){const t=this.cache;xn(t,e)||(l.uniform4uiv(this.addr,e),_n(t,e))}function SS(l,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i),t.setTexture2D(e||U0,i)}function wS(l,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i),t.setTexture3D(e||k0,i)}function bS(l,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i),t.setTextureCube(e||V0,i)}function TS(l,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i),t.setTexture2DArray(e||B0,i)}function ES(l){switch(l){case 5126:return aS;case 35664:return lS;case 35665:return cS;case 35666:return uS;case 35674:return hS;case 35675:return fS;case 35676:return dS;case 5124:case 35670:return pS;case 35667:case 35671:return mS;case 35668:case 35672:return gS;case 35669:case 35673:return vS;case 5125:return xS;case 36294:return _S;case 36295:return yS;case 36296:return MS;case 35678:case 36198:case 36298:case 36306:case 35682:return SS;case 35679:case 36299:case 36307:return wS;case 35680:case 36300:case 36308:case 36293:return bS;case 36289:case 36303:case 36311:case 36292:return TS}}function AS(l,e){l.uniform1fv(this.addr,e)}function CS(l,e){const t=ho(e,this.size,2);l.uniform2fv(this.addr,t)}function PS(l,e){const t=ho(e,this.size,3);l.uniform3fv(this.addr,t)}function LS(l,e){const t=ho(e,this.size,4);l.uniform4fv(this.addr,t)}function RS(l,e){const t=ho(e,this.size,4);l.uniformMatrix2fv(this.addr,!1,t)}function IS(l,e){const t=ho(e,this.size,9);l.uniformMatrix3fv(this.addr,!1,t)}function DS(l,e){const t=ho(e,this.size,16);l.uniformMatrix4fv(this.addr,!1,t)}function zS(l,e){l.uniform1iv(this.addr,e)}function NS(l,e){l.uniform2iv(this.addr,e)}function FS(l,e){l.uniform3iv(this.addr,e)}function OS(l,e){l.uniform4iv(this.addr,e)}function US(l,e){l.uniform1uiv(this.addr,e)}function BS(l,e){l.uniform2uiv(this.addr,e)}function kS(l,e){l.uniform3uiv(this.addr,e)}function VS(l,e){l.uniform4uiv(this.addr,e)}function GS(l,e,t){const n=e.length,i=Xc(t,n);l.uniform1iv(this.addr,i);for(let r=0;r!==n;++r)t.setTexture2D(e[r]||U0,i[r])}function HS(l,e,t){const n=e.length,i=Xc(t,n);l.uniform1iv(this.addr,i);for(let r=0;r!==n;++r)t.setTexture3D(e[r]||k0,i[r])}function WS(l,e,t){const n=e.length,i=Xc(t,n);l.uniform1iv(this.addr,i);for(let r=0;r!==n;++r)t.setTextureCube(e[r]||V0,i[r])}function XS(l,e,t){const n=e.length,i=Xc(t,n);l.uniform1iv(this.addr,i);for(let r=0;r!==n;++r)t.setTexture2DArray(e[r]||B0,i[r])}function qS(l){switch(l){case 5126:return AS;case 35664:return CS;case 35665:return PS;case 35666:return LS;case 35674:return RS;case 35675:return IS;case 35676:return DS;case 5124:case 35670:return zS;case 35667:case 35671:return NS;case 35668:case 35672:return FS;case 35669:case 35673:return OS;case 5125:return US;case 36294:return BS;case 36295:return kS;case 36296:return VS;case 35678:case 36198:case 36298:case 36306:case 35682:return GS;case 35679:case 36299:case 36307:return HS;case 35680:case 36300:case 36308:case 36293:return WS;case 36289:case 36303:case 36311:case 36292:return XS}}class YS{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.setValue=ES(t.type)}}class ZS{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.size=t.size,this.setValue=qS(t.type)}}class JS{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const i=this.seq;for(let r=0,a=i.length;r!==a;++r){const c=i[r];c.setValue(e,t[c.id],n)}}}const Lh=/(\w+)(\])?(\[|\.)?/g;function bm(l,e){l.seq.push(e),l.map[e.id]=e}function jS(l,e,t){const n=l.name,i=n.length;for(Lh.lastIndex=0;;){const r=Lh.exec(n),a=Lh.lastIndex;let c=r[1];const u=r[2]==="]",h=r[3];if(u&&(c=c|0),h===void 0||h==="["&&a+2===i){bm(t,h===void 0?new YS(c,l,e):new ZS(c,l,e));break}else{let p=t.map[c];p===void 0&&(p=new JS(c),bm(t,p)),t=p}}}class Rc{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,35718);for(let i=0;i<n;++i){const r=e.getActiveUniform(t,i),a=e.getUniformLocation(t,r.name);jS(r,a,this)}}setValue(e,t,n,i){const r=this.map[t];r!==void 0&&r.setValue(e,n,i)}setOptional(e,t,n){const i=t[n];i!==void 0&&this.setValue(e,n,i)}static upload(e,t,n,i){for(let r=0,a=t.length;r!==a;++r){const c=t[r],u=n[c.id];u.needsUpdate!==!1&&c.setValue(e,u.value,i)}}static seqWithValue(e,t){const n=[];for(let i=0,r=e.length;i!==r;++i){const a=e[i];a.id in t&&n.push(a)}return n}}function Tm(l,e,t){const n=l.createShader(e);return l.shaderSource(n,t),l.compileShader(n),n}let QS=0;function KS(l,e){const t=l.split(`
`),n=[],i=Math.max(e-6,0),r=Math.min(e+6,t.length);for(let a=i;a<r;a++){const c=a+1;n.push(`${c===e?">":" "} ${c}: ${t[a]}`)}return n.join(`
`)}function $S(l){switch(l){case qi:return["Linear","( value )"];case At:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",l),["Linear","( value )"]}}function Em(l,e,t){const n=l.getShaderParameter(e,35713),i=l.getShaderInfoLog(e).trim();if(n&&i==="")return"";const r=/ERROR: 0:(\d+)/.exec(i);if(r){const a=parseInt(r[1]);return t.toUpperCase()+`

`+i+`

`+KS(l.getShaderSource(e),a)}else return i}function ew(l,e){const t=$S(e);return"vec4 "+l+"( vec4 value ) { return LinearTo"+t[0]+t[1]+"; }"}function tw(l,e){let t;switch(e){case s0:t="Linear";break;case o0:t="Reinhard";break;case a0:t="OptimizedCineon";break;case kf:t="ACESFilmic";break;case l0:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+l+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}function nw(l){return[l.extensionDerivatives||!!l.envMapCubeUVHeight||l.bumpMap||l.tangentSpaceNormalMap||l.clearcoatNormalMap||l.flatShading||l.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(l.extensionFragDepth||l.logarithmicDepthBuffer)&&l.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",l.extensionDrawBuffers&&l.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(l.extensionShaderTextureLOD||l.envMap||l.transmission)&&l.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Zo).join(`
`)}function iw(l){const e=[];for(const t in l){const n=l[t];n!==!1&&e.push("#define "+t+" "+n)}return e.join(`
`)}function rw(l,e){const t={},n=l.getProgramParameter(e,35721);for(let i=0;i<n;i++){const r=l.getActiveAttrib(e,i),a=r.name;let c=1;r.type===35674&&(c=2),r.type===35675&&(c=3),r.type===35676&&(c=4),t[a]={type:r.type,location:l.getAttribLocation(e,a),locationSize:c}}return t}function Zo(l){return l!==""}function Am(l,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return l.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Cm(l,e){return l.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const sw=/^[ \t]*#include +<([\w\d./]+)>/gm;function Tf(l){return l.replace(sw,ow)}function ow(l,e){const t=at[e];if(t===void 0)throw new Error("Can not resolve #include <"+e+">");return Tf(t)}const aw=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Pm(l){return l.replace(aw,lw)}function lw(l,e,t,n){let i="";for(let r=parseInt(e);r<parseInt(t);r++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+r+" ]").replace(/UNROLLED_LOOP_INDEX/g,r);return i}function Lm(l){let e="precision "+l.precision+` float;
precision `+l.precision+" int;";return l.precision==="highp"?e+=`
#define HIGH_PRECISION`:l.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:l.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function cw(l){let e="SHADOWMAP_TYPE_BASIC";return l.shadowMapType===Ff?e="SHADOWMAP_TYPE_PCF":l.shadowMapType===Of?e="SHADOWMAP_TYPE_PCF_SOFT":l.shadowMapType===Ks&&(e="SHADOWMAP_TYPE_VSM"),e}function uw(l){let e="ENVMAP_TYPE_CUBE";if(l.envMap)switch(l.envMapMode){case _r:case yr:e="ENVMAP_TYPE_CUBE";break;case lo:e="ENVMAP_TYPE_CUBE_UV";break}return e}function hw(l){let e="ENVMAP_MODE_REFLECTION";if(l.envMap)switch(l.envMapMode){case yr:e="ENVMAP_MODE_REFRACTION";break}return e}function fw(l){let e="ENVMAP_BLENDING_NONE";if(l.envMap)switch(l.combine){case va:e="ENVMAP_BLENDING_MULTIPLY";break;case i0:e="ENVMAP_BLENDING_MIX";break;case r0:e="ENVMAP_BLENDING_ADD";break}return e}function dw(l){const e=l.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,n=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:n,maxMip:t}}function pw(l,e,t,n){const i=l.getContext(),r=t.defines;let a=t.vertexShader,c=t.fragmentShader;const u=cw(t),h=uw(t),d=hw(t),p=fw(t),m=dw(t),v=t.isWebGL2?"":nw(t),x=iw(r),_=i.createProgram();let y,S,w=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(y=[x].filter(Zo).join(`
`),y.length>0&&(y+=`
`),S=[v,x].filter(Zo).join(`
`),S.length>0&&(S+=`
`)):(y=[Lm(t),"#define SHADER_NAME "+t.shaderName,x,t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.supportsVertexTextures?"#define VERTEX_TEXTURES":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+d:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMap&&t.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",t.normalMap&&t.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.displacementMap&&t.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",t.specularColorMap?"#define USE_SPECULARCOLORMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEENCOLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUvs?"#define USE_UV":"",t.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors&&t.isWebGL2?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+u:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(Zo).join(`
`),S=[v,Lm(t),"#define SHADER_NAME "+t.shaderName,x,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+h:"",t.envMap?"#define "+d:"",t.envMap?"#define "+p:"",m?"#define CUBEUV_TEXEL_WIDTH "+m.texelWidth:"",m?"#define CUBEUV_TEXEL_HEIGHT "+m.texelHeight:"",m?"#define CUBEUV_MAX_MIP "+m.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMap&&t.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",t.normalMap&&t.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",t.specularColorMap?"#define USE_SPECULARCOLORMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEENCOLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUvs?"#define USE_UV":"",t.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+u:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==hi?"#define TONE_MAPPING":"",t.toneMapping!==hi?at.tonemapping_pars_fragment:"",t.toneMapping!==hi?tw("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",at.encodings_pars_fragment,ew("linearToOutputTexel",t.outputEncoding),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(Zo).join(`
`)),a=Tf(a),a=Am(a,t),a=Cm(a,t),c=Tf(c),c=Am(c,t),c=Cm(c,t),a=Pm(a),c=Pm(c),t.isWebGL2&&t.isRawShaderMaterial!==!0&&(w=`#version 300 es
`,y=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+y,S=["#define varying in",t.glslVersion===Sf?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===Sf?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+S);const T=w+y+a,E=w+S+c,C=Tm(i,35633,T),P=Tm(i,35632,E);if(i.attachShader(_,C),i.attachShader(_,P),t.index0AttributeName!==void 0?i.bindAttribLocation(_,0,t.index0AttributeName):t.morphTargets===!0&&i.bindAttribLocation(_,0,"position"),i.linkProgram(_),l.debug.checkShaderErrors){const L=i.getProgramInfoLog(_).trim(),O=i.getShaderInfoLog(C).trim(),X=i.getShaderInfoLog(P).trim();let ae=!0,J=!0;if(i.getProgramParameter(_,35714)===!1){ae=!1;const H=Em(i,C,"vertex"),K=Em(i,P,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(_,35715)+`

Program Info Log: `+L+`
`+H+`
`+K)}else L!==""?console.warn("THREE.WebGLProgram: Program Info Log:",L):(O===""||X==="")&&(J=!1);J&&(this.diagnostics={runnable:ae,programLog:L,vertexShader:{log:O,prefix:y},fragmentShader:{log:X,prefix:S}})}i.deleteShader(C),i.deleteShader(P);let N;this.getUniforms=function(){return N===void 0&&(N=new Rc(i,_)),N};let A;return this.getAttributes=function(){return A===void 0&&(A=rw(i,_)),A},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(_),this.program=void 0},this.name=t.shaderName,this.id=QS++,this.cacheKey=e,this.usedTimes=1,this.program=_,this.vertexShader=C,this.fragmentShader=P,this}let mw=0;class gw{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,i=this._getShaderStage(t),r=this._getShaderStage(n),a=this._getShaderCacheForMaterial(e);return a.has(i)===!1&&(a.add(i),i.usedTimes++),a.has(r)===!1&&(a.add(r),r.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const n of t)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return n===void 0&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return n===void 0&&(n=new vw(e),t.set(e,n)),n}}class vw{constructor(e){this.id=mw++,this.code=e,this.usedTimes=0}}function xw(l,e,t,n,i,r,a){const c=new ss,u=new gw,h=[],d=i.isWebGL2,p=i.logarithmicDepthBuffer,m=i.vertexTextures;let v=i.precision;const x={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function _(A,L,O,X,ae){const J=X.fog,H=ae.geometry,K=A.isMeshStandardMaterial?X.environment:null,ie=(A.isMeshStandardMaterial?t:e).get(A.envMap||K),he=!!ie&&ie.mapping===lo?ie.image.height:null,k=x[A.type];A.precision!==null&&(v=i.getMaxPrecision(A.precision),v!==A.precision&&console.warn("THREE.WebGLProgram.getParameters:",A.precision,"not supported, using",v,"instead."));const U=H.morphAttributes.position||H.morphAttributes.normal||H.morphAttributes.color,B=U!==void 0?U.length:0;let le=0;H.morphAttributes.position!==void 0&&(le=1),H.morphAttributes.normal!==void 0&&(le=2),H.morphAttributes.color!==void 0&&(le=3);let ne,de,we,Be;if(k){const qe=ui[k];ne=qe.vertexShader,de=qe.fragmentShader}else ne=A.vertexShader,de=A.fragmentShader,u.update(A),we=u.getVertexShaderID(A),Be=u.getFragmentShaderID(A);const se=l.getRenderTarget(),Ye=A.alphaTest>0,He=A.clearcoat>0,Xe=A.iridescence>0;return{isWebGL2:d,shaderID:k,shaderName:A.type,vertexShader:ne,fragmentShader:de,defines:A.defines,customVertexShaderID:we,customFragmentShaderID:Be,isRawShaderMaterial:A.isRawShaderMaterial===!0,glslVersion:A.glslVersion,precision:v,instancing:ae.isInstancedMesh===!0,instancingColor:ae.isInstancedMesh===!0&&ae.instanceColor!==null,supportsVertexTextures:m,outputEncoding:se===null?l.outputEncoding:se.isXRRenderTarget===!0?se.texture.encoding:qi,map:!!A.map,matcap:!!A.matcap,envMap:!!ie,envMapMode:ie&&ie.mapping,envMapCubeUVHeight:he,lightMap:!!A.lightMap,aoMap:!!A.aoMap,emissiveMap:!!A.emissiveMap,bumpMap:!!A.bumpMap,normalMap:!!A.normalMap,objectSpaceNormalMap:A.normalMapType===P0,tangentSpaceNormalMap:A.normalMapType===br,decodeVideoTexture:!!A.map&&A.map.isVideoTexture===!0&&A.map.encoding===At,clearcoat:He,clearcoatMap:He&&!!A.clearcoatMap,clearcoatRoughnessMap:He&&!!A.clearcoatRoughnessMap,clearcoatNormalMap:He&&!!A.clearcoatNormalMap,iridescence:Xe,iridescenceMap:Xe&&!!A.iridescenceMap,iridescenceThicknessMap:Xe&&!!A.iridescenceThicknessMap,displacementMap:!!A.displacementMap,roughnessMap:!!A.roughnessMap,metalnessMap:!!A.metalnessMap,specularMap:!!A.specularMap,specularIntensityMap:!!A.specularIntensityMap,specularColorMap:!!A.specularColorMap,opaque:A.transparent===!1&&A.blending===es,alphaMap:!!A.alphaMap,alphaTest:Ye,gradientMap:!!A.gradientMap,sheen:A.sheen>0,sheenColorMap:!!A.sheenColorMap,sheenRoughnessMap:!!A.sheenRoughnessMap,transmission:A.transmission>0,transmissionMap:!!A.transmissionMap,thicknessMap:!!A.thicknessMap,combine:A.combine,vertexTangents:!!A.normalMap&&!!H.attributes.tangent,vertexColors:A.vertexColors,vertexAlphas:A.vertexColors===!0&&!!H.attributes.color&&H.attributes.color.itemSize===4,vertexUvs:!!A.map||!!A.bumpMap||!!A.normalMap||!!A.specularMap||!!A.alphaMap||!!A.emissiveMap||!!A.roughnessMap||!!A.metalnessMap||!!A.clearcoatMap||!!A.clearcoatRoughnessMap||!!A.clearcoatNormalMap||!!A.iridescenceMap||!!A.iridescenceThicknessMap||!!A.displacementMap||!!A.transmissionMap||!!A.thicknessMap||!!A.specularIntensityMap||!!A.specularColorMap||!!A.sheenColorMap||!!A.sheenRoughnessMap,uvsVertexOnly:!(!!A.map||!!A.bumpMap||!!A.normalMap||!!A.specularMap||!!A.alphaMap||!!A.emissiveMap||!!A.roughnessMap||!!A.metalnessMap||!!A.clearcoatNormalMap||!!A.iridescenceMap||!!A.iridescenceThicknessMap||A.transmission>0||!!A.transmissionMap||!!A.thicknessMap||!!A.specularIntensityMap||!!A.specularColorMap||A.sheen>0||!!A.sheenColorMap||!!A.sheenRoughnessMap)&&!!A.displacementMap,fog:!!J,useFog:A.fog===!0,fogExp2:J&&J.isFogExp2,flatShading:!!A.flatShading,sizeAttenuation:A.sizeAttenuation,logarithmicDepthBuffer:p,skinning:ae.isSkinnedMesh===!0,morphTargets:H.morphAttributes.position!==void 0,morphNormals:H.morphAttributes.normal!==void 0,morphColors:H.morphAttributes.color!==void 0,morphTargetsCount:B,morphTextureStride:le,numDirLights:L.directional.length,numPointLights:L.point.length,numSpotLights:L.spot.length,numSpotLightMaps:L.spotLightMap.length,numRectAreaLights:L.rectArea.length,numHemiLights:L.hemi.length,numDirLightShadows:L.directionalShadowMap.length,numPointLightShadows:L.pointShadowMap.length,numSpotLightShadows:L.spotShadowMap.length,numSpotLightShadowsWithMaps:L.numSpotLightShadowsWithMaps,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:A.dithering,shadowMapEnabled:l.shadowMap.enabled&&O.length>0,shadowMapType:l.shadowMap.type,toneMapping:A.toneMapped?l.toneMapping:hi,physicallyCorrectLights:l.physicallyCorrectLights,premultipliedAlpha:A.premultipliedAlpha,doubleSided:A.side===Gi,flipSided:A.side===Nn,useDepthPacking:!!A.depthPacking,depthPacking:A.depthPacking||0,index0AttributeName:A.index0AttributeName,extensionDerivatives:A.extensions&&A.extensions.derivatives,extensionFragDepth:A.extensions&&A.extensions.fragDepth,extensionDrawBuffers:A.extensions&&A.extensions.drawBuffers,extensionShaderTextureLOD:A.extensions&&A.extensions.shaderTextureLOD,rendererExtensionFragDepth:d||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:d||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:d||n.has("EXT_shader_texture_lod"),customProgramCacheKey:A.customProgramCacheKey()}}function y(A){const L=[];if(A.shaderID?L.push(A.shaderID):(L.push(A.customVertexShaderID),L.push(A.customFragmentShaderID)),A.defines!==void 0)for(const O in A.defines)L.push(O),L.push(A.defines[O]);return A.isRawShaderMaterial===!1&&(S(L,A),w(L,A),L.push(l.outputEncoding)),L.push(A.customProgramCacheKey),L.join()}function S(A,L){A.push(L.precision),A.push(L.outputEncoding),A.push(L.envMapMode),A.push(L.envMapCubeUVHeight),A.push(L.combine),A.push(L.vertexUvs),A.push(L.fogExp2),A.push(L.sizeAttenuation),A.push(L.morphTargetsCount),A.push(L.morphAttributeCount),A.push(L.numDirLights),A.push(L.numPointLights),A.push(L.numSpotLights),A.push(L.numSpotLightMaps),A.push(L.numHemiLights),A.push(L.numRectAreaLights),A.push(L.numDirLightShadows),A.push(L.numPointLightShadows),A.push(L.numSpotLightShadows),A.push(L.numSpotLightShadowsWithMaps),A.push(L.shadowMapType),A.push(L.toneMapping),A.push(L.numClippingPlanes),A.push(L.numClipIntersection),A.push(L.depthPacking)}function w(A,L){c.disableAll(),L.isWebGL2&&c.enable(0),L.supportsVertexTextures&&c.enable(1),L.instancing&&c.enable(2),L.instancingColor&&c.enable(3),L.map&&c.enable(4),L.matcap&&c.enable(5),L.envMap&&c.enable(6),L.lightMap&&c.enable(7),L.aoMap&&c.enable(8),L.emissiveMap&&c.enable(9),L.bumpMap&&c.enable(10),L.normalMap&&c.enable(11),L.objectSpaceNormalMap&&c.enable(12),L.tangentSpaceNormalMap&&c.enable(13),L.clearcoat&&c.enable(14),L.clearcoatMap&&c.enable(15),L.clearcoatRoughnessMap&&c.enable(16),L.clearcoatNormalMap&&c.enable(17),L.iridescence&&c.enable(18),L.iridescenceMap&&c.enable(19),L.iridescenceThicknessMap&&c.enable(20),L.displacementMap&&c.enable(21),L.specularMap&&c.enable(22),L.roughnessMap&&c.enable(23),L.metalnessMap&&c.enable(24),L.gradientMap&&c.enable(25),L.alphaMap&&c.enable(26),L.alphaTest&&c.enable(27),L.vertexColors&&c.enable(28),L.vertexAlphas&&c.enable(29),L.vertexUvs&&c.enable(30),L.vertexTangents&&c.enable(31),L.uvsVertexOnly&&c.enable(32),A.push(c.mask),c.disableAll(),L.fog&&c.enable(0),L.useFog&&c.enable(1),L.flatShading&&c.enable(2),L.logarithmicDepthBuffer&&c.enable(3),L.skinning&&c.enable(4),L.morphTargets&&c.enable(5),L.morphNormals&&c.enable(6),L.morphColors&&c.enable(7),L.premultipliedAlpha&&c.enable(8),L.shadowMapEnabled&&c.enable(9),L.physicallyCorrectLights&&c.enable(10),L.doubleSided&&c.enable(11),L.flipSided&&c.enable(12),L.useDepthPacking&&c.enable(13),L.dithering&&c.enable(14),L.specularIntensityMap&&c.enable(15),L.specularColorMap&&c.enable(16),L.transmission&&c.enable(17),L.transmissionMap&&c.enable(18),L.thicknessMap&&c.enable(19),L.sheen&&c.enable(20),L.sheenColorMap&&c.enable(21),L.sheenRoughnessMap&&c.enable(22),L.decodeVideoTexture&&c.enable(23),L.opaque&&c.enable(24),A.push(c.mask)}function T(A){const L=x[A.type];let O;if(L){const X=ui[L];O=z0.clone(X.uniforms)}else O=A.uniforms;return O}function E(A,L){let O;for(let X=0,ae=h.length;X<ae;X++){const J=h[X];if(J.cacheKey===L){O=J,++O.usedTimes;break}}return O===void 0&&(O=new pw(l,L,A,r),h.push(O)),O}function C(A){if(--A.usedTimes===0){const L=h.indexOf(A);h[L]=h[h.length-1],h.pop(),A.destroy()}}function P(A){u.remove(A)}function N(){u.dispose()}return{getParameters:_,getProgramCacheKey:y,getUniforms:T,acquireProgram:E,releaseProgram:C,releaseShaderCache:P,programs:h,dispose:N}}function _w(){let l=new WeakMap;function e(r){let a=l.get(r);return a===void 0&&(a={},l.set(r,a)),a}function t(r){l.delete(r)}function n(r,a,c){l.get(r)[a]=c}function i(){l=new WeakMap}return{get:e,remove:t,update:n,dispose:i}}function yw(l,e){return l.groupOrder!==e.groupOrder?l.groupOrder-e.groupOrder:l.renderOrder!==e.renderOrder?l.renderOrder-e.renderOrder:l.material.id!==e.material.id?l.material.id-e.material.id:l.z!==e.z?l.z-e.z:l.id-e.id}function Rm(l,e){return l.groupOrder!==e.groupOrder?l.groupOrder-e.groupOrder:l.renderOrder!==e.renderOrder?l.renderOrder-e.renderOrder:l.z!==e.z?e.z-l.z:l.id-e.id}function Im(){const l=[];let e=0;const t=[],n=[],i=[];function r(){e=0,t.length=0,n.length=0,i.length=0}function a(p,m,v,x,_,y){let S=l[e];return S===void 0?(S={id:p.id,object:p,geometry:m,material:v,groupOrder:x,renderOrder:p.renderOrder,z:_,group:y},l[e]=S):(S.id=p.id,S.object=p,S.geometry=m,S.material=v,S.groupOrder=x,S.renderOrder=p.renderOrder,S.z=_,S.group=y),e++,S}function c(p,m,v,x,_,y){const S=a(p,m,v,x,_,y);v.transmission>0?n.push(S):v.transparent===!0?i.push(S):t.push(S)}function u(p,m,v,x,_,y){const S=a(p,m,v,x,_,y);v.transmission>0?n.unshift(S):v.transparent===!0?i.unshift(S):t.unshift(S)}function h(p,m){t.length>1&&t.sort(p||yw),n.length>1&&n.sort(m||Rm),i.length>1&&i.sort(m||Rm)}function d(){for(let p=e,m=l.length;p<m;p++){const v=l[p];if(v.id===null)break;v.id=null,v.object=null,v.geometry=null,v.material=null,v.group=null}}return{opaque:t,transmissive:n,transparent:i,init:r,push:c,unshift:u,finish:d,sort:h}}function Mw(){let l=new WeakMap;function e(n,i){const r=l.get(n);let a;return r===void 0?(a=new Im,l.set(n,[a])):i>=r.length?(a=new Im,r.push(a)):a=r[i],a}function t(){l=new WeakMap}return{get:e,dispose:t}}function Sw(){const l={};return{get:function(e){if(l[e.id]!==void 0)return l[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new I,color:new Le};break;case"SpotLight":t={position:new I,direction:new I,color:new Le,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new I,color:new Le,distance:0,decay:0};break;case"HemisphereLight":t={direction:new I,skyColor:new Le,groundColor:new Le};break;case"RectAreaLight":t={color:new Le,position:new I,halfWidth:new I,halfHeight:new I};break}return l[e.id]=t,t}}}function ww(){const l={};return{get:function(e){if(l[e.id]!==void 0)return l[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new fe};break;case"SpotLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new fe};break;case"PointLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new fe,shadowCameraNear:1,shadowCameraFar:1e3};break}return l[e.id]=t,t}}}let bw=0;function Tw(l,e){return(e.castShadow?2:0)-(l.castShadow?2:0)+(e.map?1:0)-(l.map?1:0)}function Ew(l,e){const t=new Sw,n=ww(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0};for(let d=0;d<9;d++)i.probe.push(new I);const r=new I,a=new et,c=new et;function u(d,p){let m=0,v=0,x=0;for(let X=0;X<9;X++)i.probe[X].set(0,0,0);let _=0,y=0,S=0,w=0,T=0,E=0,C=0,P=0,N=0,A=0;d.sort(Tw);const L=p!==!0?Math.PI:1;for(let X=0,ae=d.length;X<ae;X++){const J=d[X],H=J.color,K=J.intensity,ie=J.distance,he=J.shadow&&J.shadow.map?J.shadow.map.texture:null;if(J.isAmbientLight)m+=H.r*K*L,v+=H.g*K*L,x+=H.b*K*L;else if(J.isLightProbe)for(let k=0;k<9;k++)i.probe[k].addScaledVector(J.sh.coefficients[k],K);else if(J.isDirectionalLight){const k=t.get(J);if(k.color.copy(J.color).multiplyScalar(J.intensity*L),J.castShadow){const U=J.shadow,B=n.get(J);B.shadowBias=U.bias,B.shadowNormalBias=U.normalBias,B.shadowRadius=U.radius,B.shadowMapSize=U.mapSize,i.directionalShadow[_]=B,i.directionalShadowMap[_]=he,i.directionalShadowMatrix[_]=J.shadow.matrix,E++}i.directional[_]=k,_++}else if(J.isSpotLight){const k=t.get(J);k.position.setFromMatrixPosition(J.matrixWorld),k.color.copy(H).multiplyScalar(K*L),k.distance=ie,k.coneCos=Math.cos(J.angle),k.penumbraCos=Math.cos(J.angle*(1-J.penumbra)),k.decay=J.decay,i.spot[S]=k;const U=J.shadow;if(J.map&&(i.spotLightMap[N]=J.map,N++,U.updateMatrices(J),J.castShadow&&A++),i.spotLightMatrix[S]=U.matrix,J.castShadow){const B=n.get(J);B.shadowBias=U.bias,B.shadowNormalBias=U.normalBias,B.shadowRadius=U.radius,B.shadowMapSize=U.mapSize,i.spotShadow[S]=B,i.spotShadowMap[S]=he,P++}S++}else if(J.isRectAreaLight){const k=t.get(J);k.color.copy(H).multiplyScalar(K),k.halfWidth.set(J.width*.5,0,0),k.halfHeight.set(0,J.height*.5,0),i.rectArea[w]=k,w++}else if(J.isPointLight){const k=t.get(J);if(k.color.copy(J.color).multiplyScalar(J.intensity*L),k.distance=J.distance,k.decay=J.decay,J.castShadow){const U=J.shadow,B=n.get(J);B.shadowBias=U.bias,B.shadowNormalBias=U.normalBias,B.shadowRadius=U.radius,B.shadowMapSize=U.mapSize,B.shadowCameraNear=U.camera.near,B.shadowCameraFar=U.camera.far,i.pointShadow[y]=B,i.pointShadowMap[y]=he,i.pointShadowMatrix[y]=J.shadow.matrix,C++}i.point[y]=k,y++}else if(J.isHemisphereLight){const k=t.get(J);k.skyColor.copy(J.color).multiplyScalar(K*L),k.groundColor.copy(J.groundColor).multiplyScalar(K*L),i.hemi[T]=k,T++}}w>0&&(e.isWebGL2||l.has("OES_texture_float_linear")===!0?(i.rectAreaLTC1=_e.LTC_FLOAT_1,i.rectAreaLTC2=_e.LTC_FLOAT_2):l.has("OES_texture_half_float_linear")===!0?(i.rectAreaLTC1=_e.LTC_HALF_1,i.rectAreaLTC2=_e.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),i.ambient[0]=m,i.ambient[1]=v,i.ambient[2]=x;const O=i.hash;(O.directionalLength!==_||O.pointLength!==y||O.spotLength!==S||O.rectAreaLength!==w||O.hemiLength!==T||O.numDirectionalShadows!==E||O.numPointShadows!==C||O.numSpotShadows!==P||O.numSpotMaps!==N)&&(i.directional.length=_,i.spot.length=S,i.rectArea.length=w,i.point.length=y,i.hemi.length=T,i.directionalShadow.length=E,i.directionalShadowMap.length=E,i.pointShadow.length=C,i.pointShadowMap.length=C,i.spotShadow.length=P,i.spotShadowMap.length=P,i.directionalShadowMatrix.length=E,i.pointShadowMatrix.length=C,i.spotLightMatrix.length=P+N-A,i.spotLightMap.length=N,i.numSpotLightShadowsWithMaps=A,O.directionalLength=_,O.pointLength=y,O.spotLength=S,O.rectAreaLength=w,O.hemiLength=T,O.numDirectionalShadows=E,O.numPointShadows=C,O.numSpotShadows=P,O.numSpotMaps=N,i.version=bw++)}function h(d,p){let m=0,v=0,x=0,_=0,y=0;const S=p.matrixWorldInverse;for(let w=0,T=d.length;w<T;w++){const E=d[w];if(E.isDirectionalLight){const C=i.directional[m];C.direction.setFromMatrixPosition(E.matrixWorld),r.setFromMatrixPosition(E.target.matrixWorld),C.direction.sub(r),C.direction.transformDirection(S),m++}else if(E.isSpotLight){const C=i.spot[x];C.position.setFromMatrixPosition(E.matrixWorld),C.position.applyMatrix4(S),C.direction.setFromMatrixPosition(E.matrixWorld),r.setFromMatrixPosition(E.target.matrixWorld),C.direction.sub(r),C.direction.transformDirection(S),x++}else if(E.isRectAreaLight){const C=i.rectArea[_];C.position.setFromMatrixPosition(E.matrixWorld),C.position.applyMatrix4(S),c.identity(),a.copy(E.matrixWorld),a.premultiply(S),c.extractRotation(a),C.halfWidth.set(E.width*.5,0,0),C.halfHeight.set(0,E.height*.5,0),C.halfWidth.applyMatrix4(c),C.halfHeight.applyMatrix4(c),_++}else if(E.isPointLight){const C=i.point[v];C.position.setFromMatrixPosition(E.matrixWorld),C.position.applyMatrix4(S),v++}else if(E.isHemisphereLight){const C=i.hemi[y];C.direction.setFromMatrixPosition(E.matrixWorld),C.direction.transformDirection(S),y++}}}return{setup:u,setupView:h,state:i}}function Dm(l,e){const t=new Ew(l,e),n=[],i=[];function r(){n.length=0,i.length=0}function a(p){n.push(p)}function c(p){i.push(p)}function u(p){t.setup(n,p)}function h(p){t.setupView(n,p)}return{init:r,state:{lightsArray:n,shadowsArray:i,lights:t},setupLights:u,setupLightsView:h,pushLight:a,pushShadow:c}}function Aw(l,e){let t=new WeakMap;function n(r,a=0){const c=t.get(r);let u;return c===void 0?(u=new Dm(l,e),t.set(r,[u])):a>=c.length?(u=new Dm(l,e),c.push(u)):u=c[a],u}function i(){t=new WeakMap}return{get:n,dispose:i}}class Jf extends on{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=A0,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class jf extends on{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.referencePosition=new I,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}const Cw=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,Pw=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function Lw(l,e,t){let n=new Wc;const i=new fe,r=new fe,a=new wt,c=new Jf({depthPacking:C0}),u=new jf,h={},d=t.maxTextureSize,p={0:Nn,1:as,2:Gi},m=new bi({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new fe},radius:{value:4}},vertexShader:Cw,fragmentShader:Pw}),v=m.clone();v.defines.HORIZONTAL_PASS=1;const x=new st;x.setAttribute("position",new Et(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const _=new sn(x,m),y=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=Ff,this.render=function(E,C,P){if(y.enabled===!1||y.autoUpdate===!1&&y.needsUpdate===!1||E.length===0)return;const N=l.getRenderTarget(),A=l.getActiveCubeFace(),L=l.getActiveMipmapLevel(),O=l.state;O.setBlending(Xi),O.buffers.color.setClear(1,1,1,1),O.buffers.depth.setTest(!0),O.setScissorTest(!1);for(let X=0,ae=E.length;X<ae;X++){const J=E[X],H=J.shadow;if(H===void 0){console.warn("THREE.WebGLShadowMap:",J,"has no shadow.");continue}if(H.autoUpdate===!1&&H.needsUpdate===!1)continue;i.copy(H.mapSize);const K=H.getFrameExtents();if(i.multiply(K),r.copy(H.mapSize),(i.x>d||i.y>d)&&(i.x>d&&(r.x=Math.floor(d/K.x),i.x=r.x*K.x,H.mapSize.x=r.x),i.y>d&&(r.y=Math.floor(d/K.y),i.y=r.y*K.y,H.mapSize.y=r.y)),H.map===null){const he=this.type!==Ks?{minFilter:Yt,magFilter:Yt}:{};H.map=new ni(i.x,i.y,he),H.map.texture.name=J.name+".shadowMap",H.camera.updateProjectionMatrix()}l.setRenderTarget(H.map),l.clear();const ie=H.getViewportCount();for(let he=0;he<ie;he++){const k=H.getViewport(he);a.set(r.x*k.x,r.y*k.y,r.x*k.z,r.y*k.w),O.viewport(a),H.updateMatrices(J,he),n=H.getFrustum(),T(C,P,H.camera,J,this.type)}H.isPointLightShadow!==!0&&this.type===Ks&&S(H,P),H.needsUpdate=!1}y.needsUpdate=!1,l.setRenderTarget(N,A,L)};function S(E,C){const P=e.update(_);m.defines.VSM_SAMPLES!==E.blurSamples&&(m.defines.VSM_SAMPLES=E.blurSamples,v.defines.VSM_SAMPLES=E.blurSamples,m.needsUpdate=!0,v.needsUpdate=!0),E.mapPass===null&&(E.mapPass=new ni(i.x,i.y)),m.uniforms.shadow_pass.value=E.map.texture,m.uniforms.resolution.value=E.mapSize,m.uniforms.radius.value=E.radius,l.setRenderTarget(E.mapPass),l.clear(),l.renderBufferDirect(C,null,P,m,_,null),v.uniforms.shadow_pass.value=E.mapPass.texture,v.uniforms.resolution.value=E.mapSize,v.uniforms.radius.value=E.radius,l.setRenderTarget(E.map),l.clear(),l.renderBufferDirect(C,null,P,v,_,null)}function w(E,C,P,N,A,L){let O=null;const X=P.isPointLight===!0?E.customDistanceMaterial:E.customDepthMaterial;if(X!==void 0?O=X:O=P.isPointLight===!0?u:c,l.localClippingEnabled&&C.clipShadows===!0&&Array.isArray(C.clippingPlanes)&&C.clippingPlanes.length!==0||C.displacementMap&&C.displacementScale!==0||C.alphaMap&&C.alphaTest>0){const ae=O.uuid,J=C.uuid;let H=h[ae];H===void 0&&(H={},h[ae]=H);let K=H[J];K===void 0&&(K=O.clone(),H[J]=K),O=K}return O.visible=C.visible,O.wireframe=C.wireframe,L===Ks?O.side=C.shadowSide!==null?C.shadowSide:C.side:O.side=C.shadowSide!==null?C.shadowSide:p[C.side],O.alphaMap=C.alphaMap,O.alphaTest=C.alphaTest,O.clipShadows=C.clipShadows,O.clippingPlanes=C.clippingPlanes,O.clipIntersection=C.clipIntersection,O.displacementMap=C.displacementMap,O.displacementScale=C.displacementScale,O.displacementBias=C.displacementBias,O.wireframeLinewidth=C.wireframeLinewidth,O.linewidth=C.linewidth,P.isPointLight===!0&&O.isMeshDistanceMaterial===!0&&(O.referencePosition.setFromMatrixPosition(P.matrixWorld),O.nearDistance=N,O.farDistance=A),O}function T(E,C,P,N,A){if(E.visible===!1)return;if(E.layers.test(C.layers)&&(E.isMesh||E.isLine||E.isPoints)&&(E.castShadow||E.receiveShadow&&A===Ks)&&(!E.frustumCulled||n.intersectsObject(E))){E.modelViewMatrix.multiplyMatrices(P.matrixWorldInverse,E.matrixWorld);const X=e.update(E),ae=E.material;if(Array.isArray(ae)){const J=X.groups;for(let H=0,K=J.length;H<K;H++){const ie=J[H],he=ae[ie.materialIndex];if(he&&he.visible){const k=w(E,he,N,P.near,P.far,A);l.renderBufferDirect(P,null,X,k,E,ie)}}}else if(ae.visible){const J=w(E,ae,N,P.near,P.far,A);l.renderBufferDirect(P,null,X,J,E,null)}}const O=E.children;for(let X=0,ae=O.length;X<ae;X++)T(O[X],C,P,N,A)}}function Rw(l,e,t){const n=t.isWebGL2;function i(){let W=!1;const Ce=new wt;let re=null;const Ae=new wt(0,0,0,0);return{setMask:function(Ee){re!==Ee&&!W&&(l.colorMask(Ee,Ee,Ee,Ee),re=Ee)},setLocked:function(Ee){W=Ee},setClear:function(Ee,ht,Ht,Ct,ii){ii===!0&&(Ee*=Ct,ht*=Ct,Ht*=Ct),Ce.set(Ee,ht,Ht,Ct),Ae.equals(Ce)===!1&&(l.clearColor(Ee,ht,Ht,Ct),Ae.copy(Ce))},reset:function(){W=!1,re=null,Ae.set(-1,0,0,0)}}}function r(){let W=!1,Ce=null,re=null,Ae=null;return{setTest:function(Ee){Ee?Ye(2929):He(2929)},setMask:function(Ee){Ce!==Ee&&!W&&(l.depthMask(Ee),Ce=Ee)},setFunc:function(Ee){if(re!==Ee){if(Ee)switch(Ee){case jg:l.depthFunc(512);break;case Qg:l.depthFunc(519);break;case Kg:l.depthFunc(513);break;case Ic:l.depthFunc(515);break;case $g:l.depthFunc(514);break;case e0:l.depthFunc(518);break;case t0:l.depthFunc(516);break;case n0:l.depthFunc(517);break;default:l.depthFunc(515)}else l.depthFunc(515);re=Ee}},setLocked:function(Ee){W=Ee},setClear:function(Ee){Ae!==Ee&&(l.clearDepth(Ee),Ae=Ee)},reset:function(){W=!1,Ce=null,re=null,Ae=null}}}function a(){let W=!1,Ce=null,re=null,Ae=null,Ee=null,ht=null,Ht=null,Ct=null,ii=null;return{setTest:function(Pt){W||(Pt?Ye(2960):He(2960))},setMask:function(Pt){Ce!==Pt&&!W&&(l.stencilMask(Pt),Ce=Pt)},setFunc:function(Pt,Un,dn){(re!==Pt||Ae!==Un||Ee!==dn)&&(l.stencilFunc(Pt,Un,dn),re=Pt,Ae=Un,Ee=dn)},setOp:function(Pt,Un,dn){(ht!==Pt||Ht!==Un||Ct!==dn)&&(l.stencilOp(Pt,Un,dn),ht=Pt,Ht=Un,Ct=dn)},setLocked:function(Pt){W=Pt},setClear:function(Pt){ii!==Pt&&(l.clearStencil(Pt),ii=Pt)},reset:function(){W=!1,Ce=null,re=null,Ae=null,Ee=null,ht=null,Ht=null,Ct=null,ii=null}}}const c=new i,u=new r,h=new a,d=new WeakMap,p=new WeakMap;let m={},v={},x=new WeakMap,_=[],y=null,S=!1,w=null,T=null,E=null,C=null,P=null,N=null,A=null,L=!1,O=null,X=null,ae=null,J=null,H=null;const K=l.getParameter(35661);let ie=!1,he=0;const k=l.getParameter(7938);k.indexOf("WebGL")!==-1?(he=parseFloat(/^WebGL (\d)/.exec(k)[1]),ie=he>=1):k.indexOf("OpenGL ES")!==-1&&(he=parseFloat(/^OpenGL ES (\d)/.exec(k)[1]),ie=he>=2);let U=null,B={};const le=l.getParameter(3088),ne=l.getParameter(2978),de=new wt().fromArray(le),we=new wt().fromArray(ne);function Be(W,Ce,re){const Ae=new Uint8Array(4),Ee=l.createTexture();l.bindTexture(W,Ee),l.texParameteri(W,10241,9728),l.texParameteri(W,10240,9728);for(let ht=0;ht<re;ht++)l.texImage2D(Ce+ht,0,6408,1,1,0,6408,5121,Ae);return Ee}const se={};se[3553]=Be(3553,3553,1),se[34067]=Be(34067,34069,6),c.setClear(0,0,0,1),u.setClear(1),h.setClear(0),Ye(2929),u.setFunc(Ic),Me(!1),Qe(Zh),Ye(2884),ve(Xi);function Ye(W){m[W]!==!0&&(l.enable(W),m[W]=!0)}function He(W){m[W]!==!1&&(l.disable(W),m[W]=!1)}function Xe(W,Ce){return v[W]!==Ce?(l.bindFramebuffer(W,Ce),v[W]=Ce,n&&(W===36009&&(v[36160]=Ce),W===36160&&(v[36009]=Ce)),!0):!1}function ye(W,Ce){let re=_,Ae=!1;if(W)if(re=x.get(Ce),re===void 0&&(re=[],x.set(Ce,re)),W.isWebGLMultipleRenderTargets){const Ee=W.texture;if(re.length!==Ee.length||re[0]!==36064){for(let ht=0,Ht=Ee.length;ht<Ht;ht++)re[ht]=36064+ht;re.length=Ee.length,Ae=!0}}else re[0]!==36064&&(re[0]=36064,Ae=!0);else re[0]!==1029&&(re[0]=1029,Ae=!0);Ae&&(t.isWebGL2?l.drawBuffers(re):e.get("WEBGL_draw_buffers").drawBuffersWEBGL(re))}function qe(W){return y!==W?(l.useProgram(W),y=W,!0):!1}const ue={[Yr]:32774,[Bg]:32778,[kg]:32779};if(n)ue[Kh]=32775,ue[$h]=32776;else{const W=e.get("EXT_blend_minmax");W!==null&&(ue[Kh]=W.MIN_EXT,ue[$h]=W.MAX_EXT)}const te={[Vg]:0,[Gg]:1,[Hg]:768,[Uf]:770,[Jg]:776,[Yg]:774,[Xg]:772,[Wg]:769,[Bf]:771,[Zg]:775,[qg]:773};function ve(W,Ce,re,Ae,Ee,ht,Ht,Ct){if(W===Xi){S===!0&&(He(3042),S=!1);return}if(S===!1&&(Ye(3042),S=!0),W!==Ug){if(W!==w||Ct!==L){if((T!==Yr||P!==Yr)&&(l.blendEquation(32774),T=Yr,P=Yr),Ct)switch(W){case es:l.blendFuncSeparate(1,771,1,771);break;case Jh:l.blendFunc(1,1);break;case jh:l.blendFuncSeparate(0,769,0,1);break;case Qh:l.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",W);break}else switch(W){case es:l.blendFuncSeparate(770,771,1,771);break;case Jh:l.blendFunc(770,1);break;case jh:l.blendFuncSeparate(0,769,0,1);break;case Qh:l.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",W);break}E=null,C=null,N=null,A=null,w=W,L=Ct}return}Ee=Ee||Ce,ht=ht||re,Ht=Ht||Ae,(Ce!==T||Ee!==P)&&(l.blendEquationSeparate(ue[Ce],ue[Ee]),T=Ce,P=Ee),(re!==E||Ae!==C||ht!==N||Ht!==A)&&(l.blendFuncSeparate(te[re],te[Ae],te[ht],te[Ht]),E=re,C=Ae,N=ht,A=Ht),w=W,L=null}function ze(W,Ce){W.side===Gi?He(2884):Ye(2884);let re=W.side===Nn;Ce&&(re=!re),Me(re),W.blending===es&&W.transparent===!1?ve(Xi):ve(W.blending,W.blendEquation,W.blendSrc,W.blendDst,W.blendEquationAlpha,W.blendSrcAlpha,W.blendDstAlpha,W.premultipliedAlpha),u.setFunc(W.depthFunc),u.setTest(W.depthTest),u.setMask(W.depthWrite),c.setMask(W.colorWrite);const Ae=W.stencilWrite;h.setTest(Ae),Ae&&(h.setMask(W.stencilWriteMask),h.setFunc(W.stencilFunc,W.stencilRef,W.stencilFuncMask),h.setOp(W.stencilFail,W.stencilZFail,W.stencilZPass)),Ve(W.polygonOffset,W.polygonOffsetFactor,W.polygonOffsetUnits),W.alphaToCoverage===!0?Ye(32926):He(32926)}function Me(W){O!==W&&(W?l.frontFace(2304):l.frontFace(2305),O=W)}function Qe(W){W!==Fg?(Ye(2884),W!==X&&(W===Zh?l.cullFace(1029):W===Og?l.cullFace(1028):l.cullFace(1032))):He(2884),X=W}function We(W){W!==ae&&(ie&&l.lineWidth(W),ae=W)}function Ve(W,Ce,re){W?(Ye(32823),(J!==Ce||H!==re)&&(l.polygonOffset(Ce,re),J=Ce,H=re)):He(32823)}function yt(W){W?Ye(3089):He(3089)}function Mt(W){W===void 0&&(W=33984+K-1),U!==W&&(l.activeTexture(W),U=W)}function F(W,Ce){U===null&&Mt();let re=B[U];re===void 0&&(re={type:void 0,texture:void 0},B[U]=re),(re.type!==W||re.texture!==Ce)&&(l.bindTexture(W,Ce||se[W]),re.type=W,re.texture=Ce)}function R(){const W=B[U];W!==void 0&&W.type!==void 0&&(l.bindTexture(W.type,null),W.type=void 0,W.texture=void 0)}function Q(){try{l.compressedTexImage2D.apply(l,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function pe(){try{l.texSubImage2D.apply(l,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function xe(){try{l.texSubImage3D.apply(l,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function be(){try{l.compressedTexSubImage2D.apply(l,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function Ze(){try{l.texStorage2D.apply(l,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function $(){try{l.texStorage3D.apply(l,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function Fe(){try{l.texImage2D.apply(l,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function Pe(){try{l.texImage3D.apply(l,arguments)}catch(W){console.error("THREE.WebGLState:",W)}}function Ue(W){de.equals(W)===!1&&(l.scissor(W.x,W.y,W.z,W.w),de.copy(W))}function Ie(W){we.equals(W)===!1&&(l.viewport(W.x,W.y,W.z,W.w),we.copy(W))}function tt(W,Ce){let re=p.get(Ce);re===void 0&&(re=new WeakMap,p.set(Ce,re));let Ae=re.get(W);Ae===void 0&&(Ae=l.getUniformBlockIndex(Ce,W.name),re.set(W,Ae))}function pt(W,Ce){const Ae=p.get(Ce).get(W);d.get(W)!==Ae&&(l.uniformBlockBinding(Ce,Ae,W.__bindingPointIndex),d.set(W,Ae))}function Dt(){l.disable(3042),l.disable(2884),l.disable(2929),l.disable(32823),l.disable(3089),l.disable(2960),l.disable(32926),l.blendEquation(32774),l.blendFunc(1,0),l.blendFuncSeparate(1,0,1,0),l.colorMask(!0,!0,!0,!0),l.clearColor(0,0,0,0),l.depthMask(!0),l.depthFunc(513),l.clearDepth(1),l.stencilMask(4294967295),l.stencilFunc(519,0,4294967295),l.stencilOp(7680,7680,7680),l.clearStencil(0),l.cullFace(1029),l.frontFace(2305),l.polygonOffset(0,0),l.activeTexture(33984),l.bindFramebuffer(36160,null),n===!0&&(l.bindFramebuffer(36009,null),l.bindFramebuffer(36008,null)),l.useProgram(null),l.lineWidth(1),l.scissor(0,0,l.canvas.width,l.canvas.height),l.viewport(0,0,l.canvas.width,l.canvas.height),m={},U=null,B={},v={},x=new WeakMap,_=[],y=null,S=!1,w=null,T=null,E=null,C=null,P=null,N=null,A=null,L=!1,O=null,X=null,ae=null,J=null,H=null,de.set(0,0,l.canvas.width,l.canvas.height),we.set(0,0,l.canvas.width,l.canvas.height),c.reset(),u.reset(),h.reset()}return{buffers:{color:c,depth:u,stencil:h},enable:Ye,disable:He,bindFramebuffer:Xe,drawBuffers:ye,useProgram:qe,setBlending:ve,setMaterial:ze,setFlipSided:Me,setCullFace:Qe,setLineWidth:We,setPolygonOffset:Ve,setScissorTest:yt,activeTexture:Mt,bindTexture:F,unbindTexture:R,compressedTexImage2D:Q,texImage2D:Fe,texImage3D:Pe,updateUBOMapping:tt,uniformBlockBinding:pt,texStorage2D:Ze,texStorage3D:$,texSubImage2D:pe,texSubImage3D:xe,compressedTexSubImage2D:be,scissor:Ue,viewport:Ie,reset:Dt}}function Iw(l,e,t,n,i,r,a){const c=i.isWebGL2,u=i.maxTextures,h=i.maxCubemapSize,d=i.maxTextureSize,p=i.maxSamples,m=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,v=/OculusBrowser/g.test(navigator.userAgent),x=new WeakMap;let _;const y=new WeakMap;let S=!1;try{S=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function w(F,R){return S?new OffscreenCanvas(F,R):la("canvas")}function T(F,R,Q,pe){let xe=1;if((F.width>pe||F.height>pe)&&(xe=pe/Math.max(F.width,F.height)),xe<1||R===!0)if(typeof HTMLImageElement<"u"&&F instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&F instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&F instanceof ImageBitmap){const be=R?Fc:Math.floor,Ze=be(xe*F.width),$=be(xe*F.height);_===void 0&&(_=w(Ze,$));const Fe=Q?w(Ze,$):_;return Fe.width=Ze,Fe.height=$,Fe.getContext("2d").drawImage(F,0,0,Ze,$),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+F.width+"x"+F.height+") to ("+Ze+"x"+$+")."),Fe}else return"data"in F&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+F.width+"x"+F.height+")."),F;return F}function E(F){return wf(F.width)&&wf(F.height)}function C(F){return c?!1:F.wrapS!==vn||F.wrapT!==vn||F.minFilter!==Yt&&F.minFilter!==Vt}function P(F,R){return F.generateMipmaps&&R&&F.minFilter!==Yt&&F.minFilter!==Vt}function N(F){l.generateMipmap(F)}function A(F,R,Q,pe,xe=!1){if(c===!1)return R;if(F!==null){if(l[F]!==void 0)return l[F];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+F+"'")}let be=R;return R===6403&&(Q===5126&&(be=33326),Q===5131&&(be=33325),Q===5121&&(be=33321)),R===33319&&(Q===5126&&(be=33328),Q===5131&&(be=33327),Q===5121&&(be=33323)),R===6408&&(Q===5126&&(be=34836),Q===5131&&(be=34842),Q===5121&&(be=pe===At&&xe===!1?35907:32856),Q===32819&&(be=32854),Q===32820&&(be=32855)),(be===33325||be===33326||be===33327||be===33328||be===34842||be===34836)&&e.get("EXT_color_buffer_float"),be}function L(F,R,Q){return P(F,Q)===!0||F.isFramebufferTexture&&F.minFilter!==Yt&&F.minFilter!==Vt?Math.log2(Math.max(R.width,R.height))+1:F.mipmaps!==void 0&&F.mipmaps.length>0?F.mipmaps.length:F.isCompressedTexture&&Array.isArray(F.image)?R.mipmaps.length:1}function O(F){return F===Yt||F===Dc||F===zc?9728:9729}function X(F){const R=F.target;R.removeEventListener("dispose",X),J(R),R.isVideoTexture&&x.delete(R)}function ae(F){const R=F.target;R.removeEventListener("dispose",ae),K(R)}function J(F){const R=n.get(F);if(R.__webglInit===void 0)return;const Q=F.source,pe=y.get(Q);if(pe){const xe=pe[R.__cacheKey];xe.usedTimes--,xe.usedTimes===0&&H(F),Object.keys(pe).length===0&&y.delete(Q)}n.remove(F)}function H(F){const R=n.get(F);l.deleteTexture(R.__webglTexture);const Q=F.source,pe=y.get(Q);delete pe[R.__cacheKey],a.memory.textures--}function K(F){const R=F.texture,Q=n.get(F),pe=n.get(R);if(pe.__webglTexture!==void 0&&(l.deleteTexture(pe.__webglTexture),a.memory.textures--),F.depthTexture&&F.depthTexture.dispose(),F.isWebGLCubeRenderTarget)for(let xe=0;xe<6;xe++)l.deleteFramebuffer(Q.__webglFramebuffer[xe]),Q.__webglDepthbuffer&&l.deleteRenderbuffer(Q.__webglDepthbuffer[xe]);else{if(l.deleteFramebuffer(Q.__webglFramebuffer),Q.__webglDepthbuffer&&l.deleteRenderbuffer(Q.__webglDepthbuffer),Q.__webglMultisampledFramebuffer&&l.deleteFramebuffer(Q.__webglMultisampledFramebuffer),Q.__webglColorRenderbuffer)for(let xe=0;xe<Q.__webglColorRenderbuffer.length;xe++)Q.__webglColorRenderbuffer[xe]&&l.deleteRenderbuffer(Q.__webglColorRenderbuffer[xe]);Q.__webglDepthRenderbuffer&&l.deleteRenderbuffer(Q.__webglDepthRenderbuffer)}if(F.isWebGLMultipleRenderTargets)for(let xe=0,be=R.length;xe<be;xe++){const Ze=n.get(R[xe]);Ze.__webglTexture&&(l.deleteTexture(Ze.__webglTexture),a.memory.textures--),n.remove(R[xe])}n.remove(R),n.remove(F)}let ie=0;function he(){ie=0}function k(){const F=ie;return F>=u&&console.warn("THREE.WebGLTextures: Trying to use "+F+" texture units while this GPU supports only "+u),ie+=1,F}function U(F){const R=[];return R.push(F.wrapS),R.push(F.wrapT),R.push(F.magFilter),R.push(F.minFilter),R.push(F.anisotropy),R.push(F.internalFormat),R.push(F.format),R.push(F.type),R.push(F.generateMipmaps),R.push(F.premultiplyAlpha),R.push(F.flipY),R.push(F.unpackAlignment),R.push(F.encoding),R.join()}function B(F,R){const Q=n.get(F);if(F.isVideoTexture&&yt(F),F.isRenderTargetTexture===!1&&F.version>0&&Q.__version!==F.version){const pe=F.image;if(pe===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(pe.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{He(Q,F,R);return}}t.activeTexture(33984+R),t.bindTexture(3553,Q.__webglTexture)}function le(F,R){const Q=n.get(F);if(F.version>0&&Q.__version!==F.version){He(Q,F,R);return}t.activeTexture(33984+R),t.bindTexture(35866,Q.__webglTexture)}function ne(F,R){const Q=n.get(F);if(F.version>0&&Q.__version!==F.version){He(Q,F,R);return}t.activeTexture(33984+R),t.bindTexture(32879,Q.__webglTexture)}function de(F,R){const Q=n.get(F);if(F.version>0&&Q.__version!==F.version){Xe(Q,F,R);return}t.activeTexture(33984+R),t.bindTexture(34067,Q.__webglTexture)}const we={[ta]:10497,[vn]:33071,[na]:33648},Be={[Yt]:9728,[Dc]:9984,[zc]:9986,[Vt]:9729,[Vf]:9985,[hs]:9987};function se(F,R,Q){if(Q?(l.texParameteri(F,10242,we[R.wrapS]),l.texParameteri(F,10243,we[R.wrapT]),(F===32879||F===35866)&&l.texParameteri(F,32882,we[R.wrapR]),l.texParameteri(F,10240,Be[R.magFilter]),l.texParameteri(F,10241,Be[R.minFilter])):(l.texParameteri(F,10242,33071),l.texParameteri(F,10243,33071),(F===32879||F===35866)&&l.texParameteri(F,32882,33071),(R.wrapS!==vn||R.wrapT!==vn)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),l.texParameteri(F,10240,O(R.magFilter)),l.texParameteri(F,10241,O(R.minFilter)),R.minFilter!==Yt&&R.minFilter!==Vt&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),e.has("EXT_texture_filter_anisotropic")===!0){const pe=e.get("EXT_texture_filter_anisotropic");if(R.type===Hi&&e.has("OES_texture_float_linear")===!1||c===!1&&R.type===ro&&e.has("OES_texture_half_float_linear")===!1)return;(R.anisotropy>1||n.get(R).__currentAnisotropy)&&(l.texParameterf(F,pe.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(R.anisotropy,i.getMaxAnisotropy())),n.get(R).__currentAnisotropy=R.anisotropy)}}function Ye(F,R){let Q=!1;F.__webglInit===void 0&&(F.__webglInit=!0,R.addEventListener("dispose",X));const pe=R.source;let xe=y.get(pe);xe===void 0&&(xe={},y.set(pe,xe));const be=U(R);if(be!==F.__cacheKey){xe[be]===void 0&&(xe[be]={texture:l.createTexture(),usedTimes:0},a.memory.textures++,Q=!0),xe[be].usedTimes++;const Ze=xe[F.__cacheKey];Ze!==void 0&&(xe[F.__cacheKey].usedTimes--,Ze.usedTimes===0&&H(R)),F.__cacheKey=be,F.__webglTexture=xe[be].texture}return Q}function He(F,R,Q){let pe=3553;R.isDataArrayTexture&&(pe=35866),R.isData3DTexture&&(pe=32879);const xe=Ye(F,R),be=R.source;if(t.activeTexture(33984+Q),t.bindTexture(pe,F.__webglTexture),be.version!==be.__currentVersion||xe===!0){l.pixelStorei(37440,R.flipY),l.pixelStorei(37441,R.premultiplyAlpha),l.pixelStorei(3317,R.unpackAlignment),l.pixelStorei(37443,0);const Ze=C(R)&&E(R.image)===!1;let $=T(R.image,Ze,!1,d);$=Mt(R,$);const Fe=E($)||c,Pe=r.convert(R.format,R.encoding);let Ue=r.convert(R.type),Ie=A(R.internalFormat,Pe,Ue,R.encoding,R.isVideoTexture);se(pe,R,Fe);let tt;const pt=R.mipmaps,Dt=c&&R.isVideoTexture!==!0,W=be.__currentVersion===void 0||xe===!0,Ce=L(R,$,Fe);if(R.isDepthTexture)Ie=6402,c?R.type===Hi?Ie=36012:R.type===gr?Ie=33190:R.type===ts?Ie=35056:Ie=33189:R.type===Hi&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),R.format===xr&&Ie===6402&&R.type!==Gf&&R.type!==gr&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),R.type=gr,Ue=r.convert(R.type)),R.format===ls&&Ie===6402&&(Ie=34041,R.type!==ts&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),R.type=ts,Ue=r.convert(R.type))),W&&(Dt?t.texStorage2D(3553,1,Ie,$.width,$.height):t.texImage2D(3553,0,Ie,$.width,$.height,0,Pe,Ue,null));else if(R.isDataTexture)if(pt.length>0&&Fe){Dt&&W&&t.texStorage2D(3553,Ce,Ie,pt[0].width,pt[0].height);for(let re=0,Ae=pt.length;re<Ae;re++)tt=pt[re],Dt?t.texSubImage2D(3553,re,0,0,tt.width,tt.height,Pe,Ue,tt.data):t.texImage2D(3553,re,Ie,tt.width,tt.height,0,Pe,Ue,tt.data);R.generateMipmaps=!1}else Dt?(W&&t.texStorage2D(3553,Ce,Ie,$.width,$.height),t.texSubImage2D(3553,0,0,0,$.width,$.height,Pe,Ue,$.data)):t.texImage2D(3553,0,Ie,$.width,$.height,0,Pe,Ue,$.data);else if(R.isCompressedTexture){Dt&&W&&t.texStorage2D(3553,Ce,Ie,pt[0].width,pt[0].height);for(let re=0,Ae=pt.length;re<Ae;re++)tt=pt[re],R.format!==ti?Pe!==null?Dt?t.compressedTexSubImage2D(3553,re,0,0,tt.width,tt.height,Pe,tt.data):t.compressedTexImage2D(3553,re,Ie,tt.width,tt.height,0,tt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Dt?t.texSubImage2D(3553,re,0,0,tt.width,tt.height,Pe,Ue,tt.data):t.texImage2D(3553,re,Ie,tt.width,tt.height,0,Pe,Ue,tt.data)}else if(R.isDataArrayTexture)Dt?(W&&t.texStorage3D(35866,Ce,Ie,$.width,$.height,$.depth),t.texSubImage3D(35866,0,0,0,0,$.width,$.height,$.depth,Pe,Ue,$.data)):t.texImage3D(35866,0,Ie,$.width,$.height,$.depth,0,Pe,Ue,$.data);else if(R.isData3DTexture)Dt?(W&&t.texStorage3D(32879,Ce,Ie,$.width,$.height,$.depth),t.texSubImage3D(32879,0,0,0,0,$.width,$.height,$.depth,Pe,Ue,$.data)):t.texImage3D(32879,0,Ie,$.width,$.height,$.depth,0,Pe,Ue,$.data);else if(R.isFramebufferTexture){if(W)if(Dt)t.texStorage2D(3553,Ce,Ie,$.width,$.height);else{let re=$.width,Ae=$.height;for(let Ee=0;Ee<Ce;Ee++)t.texImage2D(3553,Ee,Ie,re,Ae,0,Pe,Ue,null),re>>=1,Ae>>=1}}else if(pt.length>0&&Fe){Dt&&W&&t.texStorage2D(3553,Ce,Ie,pt[0].width,pt[0].height);for(let re=0,Ae=pt.length;re<Ae;re++)tt=pt[re],Dt?t.texSubImage2D(3553,re,0,0,Pe,Ue,tt):t.texImage2D(3553,re,Ie,Pe,Ue,tt);R.generateMipmaps=!1}else Dt?(W&&t.texStorage2D(3553,Ce,Ie,$.width,$.height),t.texSubImage2D(3553,0,0,0,Pe,Ue,$)):t.texImage2D(3553,0,Ie,Pe,Ue,$);P(R,Fe)&&N(pe),be.__currentVersion=be.version,R.onUpdate&&R.onUpdate(R)}F.__version=R.version}function Xe(F,R,Q){if(R.image.length!==6)return;const pe=Ye(F,R),xe=R.source;if(t.activeTexture(33984+Q),t.bindTexture(34067,F.__webglTexture),xe.version!==xe.__currentVersion||pe===!0){l.pixelStorei(37440,R.flipY),l.pixelStorei(37441,R.premultiplyAlpha),l.pixelStorei(3317,R.unpackAlignment),l.pixelStorei(37443,0);const be=R.isCompressedTexture||R.image[0].isCompressedTexture,Ze=R.image[0]&&R.image[0].isDataTexture,$=[];for(let re=0;re<6;re++)!be&&!Ze?$[re]=T(R.image[re],!1,!0,h):$[re]=Ze?R.image[re].image:R.image[re],$[re]=Mt(R,$[re]);const Fe=$[0],Pe=E(Fe)||c,Ue=r.convert(R.format,R.encoding),Ie=r.convert(R.type),tt=A(R.internalFormat,Ue,Ie,R.encoding),pt=c&&R.isVideoTexture!==!0,Dt=xe.__currentVersion===void 0||pe===!0;let W=L(R,Fe,Pe);se(34067,R,Pe);let Ce;if(be){pt&&Dt&&t.texStorage2D(34067,W,tt,Fe.width,Fe.height);for(let re=0;re<6;re++){Ce=$[re].mipmaps;for(let Ae=0;Ae<Ce.length;Ae++){const Ee=Ce[Ae];R.format!==ti?Ue!==null?pt?t.compressedTexSubImage2D(34069+re,Ae,0,0,Ee.width,Ee.height,Ue,Ee.data):t.compressedTexImage2D(34069+re,Ae,tt,Ee.width,Ee.height,0,Ee.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):pt?t.texSubImage2D(34069+re,Ae,0,0,Ee.width,Ee.height,Ue,Ie,Ee.data):t.texImage2D(34069+re,Ae,tt,Ee.width,Ee.height,0,Ue,Ie,Ee.data)}}}else{Ce=R.mipmaps,pt&&Dt&&(Ce.length>0&&W++,t.texStorage2D(34067,W,tt,$[0].width,$[0].height));for(let re=0;re<6;re++)if(Ze){pt?t.texSubImage2D(34069+re,0,0,0,$[re].width,$[re].height,Ue,Ie,$[re].data):t.texImage2D(34069+re,0,tt,$[re].width,$[re].height,0,Ue,Ie,$[re].data);for(let Ae=0;Ae<Ce.length;Ae++){const ht=Ce[Ae].image[re].image;pt?t.texSubImage2D(34069+re,Ae+1,0,0,ht.width,ht.height,Ue,Ie,ht.data):t.texImage2D(34069+re,Ae+1,tt,ht.width,ht.height,0,Ue,Ie,ht.data)}}else{pt?t.texSubImage2D(34069+re,0,0,0,Ue,Ie,$[re]):t.texImage2D(34069+re,0,tt,Ue,Ie,$[re]);for(let Ae=0;Ae<Ce.length;Ae++){const Ee=Ce[Ae];pt?t.texSubImage2D(34069+re,Ae+1,0,0,Ue,Ie,Ee.image[re]):t.texImage2D(34069+re,Ae+1,tt,Ue,Ie,Ee.image[re])}}}P(R,Pe)&&N(34067),xe.__currentVersion=xe.version,R.onUpdate&&R.onUpdate(R)}F.__version=R.version}function ye(F,R,Q,pe,xe){const be=r.convert(Q.format,Q.encoding),Ze=r.convert(Q.type),$=A(Q.internalFormat,be,Ze,Q.encoding);n.get(R).__hasExternalTextures||(xe===32879||xe===35866?t.texImage3D(xe,0,$,R.width,R.height,R.depth,0,be,Ze,null):t.texImage2D(xe,0,$,R.width,R.height,0,be,Ze,null)),t.bindFramebuffer(36160,F),Ve(R)?m.framebufferTexture2DMultisampleEXT(36160,pe,xe,n.get(Q).__webglTexture,0,We(R)):l.framebufferTexture2D(36160,pe,xe,n.get(Q).__webglTexture,0),t.bindFramebuffer(36160,null)}function qe(F,R,Q){if(l.bindRenderbuffer(36161,F),R.depthBuffer&&!R.stencilBuffer){let pe=33189;if(Q||Ve(R)){const xe=R.depthTexture;xe&&xe.isDepthTexture&&(xe.type===Hi?pe=36012:xe.type===gr&&(pe=33190));const be=We(R);Ve(R)?m.renderbufferStorageMultisampleEXT(36161,be,pe,R.width,R.height):l.renderbufferStorageMultisample(36161,be,pe,R.width,R.height)}else l.renderbufferStorage(36161,pe,R.width,R.height);l.framebufferRenderbuffer(36160,36096,36161,F)}else if(R.depthBuffer&&R.stencilBuffer){const pe=We(R);Q&&Ve(R)===!1?l.renderbufferStorageMultisample(36161,pe,35056,R.width,R.height):Ve(R)?m.renderbufferStorageMultisampleEXT(36161,pe,35056,R.width,R.height):l.renderbufferStorage(36161,34041,R.width,R.height),l.framebufferRenderbuffer(36160,33306,36161,F)}else{const pe=R.isWebGLMultipleRenderTargets===!0?R.texture:[R.texture];for(let xe=0;xe<pe.length;xe++){const be=pe[xe],Ze=r.convert(be.format,be.encoding),$=r.convert(be.type),Fe=A(be.internalFormat,Ze,$,be.encoding),Pe=We(R);Q&&Ve(R)===!1?l.renderbufferStorageMultisample(36161,Pe,Fe,R.width,R.height):Ve(R)?m.renderbufferStorageMultisampleEXT(36161,Pe,Fe,R.width,R.height):l.renderbufferStorage(36161,Fe,R.width,R.height)}}l.bindRenderbuffer(36161,null)}function ue(F,R){if(R&&R.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(36160,F),!(R.depthTexture&&R.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!n.get(R.depthTexture).__webglTexture||R.depthTexture.image.width!==R.width||R.depthTexture.image.height!==R.height)&&(R.depthTexture.image.width=R.width,R.depthTexture.image.height=R.height,R.depthTexture.needsUpdate=!0),B(R.depthTexture,0);const pe=n.get(R.depthTexture).__webglTexture,xe=We(R);if(R.depthTexture.format===xr)Ve(R)?m.framebufferTexture2DMultisampleEXT(36160,36096,3553,pe,0,xe):l.framebufferTexture2D(36160,36096,3553,pe,0);else if(R.depthTexture.format===ls)Ve(R)?m.framebufferTexture2DMultisampleEXT(36160,33306,3553,pe,0,xe):l.framebufferTexture2D(36160,33306,3553,pe,0);else throw new Error("Unknown depthTexture format")}function te(F){const R=n.get(F),Q=F.isWebGLCubeRenderTarget===!0;if(F.depthTexture&&!R.__autoAllocateDepthBuffer){if(Q)throw new Error("target.depthTexture not supported in Cube render targets");ue(R.__webglFramebuffer,F)}else if(Q){R.__webglDepthbuffer=[];for(let pe=0;pe<6;pe++)t.bindFramebuffer(36160,R.__webglFramebuffer[pe]),R.__webglDepthbuffer[pe]=l.createRenderbuffer(),qe(R.__webglDepthbuffer[pe],F,!1)}else t.bindFramebuffer(36160,R.__webglFramebuffer),R.__webglDepthbuffer=l.createRenderbuffer(),qe(R.__webglDepthbuffer,F,!1);t.bindFramebuffer(36160,null)}function ve(F,R,Q){const pe=n.get(F);R!==void 0&&ye(pe.__webglFramebuffer,F,F.texture,36064,3553),Q!==void 0&&te(F)}function ze(F){const R=F.texture,Q=n.get(F),pe=n.get(R);F.addEventListener("dispose",ae),F.isWebGLMultipleRenderTargets!==!0&&(pe.__webglTexture===void 0&&(pe.__webglTexture=l.createTexture()),pe.__version=R.version,a.memory.textures++);const xe=F.isWebGLCubeRenderTarget===!0,be=F.isWebGLMultipleRenderTargets===!0,Ze=E(F)||c;if(xe){Q.__webglFramebuffer=[];for(let $=0;$<6;$++)Q.__webglFramebuffer[$]=l.createFramebuffer()}else{if(Q.__webglFramebuffer=l.createFramebuffer(),be)if(i.drawBuffers){const $=F.texture;for(let Fe=0,Pe=$.length;Fe<Pe;Fe++){const Ue=n.get($[Fe]);Ue.__webglTexture===void 0&&(Ue.__webglTexture=l.createTexture(),a.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(c&&F.samples>0&&Ve(F)===!1){const $=be?R:[R];Q.__webglMultisampledFramebuffer=l.createFramebuffer(),Q.__webglColorRenderbuffer=[],t.bindFramebuffer(36160,Q.__webglMultisampledFramebuffer);for(let Fe=0;Fe<$.length;Fe++){const Pe=$[Fe];Q.__webglColorRenderbuffer[Fe]=l.createRenderbuffer(),l.bindRenderbuffer(36161,Q.__webglColorRenderbuffer[Fe]);const Ue=r.convert(Pe.format,Pe.encoding),Ie=r.convert(Pe.type),tt=A(Pe.internalFormat,Ue,Ie,Pe.encoding),pt=We(F);l.renderbufferStorageMultisample(36161,pt,tt,F.width,F.height),l.framebufferRenderbuffer(36160,36064+Fe,36161,Q.__webglColorRenderbuffer[Fe])}l.bindRenderbuffer(36161,null),F.depthBuffer&&(Q.__webglDepthRenderbuffer=l.createRenderbuffer(),qe(Q.__webglDepthRenderbuffer,F,!0)),t.bindFramebuffer(36160,null)}}if(xe){t.bindTexture(34067,pe.__webglTexture),se(34067,R,Ze);for(let $=0;$<6;$++)ye(Q.__webglFramebuffer[$],F,R,36064,34069+$);P(R,Ze)&&N(34067),t.unbindTexture()}else if(be){const $=F.texture;for(let Fe=0,Pe=$.length;Fe<Pe;Fe++){const Ue=$[Fe],Ie=n.get(Ue);t.bindTexture(3553,Ie.__webglTexture),se(3553,Ue,Ze),ye(Q.__webglFramebuffer,F,Ue,36064+Fe,3553),P(Ue,Ze)&&N(3553)}t.unbindTexture()}else{let $=3553;(F.isWebGL3DRenderTarget||F.isWebGLArrayRenderTarget)&&(c?$=F.isWebGL3DRenderTarget?32879:35866:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),t.bindTexture($,pe.__webglTexture),se($,R,Ze),ye(Q.__webglFramebuffer,F,R,36064,$),P(R,Ze)&&N($),t.unbindTexture()}F.depthBuffer&&te(F)}function Me(F){const R=E(F)||c,Q=F.isWebGLMultipleRenderTargets===!0?F.texture:[F.texture];for(let pe=0,xe=Q.length;pe<xe;pe++){const be=Q[pe];if(P(be,R)){const Ze=F.isWebGLCubeRenderTarget?34067:3553,$=n.get(be).__webglTexture;t.bindTexture(Ze,$),N(Ze),t.unbindTexture()}}}function Qe(F){if(c&&F.samples>0&&Ve(F)===!1){const R=F.isWebGLMultipleRenderTargets?F.texture:[F.texture],Q=F.width,pe=F.height;let xe=16384;const be=[],Ze=F.stencilBuffer?33306:36096,$=n.get(F),Fe=F.isWebGLMultipleRenderTargets===!0;if(Fe)for(let Pe=0;Pe<R.length;Pe++)t.bindFramebuffer(36160,$.__webglMultisampledFramebuffer),l.framebufferRenderbuffer(36160,36064+Pe,36161,null),t.bindFramebuffer(36160,$.__webglFramebuffer),l.framebufferTexture2D(36009,36064+Pe,3553,null,0);t.bindFramebuffer(36008,$.__webglMultisampledFramebuffer),t.bindFramebuffer(36009,$.__webglFramebuffer);for(let Pe=0;Pe<R.length;Pe++){be.push(36064+Pe),F.depthBuffer&&be.push(Ze);const Ue=$.__ignoreDepthValues!==void 0?$.__ignoreDepthValues:!1;if(Ue===!1&&(F.depthBuffer&&(xe|=256),F.stencilBuffer&&(xe|=1024)),Fe&&l.framebufferRenderbuffer(36008,36064,36161,$.__webglColorRenderbuffer[Pe]),Ue===!0&&(l.invalidateFramebuffer(36008,[Ze]),l.invalidateFramebuffer(36009,[Ze])),Fe){const Ie=n.get(R[Pe]).__webglTexture;l.framebufferTexture2D(36009,36064,3553,Ie,0)}l.blitFramebuffer(0,0,Q,pe,0,0,Q,pe,xe,9728),v&&l.invalidateFramebuffer(36008,be)}if(t.bindFramebuffer(36008,null),t.bindFramebuffer(36009,null),Fe)for(let Pe=0;Pe<R.length;Pe++){t.bindFramebuffer(36160,$.__webglMultisampledFramebuffer),l.framebufferRenderbuffer(36160,36064+Pe,36161,$.__webglColorRenderbuffer[Pe]);const Ue=n.get(R[Pe]).__webglTexture;t.bindFramebuffer(36160,$.__webglFramebuffer),l.framebufferTexture2D(36009,36064+Pe,3553,Ue,0)}t.bindFramebuffer(36009,$.__webglMultisampledFramebuffer)}}function We(F){return Math.min(p,F.samples)}function Ve(F){const R=n.get(F);return c&&F.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&R.__useRenderToTexture!==!1}function yt(F){const R=a.render.frame;x.get(F)!==R&&(x.set(F,R),F.update())}function Mt(F,R){const Q=F.encoding,pe=F.format,xe=F.type;return F.isCompressedTexture===!0||F.isVideoTexture===!0||F.format===Nc||Q!==qi&&(Q===At?c===!1?e.has("EXT_sRGB")===!0&&pe===ti?(F.format=Nc,F.minFilter=Vt,F.generateMipmaps=!1):R=Xf.sRGBToLinear(R):(pe!==ti||xe!==Mr)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",Q)),R}this.allocateTextureUnit=k,this.resetTextureUnits=he,this.setTexture2D=B,this.setTexture2DArray=le,this.setTexture3D=ne,this.setTextureCube=de,this.rebindTextures=ve,this.setupRenderTarget=ze,this.updateRenderTargetMipmap=Me,this.updateMultisampleRenderTarget=Qe,this.setupDepthRenderbuffer=te,this.setupFrameBufferTexture=ye,this.useMultisampledRTT=Ve}function G0(l,e,t){const n=t.isWebGL2;function i(r,a=null){let c;if(r===Mr)return 5121;if(r===f0)return 32819;if(r===d0)return 32820;if(r===c0)return 5120;if(r===u0)return 5122;if(r===Gf)return 5123;if(r===h0)return 5124;if(r===gr)return 5125;if(r===Hi)return 5126;if(r===ro)return n?5131:(c=e.get("OES_texture_half_float"),c!==null?c.HALF_FLOAT_OES:null);if(r===p0)return 6406;if(r===ti)return 6408;if(r===g0)return 6409;if(r===v0)return 6410;if(r===xr)return 6402;if(r===ls)return 34041;if(r===x0)return 6403;if(r===m0)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),6408;if(r===Nc)return c=e.get("EXT_sRGB"),c!==null?c.SRGB_ALPHA_EXT:null;if(r===_0)return 36244;if(r===y0)return 33319;if(r===M0)return 33320;if(r===S0)return 36249;if(r===bc||r===Tc||r===Ec||r===Ac)if(a===At)if(c=e.get("WEBGL_compressed_texture_s3tc_srgb"),c!==null){if(r===bc)return c.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(r===Tc)return c.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(r===Ec)return c.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(r===Ac)return c.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(c=e.get("WEBGL_compressed_texture_s3tc"),c!==null){if(r===bc)return c.COMPRESSED_RGB_S3TC_DXT1_EXT;if(r===Tc)return c.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(r===Ec)return c.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(r===Ac)return c.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(r===ef||r===tf||r===nf||r===rf)if(c=e.get("WEBGL_compressed_texture_pvrtc"),c!==null){if(r===ef)return c.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(r===tf)return c.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(r===nf)return c.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(r===rf)return c.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(r===w0)return c=e.get("WEBGL_compressed_texture_etc1"),c!==null?c.COMPRESSED_RGB_ETC1_WEBGL:null;if(r===sf||r===of)if(c=e.get("WEBGL_compressed_texture_etc"),c!==null){if(r===sf)return a===At?c.COMPRESSED_SRGB8_ETC2:c.COMPRESSED_RGB8_ETC2;if(r===of)return a===At?c.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:c.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(r===af||r===lf||r===cf||r===uf||r===hf||r===ff||r===df||r===pf||r===mf||r===gf||r===vf||r===xf||r===_f||r===yf)if(c=e.get("WEBGL_compressed_texture_astc"),c!==null){if(r===af)return a===At?c.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:c.COMPRESSED_RGBA_ASTC_4x4_KHR;if(r===lf)return a===At?c.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:c.COMPRESSED_RGBA_ASTC_5x4_KHR;if(r===cf)return a===At?c.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:c.COMPRESSED_RGBA_ASTC_5x5_KHR;if(r===uf)return a===At?c.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:c.COMPRESSED_RGBA_ASTC_6x5_KHR;if(r===hf)return a===At?c.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:c.COMPRESSED_RGBA_ASTC_6x6_KHR;if(r===ff)return a===At?c.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:c.COMPRESSED_RGBA_ASTC_8x5_KHR;if(r===df)return a===At?c.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:c.COMPRESSED_RGBA_ASTC_8x6_KHR;if(r===pf)return a===At?c.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:c.COMPRESSED_RGBA_ASTC_8x8_KHR;if(r===mf)return a===At?c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:c.COMPRESSED_RGBA_ASTC_10x5_KHR;if(r===gf)return a===At?c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:c.COMPRESSED_RGBA_ASTC_10x6_KHR;if(r===vf)return a===At?c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:c.COMPRESSED_RGBA_ASTC_10x8_KHR;if(r===xf)return a===At?c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:c.COMPRESSED_RGBA_ASTC_10x10_KHR;if(r===_f)return a===At?c.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:c.COMPRESSED_RGBA_ASTC_12x10_KHR;if(r===yf)return a===At?c.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:c.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(r===Mf)if(c=e.get("EXT_texture_compression_bptc"),c!==null){if(r===Mf)return a===At?c.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:c.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;return r===ts?n?34042:(c=e.get("WEBGL_depth_texture"),c!==null?c.UNSIGNED_INT_24_8_WEBGL:null):l[r]!==void 0?l[r]:null}return{convert:i}}class H0 extends nn{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class to extends _t{constructor(){super(),this.isGroup=!0,this.type="Group"}}const Dw={type:"move"};class Rh{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new to,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new to,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new I,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new I),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new to,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new I,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new I),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let i=null,r=null,a=null;const c=this._targetRay,u=this._grip,h=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(h&&e.hand){a=!0;for(const _ of e.hand.values()){const y=t.getJointPose(_,n);if(h.joints[_.jointName]===void 0){const w=new to;w.matrixAutoUpdate=!1,w.visible=!1,h.joints[_.jointName]=w,h.add(w)}const S=h.joints[_.jointName];y!==null&&(S.matrix.fromArray(y.transform.matrix),S.matrix.decompose(S.position,S.rotation,S.scale),S.jointRadius=y.radius),S.visible=y!==null}const d=h.joints["index-finger-tip"],p=h.joints["thumb-tip"],m=d.position.distanceTo(p.position),v=.02,x=.005;h.inputState.pinching&&m>v+x?(h.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!h.inputState.pinching&&m<=v-x&&(h.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else u!==null&&e.gripSpace&&(r=t.getPose(e.gripSpace,n),r!==null&&(u.matrix.fromArray(r.transform.matrix),u.matrix.decompose(u.position,u.rotation,u.scale),r.linearVelocity?(u.hasLinearVelocity=!0,u.linearVelocity.copy(r.linearVelocity)):u.hasLinearVelocity=!1,r.angularVelocity?(u.hasAngularVelocity=!0,u.angularVelocity.copy(r.angularVelocity)):u.hasAngularVelocity=!1));c!==null&&(i=t.getPose(e.targetRaySpace,n),i===null&&r!==null&&(i=r),i!==null&&(c.matrix.fromArray(i.transform.matrix),c.matrix.decompose(c.position,c.rotation,c.scale),i.linearVelocity?(c.hasLinearVelocity=!0,c.linearVelocity.copy(i.linearVelocity)):c.hasLinearVelocity=!1,i.angularVelocity?(c.hasAngularVelocity=!0,c.angularVelocity.copy(i.angularVelocity)):c.hasAngularVelocity=!1,this.dispatchEvent(Dw)))}return c!==null&&(c.visible=i!==null),u!==null&&(u.visible=r!==null),h!==null&&(h.visible=a!==null),this}}class W0 extends Zt{constructor(e,t,n,i,r,a,c,u,h,d){if(d=d!==void 0?d:xr,d!==xr&&d!==ls)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&d===xr&&(n=gr),n===void 0&&d===ls&&(n=ts),super(null,i,r,a,c,u,d,n,h),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=c!==void 0?c:Yt,this.minFilter=u!==void 0?u:Yt,this.flipY=!1,this.generateMipmaps=!1}}class zw extends Ji{constructor(e,t){super();const n=this;let i=null,r=1,a=null,c="local-floor",u=null,h=null,d=null,p=null,m=null,v=null;const x=t.getContextAttributes();let _=null,y=null;const S=[],w=[],T=new nn;T.layers.enable(1),T.viewport=new wt;const E=new nn;E.layers.enable(2),E.viewport=new wt;const C=[T,E],P=new H0;P.layers.enable(1),P.layers.enable(2);let N=null,A=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(U){let B=S[U];return B===void 0&&(B=new Rh,S[U]=B),B.getTargetRaySpace()},this.getControllerGrip=function(U){let B=S[U];return B===void 0&&(B=new Rh,S[U]=B),B.getGripSpace()},this.getHand=function(U){let B=S[U];return B===void 0&&(B=new Rh,S[U]=B),B.getHandSpace()};function L(U){const B=w.indexOf(U.inputSource);if(B===-1)return;const le=S[B];le!==void 0&&le.dispatchEvent({type:U.type,data:U.inputSource})}function O(){i.removeEventListener("select",L),i.removeEventListener("selectstart",L),i.removeEventListener("selectend",L),i.removeEventListener("squeeze",L),i.removeEventListener("squeezestart",L),i.removeEventListener("squeezeend",L),i.removeEventListener("end",O),i.removeEventListener("inputsourceschange",X);for(let U=0;U<S.length;U++){const B=w[U];B!==null&&(w[U]=null,S[U].disconnect(B))}N=null,A=null,e.setRenderTarget(_),m=null,p=null,d=null,i=null,y=null,k.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(U){r=U,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(U){c=U,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return u||a},this.setReferenceSpace=function(U){u=U},this.getBaseLayer=function(){return p!==null?p:m},this.getBinding=function(){return d},this.getFrame=function(){return v},this.getSession=function(){return i},this.setSession=async function(U){if(i=U,i!==null){if(_=e.getRenderTarget(),i.addEventListener("select",L),i.addEventListener("selectstart",L),i.addEventListener("selectend",L),i.addEventListener("squeeze",L),i.addEventListener("squeezestart",L),i.addEventListener("squeezeend",L),i.addEventListener("end",O),i.addEventListener("inputsourceschange",X),x.xrCompatible!==!0&&await t.makeXRCompatible(),i.renderState.layers===void 0||e.capabilities.isWebGL2===!1){const B={antialias:i.renderState.layers===void 0?x.antialias:!0,alpha:x.alpha,depth:x.depth,stencil:x.stencil,framebufferScaleFactor:r};m=new XRWebGLLayer(i,t,B),i.updateRenderState({baseLayer:m}),y=new ni(m.framebufferWidth,m.framebufferHeight,{format:ti,type:Mr,encoding:e.outputEncoding,stencilBuffer:x.stencil})}else{let B=null,le=null,ne=null;x.depth&&(ne=x.stencil?35056:33190,B=x.stencil?ls:xr,le=x.stencil?ts:gr);const de={colorFormat:32856,depthFormat:ne,scaleFactor:r};d=new XRWebGLBinding(i,t),p=d.createProjectionLayer(de),i.updateRenderState({layers:[p]}),y=new ni(p.textureWidth,p.textureHeight,{format:ti,type:Mr,depthTexture:new W0(p.textureWidth,p.textureHeight,le,void 0,void 0,void 0,void 0,void 0,void 0,B),stencilBuffer:x.stencil,encoding:e.outputEncoding,samples:x.antialias?4:0});const we=e.properties.get(y);we.__ignoreDepthValues=p.ignoreDepthValues}y.isXRRenderTarget=!0,this.setFoveation(1),u=null,a=await i.requestReferenceSpace(c),k.setContext(i),k.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}};function X(U){for(let B=0;B<U.removed.length;B++){const le=U.removed[B],ne=w.indexOf(le);ne>=0&&(w[ne]=null,S[ne].dispatchEvent({type:"disconnected",data:le}))}for(let B=0;B<U.added.length;B++){const le=U.added[B];let ne=w.indexOf(le);if(ne===-1){for(let we=0;we<S.length;we++)if(we>=w.length){w.push(le),ne=we;break}else if(w[we]===null){w[we]=le,ne=we;break}if(ne===-1)break}const de=S[ne];de&&de.dispatchEvent({type:"connected",data:le})}}const ae=new I,J=new I;function H(U,B,le){ae.setFromMatrixPosition(B.matrixWorld),J.setFromMatrixPosition(le.matrixWorld);const ne=ae.distanceTo(J),de=B.projectionMatrix.elements,we=le.projectionMatrix.elements,Be=de[14]/(de[10]-1),se=de[14]/(de[10]+1),Ye=(de[9]+1)/de[5],He=(de[9]-1)/de[5],Xe=(de[8]-1)/de[0],ye=(we[8]+1)/we[0],qe=Be*Xe,ue=Be*ye,te=ne/(-Xe+ye),ve=te*-Xe;B.matrixWorld.decompose(U.position,U.quaternion,U.scale),U.translateX(ve),U.translateZ(te),U.matrixWorld.compose(U.position,U.quaternion,U.scale),U.matrixWorldInverse.copy(U.matrixWorld).invert();const ze=Be+te,Me=se+te,Qe=qe-ve,We=ue+(ne-ve),Ve=Ye*se/Me*ze,yt=He*se/Me*ze;U.projectionMatrix.makePerspective(Qe,We,Ve,yt,ze,Me)}function K(U,B){B===null?U.matrixWorld.copy(U.matrix):U.matrixWorld.multiplyMatrices(B.matrixWorld,U.matrix),U.matrixWorldInverse.copy(U.matrixWorld).invert()}this.updateCamera=function(U){if(i===null)return;P.near=E.near=T.near=U.near,P.far=E.far=T.far=U.far,(N!==P.near||A!==P.far)&&(i.updateRenderState({depthNear:P.near,depthFar:P.far}),N=P.near,A=P.far);const B=U.parent,le=P.cameras;K(P,B);for(let de=0;de<le.length;de++)K(le[de],B);P.matrixWorld.decompose(P.position,P.quaternion,P.scale),U.matrix.copy(P.matrix),U.matrix.decompose(U.position,U.quaternion,U.scale);const ne=U.children;for(let de=0,we=ne.length;de<we;de++)ne[de].updateMatrixWorld(!0);le.length===2?H(P,T,E):P.projectionMatrix.copy(T.projectionMatrix)},this.getCamera=function(){return P},this.getFoveation=function(){if(p!==null)return p.fixedFoveation;if(m!==null)return m.fixedFoveation},this.setFoveation=function(U){p!==null&&(p.fixedFoveation=U),m!==null&&m.fixedFoveation!==void 0&&(m.fixedFoveation=U)};let ie=null;function he(U,B){if(h=B.getViewerPose(u||a),v=B,h!==null){const le=h.views;m!==null&&(e.setRenderTargetFramebuffer(y,m.framebuffer),e.setRenderTarget(y));let ne=!1;le.length!==P.cameras.length&&(P.cameras.length=0,ne=!0);for(let de=0;de<le.length;de++){const we=le[de];let Be=null;if(m!==null)Be=m.getViewport(we);else{const Ye=d.getViewSubImage(p,we);Be=Ye.viewport,de===0&&(e.setRenderTargetTextures(y,Ye.colorTexture,p.ignoreDepthValues?void 0:Ye.depthStencilTexture),e.setRenderTarget(y))}let se=C[de];se===void 0&&(se=new nn,se.layers.enable(de),se.viewport=new wt,C[de]=se),se.matrix.fromArray(we.transform.matrix),se.projectionMatrix.fromArray(we.projectionMatrix),se.viewport.set(Be.x,Be.y,Be.width,Be.height),de===0&&P.matrix.copy(se.matrix),ne===!0&&P.cameras.push(se)}}for(let le=0;le<S.length;le++){const ne=w[le],de=S[le];ne!==null&&de!==void 0&&de.update(ne,B,u||a)}ie&&ie(U,B),v=null}const k=new O0;k.setAnimationLoop(he),this.setAnimationLoop=function(U){ie=U},this.dispose=function(){}}}function Nw(l,e){function t(_,y){_.fogColor.value.copy(y.color),y.isFog?(_.fogNear.value=y.near,_.fogFar.value=y.far):y.isFogExp2&&(_.fogDensity.value=y.density)}function n(_,y,S,w,T){y.isMeshBasicMaterial||y.isMeshLambertMaterial?i(_,y):y.isMeshToonMaterial?(i(_,y),d(_,y)):y.isMeshPhongMaterial?(i(_,y),h(_,y)):y.isMeshStandardMaterial?(i(_,y),p(_,y),y.isMeshPhysicalMaterial&&m(_,y,T)):y.isMeshMatcapMaterial?(i(_,y),v(_,y)):y.isMeshDepthMaterial?i(_,y):y.isMeshDistanceMaterial?(i(_,y),x(_,y)):y.isMeshNormalMaterial?i(_,y):y.isLineBasicMaterial?(r(_,y),y.isLineDashedMaterial&&a(_,y)):y.isPointsMaterial?c(_,y,S,w):y.isSpriteMaterial?u(_,y):y.isShadowMaterial?(_.color.value.copy(y.color),_.opacity.value=y.opacity):y.isShaderMaterial&&(y.uniformsNeedUpdate=!1)}function i(_,y){_.opacity.value=y.opacity,y.color&&_.diffuse.value.copy(y.color),y.emissive&&_.emissive.value.copy(y.emissive).multiplyScalar(y.emissiveIntensity),y.map&&(_.map.value=y.map),y.alphaMap&&(_.alphaMap.value=y.alphaMap),y.bumpMap&&(_.bumpMap.value=y.bumpMap,_.bumpScale.value=y.bumpScale,y.side===Nn&&(_.bumpScale.value*=-1)),y.displacementMap&&(_.displacementMap.value=y.displacementMap,_.displacementScale.value=y.displacementScale,_.displacementBias.value=y.displacementBias),y.emissiveMap&&(_.emissiveMap.value=y.emissiveMap),y.normalMap&&(_.normalMap.value=y.normalMap,_.normalScale.value.copy(y.normalScale),y.side===Nn&&_.normalScale.value.negate()),y.specularMap&&(_.specularMap.value=y.specularMap),y.alphaTest>0&&(_.alphaTest.value=y.alphaTest);const S=e.get(y).envMap;if(S&&(_.envMap.value=S,_.flipEnvMap.value=S.isCubeTexture&&S.isRenderTargetTexture===!1?-1:1,_.reflectivity.value=y.reflectivity,_.ior.value=y.ior,_.refractionRatio.value=y.refractionRatio),y.lightMap){_.lightMap.value=y.lightMap;const E=l.physicallyCorrectLights!==!0?Math.PI:1;_.lightMapIntensity.value=y.lightMapIntensity*E}y.aoMap&&(_.aoMap.value=y.aoMap,_.aoMapIntensity.value=y.aoMapIntensity);let w;y.map?w=y.map:y.specularMap?w=y.specularMap:y.displacementMap?w=y.displacementMap:y.normalMap?w=y.normalMap:y.bumpMap?w=y.bumpMap:y.roughnessMap?w=y.roughnessMap:y.metalnessMap?w=y.metalnessMap:y.alphaMap?w=y.alphaMap:y.emissiveMap?w=y.emissiveMap:y.clearcoatMap?w=y.clearcoatMap:y.clearcoatNormalMap?w=y.clearcoatNormalMap:y.clearcoatRoughnessMap?w=y.clearcoatRoughnessMap:y.iridescenceMap?w=y.iridescenceMap:y.iridescenceThicknessMap?w=y.iridescenceThicknessMap:y.specularIntensityMap?w=y.specularIntensityMap:y.specularColorMap?w=y.specularColorMap:y.transmissionMap?w=y.transmissionMap:y.thicknessMap?w=y.thicknessMap:y.sheenColorMap?w=y.sheenColorMap:y.sheenRoughnessMap&&(w=y.sheenRoughnessMap),w!==void 0&&(w.isWebGLRenderTarget&&(w=w.texture),w.matrixAutoUpdate===!0&&w.updateMatrix(),_.uvTransform.value.copy(w.matrix));let T;y.aoMap?T=y.aoMap:y.lightMap&&(T=y.lightMap),T!==void 0&&(T.isWebGLRenderTarget&&(T=T.texture),T.matrixAutoUpdate===!0&&T.updateMatrix(),_.uv2Transform.value.copy(T.matrix))}function r(_,y){_.diffuse.value.copy(y.color),_.opacity.value=y.opacity}function a(_,y){_.dashSize.value=y.dashSize,_.totalSize.value=y.dashSize+y.gapSize,_.scale.value=y.scale}function c(_,y,S,w){_.diffuse.value.copy(y.color),_.opacity.value=y.opacity,_.size.value=y.size*S,_.scale.value=w*.5,y.map&&(_.map.value=y.map),y.alphaMap&&(_.alphaMap.value=y.alphaMap),y.alphaTest>0&&(_.alphaTest.value=y.alphaTest);let T;y.map?T=y.map:y.alphaMap&&(T=y.alphaMap),T!==void 0&&(T.matrixAutoUpdate===!0&&T.updateMatrix(),_.uvTransform.value.copy(T.matrix))}function u(_,y){_.diffuse.value.copy(y.color),_.opacity.value=y.opacity,_.rotation.value=y.rotation,y.map&&(_.map.value=y.map),y.alphaMap&&(_.alphaMap.value=y.alphaMap),y.alphaTest>0&&(_.alphaTest.value=y.alphaTest);let S;y.map?S=y.map:y.alphaMap&&(S=y.alphaMap),S!==void 0&&(S.matrixAutoUpdate===!0&&S.updateMatrix(),_.uvTransform.value.copy(S.matrix))}function h(_,y){_.specular.value.copy(y.specular),_.shininess.value=Math.max(y.shininess,1e-4)}function d(_,y){y.gradientMap&&(_.gradientMap.value=y.gradientMap)}function p(_,y){_.roughness.value=y.roughness,_.metalness.value=y.metalness,y.roughnessMap&&(_.roughnessMap.value=y.roughnessMap),y.metalnessMap&&(_.metalnessMap.value=y.metalnessMap),e.get(y).envMap&&(_.envMapIntensity.value=y.envMapIntensity)}function m(_,y,S){_.ior.value=y.ior,y.sheen>0&&(_.sheenColor.value.copy(y.sheenColor).multiplyScalar(y.sheen),_.sheenRoughness.value=y.sheenRoughness,y.sheenColorMap&&(_.sheenColorMap.value=y.sheenColorMap),y.sheenRoughnessMap&&(_.sheenRoughnessMap.value=y.sheenRoughnessMap)),y.clearcoat>0&&(_.clearcoat.value=y.clearcoat,_.clearcoatRoughness.value=y.clearcoatRoughness,y.clearcoatMap&&(_.clearcoatMap.value=y.clearcoatMap),y.clearcoatRoughnessMap&&(_.clearcoatRoughnessMap.value=y.clearcoatRoughnessMap),y.clearcoatNormalMap&&(_.clearcoatNormalScale.value.copy(y.clearcoatNormalScale),_.clearcoatNormalMap.value=y.clearcoatNormalMap,y.side===Nn&&_.clearcoatNormalScale.value.negate())),y.iridescence>0&&(_.iridescence.value=y.iridescence,_.iridescenceIOR.value=y.iridescenceIOR,_.iridescenceThicknessMinimum.value=y.iridescenceThicknessRange[0],_.iridescenceThicknessMaximum.value=y.iridescenceThicknessRange[1],y.iridescenceMap&&(_.iridescenceMap.value=y.iridescenceMap),y.iridescenceThicknessMap&&(_.iridescenceThicknessMap.value=y.iridescenceThicknessMap)),y.transmission>0&&(_.transmission.value=y.transmission,_.transmissionSamplerMap.value=S.texture,_.transmissionSamplerSize.value.set(S.width,S.height),y.transmissionMap&&(_.transmissionMap.value=y.transmissionMap),_.thickness.value=y.thickness,y.thicknessMap&&(_.thicknessMap.value=y.thicknessMap),_.attenuationDistance.value=y.attenuationDistance,_.attenuationColor.value.copy(y.attenuationColor)),_.specularIntensity.value=y.specularIntensity,_.specularColor.value.copy(y.specularColor),y.specularIntensityMap&&(_.specularIntensityMap.value=y.specularIntensityMap),y.specularColorMap&&(_.specularColorMap.value=y.specularColorMap)}function v(_,y){y.matcap&&(_.matcap.value=y.matcap)}function x(_,y){_.referencePosition.value.copy(y.referencePosition),_.nearDistance.value=y.nearDistance,_.farDistance.value=y.farDistance}return{refreshFogUniforms:t,refreshMaterialUniforms:n}}function Fw(l,e,t,n){let i={},r={},a=[];const c=t.isWebGL2?l.getParameter(35375):0;function u(w,T){const E=T.program;n.uniformBlockBinding(w,E)}function h(w,T){let E=i[w.id];E===void 0&&(x(w),E=d(w),i[w.id]=E,w.addEventListener("dispose",y));const C=T.program;n.updateUBOMapping(w,C);const P=e.render.frame;r[w.id]!==P&&(m(w),r[w.id]=P)}function d(w){const T=p();w.__bindingPointIndex=T;const E=l.createBuffer(),C=w.__size,P=w.usage;return l.bindBuffer(35345,E),l.bufferData(35345,C,P),l.bindBuffer(35345,null),l.bindBufferBase(35345,T,E),E}function p(){for(let w=0;w<c;w++)if(a.indexOf(w)===-1)return a.push(w),w;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function m(w){const T=i[w.id],E=w.uniforms,C=w.__cache;l.bindBuffer(35345,T);for(let P=0,N=E.length;P<N;P++){const A=E[P];if(v(A,P,C)===!0){const L=A.value,O=A.__offset;typeof L=="number"?(A.__data[0]=L,l.bufferSubData(35345,O,A.__data)):(A.value.isMatrix3?(A.__data[0]=A.value.elements[0],A.__data[1]=A.value.elements[1],A.__data[2]=A.value.elements[2],A.__data[3]=A.value.elements[0],A.__data[4]=A.value.elements[3],A.__data[5]=A.value.elements[4],A.__data[6]=A.value.elements[5],A.__data[7]=A.value.elements[0],A.__data[8]=A.value.elements[6],A.__data[9]=A.value.elements[7],A.__data[10]=A.value.elements[8],A.__data[11]=A.value.elements[0]):L.toArray(A.__data),l.bufferSubData(35345,O,A.__data))}}l.bindBuffer(35345,null)}function v(w,T,E){const C=w.value;if(E[T]===void 0)return typeof C=="number"?E[T]=C:E[T]=C.clone(),!0;if(typeof C=="number"){if(E[T]!==C)return E[T]=C,!0}else{const P=E[T];if(P.equals(C)===!1)return P.copy(C),!0}return!1}function x(w){const T=w.uniforms;let E=0;const C=16;let P=0;for(let N=0,A=T.length;N<A;N++){const L=T[N],O=_(L);if(L.__data=new Float32Array(O.storage/Float32Array.BYTES_PER_ELEMENT),L.__offset=E,N>0){P=E%C;const X=C-P;P!==0&&X-O.boundary<0&&(E+=C-P,L.__offset=E)}E+=O.storage}return P=E%C,P>0&&(E+=C-P),w.__size=E,w.__cache={},this}function _(w){const T=w.value,E={boundary:0,storage:0};return typeof T=="number"?(E.boundary=4,E.storage=4):T.isVector2?(E.boundary=8,E.storage=8):T.isVector3||T.isColor?(E.boundary=16,E.storage=12):T.isVector4?(E.boundary=16,E.storage=16):T.isMatrix3?(E.boundary=48,E.storage=48):T.isMatrix4?(E.boundary=64,E.storage=64):T.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",T),E}function y(w){const T=w.target;T.removeEventListener("dispose",y);const E=a.indexOf(T.__bindingPointIndex);a.splice(E,1),l.deleteBuffer(i[T.id]),delete i[T.id],delete r[T.id]}function S(){for(const w in i)l.deleteBuffer(i[w]);a=[],i={},r={}}return{bind:u,update:h,dispose:S}}function Ow(){const l=la("canvas");return l.style.display="block",l}function Qf(l={}){this.isWebGLRenderer=!0;const e=l.canvas!==void 0?l.canvas:Ow(),t=l.context!==void 0?l.context:null,n=l.depth!==void 0?l.depth:!0,i=l.stencil!==void 0?l.stencil:!0,r=l.antialias!==void 0?l.antialias:!1,a=l.premultipliedAlpha!==void 0?l.premultipliedAlpha:!0,c=l.preserveDrawingBuffer!==void 0?l.preserveDrawingBuffer:!1,u=l.powerPreference!==void 0?l.powerPreference:"default",h=l.failIfMajorPerformanceCaveat!==void 0?l.failIfMajorPerformanceCaveat:!1;let d;t!==null?d=t.getContextAttributes().alpha:d=l.alpha!==void 0?l.alpha:!1;let p=null,m=null;const v=[],x=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=qi,this.physicallyCorrectLights=!1,this.toneMapping=hi,this.toneMappingExposure=1,Object.defineProperties(this,{gammaFactor:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaFactor has been removed."),2},set:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.")}}});const _=this;let y=!1,S=0,w=0,T=null,E=-1,C=null;const P=new wt,N=new wt;let A=null,L=e.width,O=e.height,X=1,ae=null,J=null;const H=new wt(0,0,L,O),K=new wt(0,0,L,O);let ie=!1;const he=new Wc;let k=!1,U=!1,B=null;const le=new et,ne=new fe,de=new I,we={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function Be(){return T===null?X:1}let se=t;function Ye(D,Y){for(let oe=0;oe<D.length;oe++){const q=D[oe],ce=e.getContext(q,Y);if(ce!==null)return ce}return null}try{const D={alpha:!0,depth:n,stencil:i,antialias:r,premultipliedAlpha:a,preserveDrawingBuffer:c,powerPreference:u,failIfMajorPerformanceCaveat:h};if("setAttribute"in e&&e.setAttribute("data-engine",`three.js r${kc}`),e.addEventListener("webglcontextlost",tt,!1),e.addEventListener("webglcontextrestored",pt,!1),e.addEventListener("webglcontextcreationerror",Dt,!1),se===null){const Y=["webgl2","webgl","experimental-webgl"];if(_.isWebGL1Renderer===!0&&Y.shift(),se=Ye(Y,D),se===null)throw Ye(Y)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}se.getShaderPrecisionFormat===void 0&&(se.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(D){throw console.error("THREE.WebGLRenderer: "+D.message),D}let He,Xe,ye,qe,ue,te,ve,ze,Me,Qe,We,Ve,yt,Mt,F,R,Q,pe,xe,be,Ze,$,Fe,Pe;function Ue(){He=new $M(se),Xe=new YM(se,He,l),He.init(Xe),$=new G0(se,He,Xe),ye=new Rw(se,He,Xe),qe=new nS,ue=new _w,te=new Iw(se,He,ye,ue,Xe,$,qe),ve=new JM(_),ze=new KM(_),Me=new dy(se,Xe),Fe=new XM(se,He,Me,Xe),Qe=new eS(se,Me,qe,Fe),We=new oS(se,Qe,Me,qe),xe=new sS(se,Xe,te),R=new ZM(ue),Ve=new xw(_,ve,ze,He,Xe,Fe,R),yt=new Nw(_,ue),Mt=new Mw,F=new Aw(He,Xe),pe=new WM(_,ve,ye,We,d,a),Q=new Lw(_,We,Xe),Pe=new Fw(se,qe,Xe,ye),be=new qM(se,He,qe,Xe),Ze=new tS(se,He,qe,Xe),qe.programs=Ve.programs,_.capabilities=Xe,_.extensions=He,_.properties=ue,_.renderLists=Mt,_.shadowMap=Q,_.state=ye,_.info=qe}Ue();const Ie=new zw(_,se);this.xr=Ie,this.getContext=function(){return se},this.getContextAttributes=function(){return se.getContextAttributes()},this.forceContextLoss=function(){const D=He.get("WEBGL_lose_context");D&&D.loseContext()},this.forceContextRestore=function(){const D=He.get("WEBGL_lose_context");D&&D.restoreContext()},this.getPixelRatio=function(){return X},this.setPixelRatio=function(D){D!==void 0&&(X=D,this.setSize(L,O,!1))},this.getSize=function(D){return D.set(L,O)},this.setSize=function(D,Y,oe){if(Ie.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}L=D,O=Y,e.width=Math.floor(D*X),e.height=Math.floor(Y*X),oe!==!1&&(e.style.width=D+"px",e.style.height=Y+"px"),this.setViewport(0,0,D,Y)},this.getDrawingBufferSize=function(D){return D.set(L*X,O*X).floor()},this.setDrawingBufferSize=function(D,Y,oe){L=D,O=Y,X=oe,e.width=Math.floor(D*oe),e.height=Math.floor(Y*oe),this.setViewport(0,0,D,Y)},this.getCurrentViewport=function(D){return D.copy(P)},this.getViewport=function(D){return D.copy(H)},this.setViewport=function(D,Y,oe,q){D.isVector4?H.set(D.x,D.y,D.z,D.w):H.set(D,Y,oe,q),ye.viewport(P.copy(H).multiplyScalar(X).floor())},this.getScissor=function(D){return D.copy(K)},this.setScissor=function(D,Y,oe,q){D.isVector4?K.set(D.x,D.y,D.z,D.w):K.set(D,Y,oe,q),ye.scissor(N.copy(K).multiplyScalar(X).floor())},this.getScissorTest=function(){return ie},this.setScissorTest=function(D){ye.setScissorTest(ie=D)},this.setOpaqueSort=function(D){ae=D},this.setTransparentSort=function(D){J=D},this.getClearColor=function(D){return D.copy(pe.getClearColor())},this.setClearColor=function(){pe.setClearColor.apply(pe,arguments)},this.getClearAlpha=function(){return pe.getClearAlpha()},this.setClearAlpha=function(){pe.setClearAlpha.apply(pe,arguments)},this.clear=function(D=!0,Y=!0,oe=!0){let q=0;D&&(q|=16384),Y&&(q|=256),oe&&(q|=1024),se.clear(q)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",tt,!1),e.removeEventListener("webglcontextrestored",pt,!1),e.removeEventListener("webglcontextcreationerror",Dt,!1),Mt.dispose(),F.dispose(),ue.dispose(),ve.dispose(),ze.dispose(),We.dispose(),Fe.dispose(),Pe.dispose(),Ve.dispose(),Ie.dispose(),Ie.removeEventListener("sessionstart",ht),Ie.removeEventListener("sessionend",Ht),B&&(B.dispose(),B=null),Ct.stop()};function tt(D){D.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),y=!0}function pt(){console.log("THREE.WebGLRenderer: Context Restored."),y=!1;const D=qe.autoReset,Y=Q.enabled,oe=Q.autoUpdate,q=Q.needsUpdate,ce=Q.type;Ue(),qe.autoReset=D,Q.enabled=Y,Q.autoUpdate=oe,Q.needsUpdate=q,Q.type=ce}function Dt(D){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",D.statusMessage)}function W(D){const Y=D.target;Y.removeEventListener("dispose",W),Ce(Y)}function Ce(D){re(D),ue.remove(D)}function re(D){const Y=ue.get(D).programs;Y!==void 0&&(Y.forEach(function(oe){Ve.releaseProgram(oe)}),D.isShaderMaterial&&Ve.releaseShaderCache(D))}this.renderBufferDirect=function(D,Y,oe,q,ce,ke){Y===null&&(Y=we);const Je=ce.isMesh&&ce.matrixWorld.determinant()<0,it=nu(D,Y,oe,q,ce);ye.setMaterial(q,Je);let je=oe.index;const mt=oe.attributes.position;if(je===null){if(mt===void 0||mt.count===0)return}else if(je.count===0)return;let ct=1;q.wireframe===!0&&(je=Qe.getWireframeAttribute(oe),ct=2),Fe.setup(ce,q,it,oe,je);let ut,Lt=be;je!==null&&(ut=Me.get(je),Lt=Ze,Lt.setIndex(ut));const Ei=je!==null?je.count:mt.count,Qi=oe.drawRange.start*ct,Ki=oe.drawRange.count*ct,Mn=ke!==null?ke.start*ct:0,lt=ke!==null?ke.count*ct:1/0,pi=Math.max(Qi,Mn),Rt=Math.min(Ei,Qi+Ki,Mn+lt)-1,Sn=Math.max(0,Rt-pi+1);if(Sn!==0){if(ce.isMesh)q.wireframe===!0?(ye.setLineWidth(q.wireframeLinewidth*Be()),Lt.setMode(1)):Lt.setMode(4);else if(ce.isLine){let Bn=q.linewidth;Bn===void 0&&(Bn=1),ye.setLineWidth(Bn*Be()),ce.isLineSegments?Lt.setMode(1):ce.isLineLoop?Lt.setMode(2):Lt.setMode(3)}else ce.isPoints?Lt.setMode(0):ce.isSprite&&Lt.setMode(4);if(ce.isInstancedMesh)Lt.renderInstances(pi,Sn,ce.count);else if(oe.isInstancedBufferGeometry){const Bn=Math.min(oe.instanceCount,oe._maxInstanceCount);Lt.renderInstances(pi,Sn,Bn)}else Lt.render(pi,Sn)}},this.compile=function(D,Y){function oe(q,ce,ke){q.transparent===!0&&q.side===Gi?(q.side=Nn,q.needsUpdate=!0,xs(q,ce,ke),q.side=as,q.needsUpdate=!0,xs(q,ce,ke),q.side=Gi):xs(q,ce,ke)}m=F.get(D),m.init(),x.push(m),D.traverseVisible(function(q){q.isLight&&q.layers.test(Y.layers)&&(m.pushLight(q),q.castShadow&&m.pushShadow(q))}),m.setupLights(_.physicallyCorrectLights),D.traverse(function(q){const ce=q.material;if(ce)if(Array.isArray(ce))for(let ke=0;ke<ce.length;ke++){const Je=ce[ke];oe(Je,D,q)}else oe(ce,D,q)}),x.pop(),m=null};let Ae=null;function Ee(D){Ae&&Ae(D)}function ht(){Ct.stop()}function Ht(){Ct.start()}const Ct=new O0;Ct.setAnimationLoop(Ee),typeof self<"u"&&Ct.setContext(self),this.setAnimationLoop=function(D){Ae=D,Ie.setAnimationLoop(D),D===null?Ct.stop():Ct.start()},Ie.addEventListener("sessionstart",ht),Ie.addEventListener("sessionend",Ht),this.render=function(D,Y){if(Y!==void 0&&Y.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(y===!0)return;D.matrixWorldAutoUpdate===!0&&D.updateMatrixWorld(),Y.parent===null&&Y.matrixWorldAutoUpdate===!0&&Y.updateMatrixWorld(),Ie.enabled===!0&&Ie.isPresenting===!0&&(Ie.cameraAutoUpdate===!0&&Ie.updateCamera(Y),Y=Ie.getCamera()),D.isScene===!0&&D.onBeforeRender(_,D,Y,T),m=F.get(D,x.length),m.init(),x.push(m),le.multiplyMatrices(Y.projectionMatrix,Y.matrixWorldInverse),he.setFromProjectionMatrix(le),U=this.localClippingEnabled,k=R.init(this.clippingPlanes,U,Y),p=Mt.get(D,v.length),p.init(),v.push(p),ii(D,Y,0,_.sortObjects),p.finish(),_.sortObjects===!0&&p.sort(ae,J),k===!0&&R.beginShadows();const oe=m.state.shadowsArray;if(Q.render(oe,D,Y),k===!0&&R.endShadows(),this.info.autoReset===!0&&this.info.reset(),pe.render(p,D),m.setupLights(_.physicallyCorrectLights),Y.isArrayCamera){const q=Y.cameras;for(let ce=0,ke=q.length;ce<ke;ce++){const Je=q[ce];Pt(p,D,Je,Je.viewport)}}else Pt(p,D,Y);T!==null&&(te.updateMultisampleRenderTarget(T),te.updateRenderTargetMipmap(T)),D.isScene===!0&&D.onAfterRender(_,D,Y),Fe.resetDefaultState(),E=-1,C=null,x.pop(),x.length>0?m=x[x.length-1]:m=null,v.pop(),v.length>0?p=v[v.length-1]:p=null};function ii(D,Y,oe,q){if(D.visible===!1)return;if(D.layers.test(Y.layers)){if(D.isGroup)oe=D.renderOrder;else if(D.isLOD)D.autoUpdate===!0&&D.update(Y);else if(D.isLight)m.pushLight(D),D.castShadow&&m.pushShadow(D);else if(D.isSprite){if(!D.frustumCulled||he.intersectsSprite(D)){q&&de.setFromMatrixPosition(D.matrixWorld).applyMatrix4(le);const Je=We.update(D),it=D.material;it.visible&&p.push(D,Je,it,oe,de.z,null)}}else if((D.isMesh||D.isLine||D.isPoints)&&(D.isSkinnedMesh&&D.skeleton.frame!==qe.render.frame&&(D.skeleton.update(),D.skeleton.frame=qe.render.frame),!D.frustumCulled||he.intersectsObject(D))){q&&de.setFromMatrixPosition(D.matrixWorld).applyMatrix4(le);const Je=We.update(D),it=D.material;if(Array.isArray(it)){const je=Je.groups;for(let mt=0,ct=je.length;mt<ct;mt++){const ut=je[mt],Lt=it[ut.materialIndex];Lt&&Lt.visible&&p.push(D,Je,Lt,oe,de.z,ut)}}else it.visible&&p.push(D,Je,it,oe,de.z,null)}}const ke=D.children;for(let Je=0,it=ke.length;Je<it;Je++)ii(ke[Je],Y,oe,q)}function Pt(D,Y,oe,q){const ce=D.opaque,ke=D.transmissive,Je=D.transparent;m.setupLightsView(oe),ke.length>0&&Un(ce,Y,oe),q&&ye.viewport(P.copy(q)),ce.length>0&&dn(ce,Y,oe),ke.length>0&&dn(ke,Y,oe),Je.length>0&&dn(Je,Y,oe),ye.buffers.depth.setTest(!0),ye.buffers.depth.setMask(!0),ye.buffers.color.setMask(!0),ye.setPolygonOffset(!1)}function Un(D,Y,oe){const q=Xe.isWebGL2;B===null&&(B=new ni(1,1,{generateMipmaps:!0,type:He.has("EXT_color_buffer_half_float")?ro:Mr,minFilter:hs,samples:q&&r===!0?4:0})),_.getDrawingBufferSize(ne),q?B.setSize(ne.x,ne.y):B.setSize(Fc(ne.x),Fc(ne.y));const ce=_.getRenderTarget();_.setRenderTarget(B),_.clear();const ke=_.toneMapping;_.toneMapping=hi,dn(D,Y,oe),_.toneMapping=ke,te.updateMultisampleRenderTarget(B),te.updateRenderTargetMipmap(B),_.setRenderTarget(ce)}function dn(D,Y,oe){const q=Y.isScene===!0?Y.overrideMaterial:null;for(let ce=0,ke=D.length;ce<ke;ce++){const Je=D[ce],it=Je.object,je=Je.geometry,mt=q===null?Je.material:q,ct=Je.group;it.layers.test(oe.layers)&&Oa(it,Y,oe,je,mt,ct)}}function Oa(D,Y,oe,q,ce,ke){D.onBeforeRender(_,Y,oe,q,ce,ke),D.modelViewMatrix.multiplyMatrices(oe.matrixWorldInverse,D.matrixWorld),D.normalMatrix.getNormalMatrix(D.modelViewMatrix),ce.onBeforeRender(_,Y,oe,q,D,ke),ce.transparent===!0&&ce.side===Gi?(ce.side=Nn,ce.needsUpdate=!0,_.renderBufferDirect(oe,Y,q,ce,D,ke),ce.side=as,ce.needsUpdate=!0,_.renderBufferDirect(oe,Y,q,ce,D,ke),ce.side=Gi):_.renderBufferDirect(oe,Y,q,ce,D,ke),D.onAfterRender(_,Y,oe,q,ce,ke)}function xs(D,Y,oe){Y.isScene!==!0&&(Y=we);const q=ue.get(D),ce=m.state.lights,ke=m.state.shadowsArray,Je=ce.state.version,it=Ve.getParameters(D,ce.state,ke,Y,oe),je=Ve.getProgramCacheKey(it);let mt=q.programs;q.environment=D.isMeshStandardMaterial?Y.environment:null,q.fog=Y.fog,q.envMap=(D.isMeshStandardMaterial?ze:ve).get(D.envMap||q.environment),mt===void 0&&(D.addEventListener("dispose",W),mt=new Map,q.programs=mt);let ct=mt.get(je);if(ct!==void 0){if(q.currentProgram===ct&&q.lightsStateVersion===Je)return Ua(D,it),ct}else it.uniforms=Ve.getUniforms(D),D.onBuild(oe,it,_),D.onBeforeCompile(it,_),ct=Ve.acquireProgram(it,je),mt.set(je,ct),q.uniforms=it.uniforms;const ut=q.uniforms;(!D.isShaderMaterial&&!D.isRawShaderMaterial||D.clipping===!0)&&(ut.clippingPlanes=R.uniform),Ua(D,it),q.needsLights=vo(D),q.lightsStateVersion=Je,q.needsLights&&(ut.ambientLightColor.value=ce.state.ambient,ut.lightProbe.value=ce.state.probe,ut.directionalLights.value=ce.state.directional,ut.directionalLightShadows.value=ce.state.directionalShadow,ut.spotLights.value=ce.state.spot,ut.spotLightShadows.value=ce.state.spotShadow,ut.rectAreaLights.value=ce.state.rectArea,ut.ltc_1.value=ce.state.rectAreaLTC1,ut.ltc_2.value=ce.state.rectAreaLTC2,ut.pointLights.value=ce.state.point,ut.pointLightShadows.value=ce.state.pointShadow,ut.hemisphereLights.value=ce.state.hemi,ut.directionalShadowMap.value=ce.state.directionalShadowMap,ut.directionalShadowMatrix.value=ce.state.directionalShadowMatrix,ut.spotShadowMap.value=ce.state.spotShadowMap,ut.spotLightMatrix.value=ce.state.spotLightMatrix,ut.spotLightMap.value=ce.state.spotLightMap,ut.pointShadowMap.value=ce.state.pointShadowMap,ut.pointShadowMatrix.value=ce.state.pointShadowMatrix);const Lt=ct.getUniforms(),Ei=Rc.seqWithValue(Lt.seq,ut);return q.currentProgram=ct,q.uniformsList=Ei,ct}function Ua(D,Y){const oe=ue.get(D);oe.outputEncoding=Y.outputEncoding,oe.instancing=Y.instancing,oe.skinning=Y.skinning,oe.morphTargets=Y.morphTargets,oe.morphNormals=Y.morphNormals,oe.morphColors=Y.morphColors,oe.morphTargetsCount=Y.morphTargetsCount,oe.numClippingPlanes=Y.numClippingPlanes,oe.numIntersection=Y.numClipIntersection,oe.vertexAlphas=Y.vertexAlphas,oe.vertexTangents=Y.vertexTangents,oe.toneMapping=Y.toneMapping}function nu(D,Y,oe,q,ce){Y.isScene!==!0&&(Y=we),te.resetTextureUnits();const ke=Y.fog,Je=q.isMeshStandardMaterial?Y.environment:null,it=T===null?_.outputEncoding:T.isXRRenderTarget===!0?T.texture.encoding:qi,je=(q.isMeshStandardMaterial?ze:ve).get(q.envMap||Je),mt=q.vertexColors===!0&&!!oe.attributes.color&&oe.attributes.color.itemSize===4,ct=!!q.normalMap&&!!oe.attributes.tangent,ut=!!oe.morphAttributes.position,Lt=!!oe.morphAttributes.normal,Ei=!!oe.morphAttributes.color,Qi=q.toneMapped?_.toneMapping:hi,Ki=oe.morphAttributes.position||oe.morphAttributes.normal||oe.morphAttributes.color,Mn=Ki!==void 0?Ki.length:0,lt=ue.get(q),pi=m.state.lights;if(k===!0&&(U===!0||D!==C)){const St=D===C&&q.id===E;R.setState(q,D,St)}let Rt=!1;q.version===lt.__version?(lt.needsLights&&lt.lightsStateVersion!==pi.state.version||lt.outputEncoding!==it||ce.isInstancedMesh&&lt.instancing===!1||!ce.isInstancedMesh&&lt.instancing===!0||ce.isSkinnedMesh&&lt.skinning===!1||!ce.isSkinnedMesh&&lt.skinning===!0||lt.envMap!==je||q.fog===!0&&lt.fog!==ke||lt.numClippingPlanes!==void 0&&(lt.numClippingPlanes!==R.numPlanes||lt.numIntersection!==R.numIntersection)||lt.vertexAlphas!==mt||lt.vertexTangents!==ct||lt.morphTargets!==ut||lt.morphNormals!==Lt||lt.morphColors!==Ei||lt.toneMapping!==Qi||Xe.isWebGL2===!0&&lt.morphTargetsCount!==Mn)&&(Rt=!0):(Rt=!0,lt.__version=q.version);let Sn=lt.currentProgram;Rt===!0&&(Sn=xs(q,Y,ce));let Bn=!1,kn=!1,Vn=!1;const nt=Sn.getUniforms(),ft=lt.uniforms;if(ye.useProgram(Sn.program)&&(Bn=!0,kn=!0,Vn=!0),q.id!==E&&(E=q.id,kn=!0),Bn||C!==D){if(nt.setValue(se,"projectionMatrix",D.projectionMatrix),Xe.logarithmicDepthBuffer&&nt.setValue(se,"logDepthBufFC",2/(Math.log(D.far+1)/Math.LN2)),C!==D&&(C=D,kn=!0,Vn=!0),q.isShaderMaterial||q.isMeshPhongMaterial||q.isMeshToonMaterial||q.isMeshStandardMaterial||q.envMap){const St=nt.map.cameraPosition;St!==void 0&&St.setValue(se,de.setFromMatrixPosition(D.matrixWorld))}(q.isMeshPhongMaterial||q.isMeshToonMaterial||q.isMeshLambertMaterial||q.isMeshBasicMaterial||q.isMeshStandardMaterial||q.isShaderMaterial)&&nt.setValue(se,"isOrthographic",D.isOrthographicCamera===!0),(q.isMeshPhongMaterial||q.isMeshToonMaterial||q.isMeshLambertMaterial||q.isMeshBasicMaterial||q.isMeshStandardMaterial||q.isShaderMaterial||q.isShadowMaterial||ce.isSkinnedMesh)&&nt.setValue(se,"viewMatrix",D.matrixWorldInverse)}if(ce.isSkinnedMesh){nt.setOptional(se,ce,"bindMatrix"),nt.setOptional(se,ce,"bindMatrixInverse");const St=ce.skeleton;St&&(Xe.floatVertexTextures?(St.boneTexture===null&&St.computeBoneTexture(),nt.setValue(se,"boneTexture",St.boneTexture,te),nt.setValue(se,"boneTextureSize",St.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}const Gn=oe.morphAttributes;if((Gn.position!==void 0||Gn.normal!==void 0||Gn.color!==void 0&&Xe.isWebGL2===!0)&&xe.update(ce,oe,q,Sn),(kn||lt.receiveShadow!==ce.receiveShadow)&&(lt.receiveShadow=ce.receiveShadow,nt.setValue(se,"receiveShadow",ce.receiveShadow)),q.isMeshGouraudMaterial&&q.envMap!==null&&(ft.envMap.value=je,ft.flipEnvMap.value=je.isCubeTexture&&je.isRenderTargetTexture===!1?-1:1),kn&&(nt.setValue(se,"toneMappingExposure",_.toneMappingExposure),lt.needsLights&&Ba(ft,Vn),ke&&q.fog===!0&&yt.refreshFogUniforms(ft,ke),yt.refreshMaterialUniforms(ft,q,X,O,B),Rc.upload(se,lt.uniformsList,ft,te)),q.isShaderMaterial&&q.uniformsNeedUpdate===!0&&(Rc.upload(se,lt.uniformsList,ft,te),q.uniformsNeedUpdate=!1),q.isSpriteMaterial&&nt.setValue(se,"center",ce.center),nt.setValue(se,"modelViewMatrix",ce.modelViewMatrix),nt.setValue(se,"normalMatrix",ce.normalMatrix),nt.setValue(se,"modelMatrix",ce.matrixWorld),q.isShaderMaterial||q.isRawShaderMaterial){const St=q.uniformsGroups;for(let Qt=0,Ai=St.length;Qt<Ai;Qt++)if(Xe.isWebGL2){const Ci=St[Qt];Pe.update(Ci,Sn),Pe.bind(Ci,Sn)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return Sn}function Ba(D,Y){D.ambientLightColor.needsUpdate=Y,D.lightProbe.needsUpdate=Y,D.directionalLights.needsUpdate=Y,D.directionalLightShadows.needsUpdate=Y,D.pointLights.needsUpdate=Y,D.pointLightShadows.needsUpdate=Y,D.spotLights.needsUpdate=Y,D.spotLightShadows.needsUpdate=Y,D.rectAreaLights.needsUpdate=Y,D.hemisphereLights.needsUpdate=Y}function vo(D){return D.isMeshLambertMaterial||D.isMeshToonMaterial||D.isMeshPhongMaterial||D.isMeshStandardMaterial||D.isShadowMaterial||D.isShaderMaterial&&D.lights===!0}this.getActiveCubeFace=function(){return S},this.getActiveMipmapLevel=function(){return w},this.getRenderTarget=function(){return T},this.setRenderTargetTextures=function(D,Y,oe){ue.get(D.texture).__webglTexture=Y,ue.get(D.depthTexture).__webglTexture=oe;const q=ue.get(D);q.__hasExternalTextures=!0,q.__hasExternalTextures&&(q.__autoAllocateDepthBuffer=oe===void 0,q.__autoAllocateDepthBuffer||He.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),q.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(D,Y){const oe=ue.get(D);oe.__webglFramebuffer=Y,oe.__useDefaultFramebuffer=Y===void 0},this.setRenderTarget=function(D,Y=0,oe=0){T=D,S=Y,w=oe;let q=!0;if(D){const je=ue.get(D);je.__useDefaultFramebuffer!==void 0?(ye.bindFramebuffer(36160,null),q=!1):je.__webglFramebuffer===void 0?te.setupRenderTarget(D):je.__hasExternalTextures&&te.rebindTextures(D,ue.get(D.texture).__webglTexture,ue.get(D.depthTexture).__webglTexture)}let ce=null,ke=!1,Je=!1;if(D){const je=D.texture;(je.isData3DTexture||je.isDataArrayTexture)&&(Je=!0);const mt=ue.get(D).__webglFramebuffer;D.isWebGLCubeRenderTarget?(ce=mt[Y],ke=!0):Xe.isWebGL2&&D.samples>0&&te.useMultisampledRTT(D)===!1?ce=ue.get(D).__webglMultisampledFramebuffer:ce=mt,P.copy(D.viewport),N.copy(D.scissor),A=D.scissorTest}else P.copy(H).multiplyScalar(X).floor(),N.copy(K).multiplyScalar(X).floor(),A=ie;if(ye.bindFramebuffer(36160,ce)&&Xe.drawBuffers&&q&&ye.drawBuffers(D,ce),ye.viewport(P),ye.scissor(N),ye.setScissorTest(A),ke){const je=ue.get(D.texture);se.framebufferTexture2D(36160,36064,34069+Y,je.__webglTexture,oe)}else if(Je){const je=ue.get(D.texture),mt=Y||0;se.framebufferTextureLayer(36160,36064,je.__webglTexture,oe||0,mt)}E=-1},this.readRenderTargetPixels=function(D,Y,oe,q,ce,ke,Je){if(!(D&&D.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let it=ue.get(D).__webglFramebuffer;if(D.isWebGLCubeRenderTarget&&Je!==void 0&&(it=it[Je]),it){ye.bindFramebuffer(36160,it);try{const je=D.texture,mt=je.format,ct=je.type;if(mt!==ti&&$.convert(mt)!==se.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const ut=ct===ro&&(He.has("EXT_color_buffer_half_float")||Xe.isWebGL2&&He.has("EXT_color_buffer_float"));if(ct!==Mr&&$.convert(ct)!==se.getParameter(35738)&&!(ct===Hi&&(Xe.isWebGL2||He.has("OES_texture_float")||He.has("WEBGL_color_buffer_float")))&&!ut){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}Y>=0&&Y<=D.width-q&&oe>=0&&oe<=D.height-ce&&se.readPixels(Y,oe,q,ce,$.convert(mt),$.convert(ct),ke)}finally{const je=T!==null?ue.get(T).__webglFramebuffer:null;ye.bindFramebuffer(36160,je)}}},this.copyFramebufferToTexture=function(D,Y,oe=0){const q=Math.pow(2,-oe),ce=Math.floor(Y.image.width*q),ke=Math.floor(Y.image.height*q);te.setTexture2D(Y,0),se.copyTexSubImage2D(3553,oe,0,0,D.x,D.y,ce,ke),ye.unbindTexture()},this.copyTextureToTexture=function(D,Y,oe,q=0){const ce=Y.image.width,ke=Y.image.height,Je=$.convert(oe.format),it=$.convert(oe.type);te.setTexture2D(oe,0),se.pixelStorei(37440,oe.flipY),se.pixelStorei(37441,oe.premultiplyAlpha),se.pixelStorei(3317,oe.unpackAlignment),Y.isDataTexture?se.texSubImage2D(3553,q,D.x,D.y,ce,ke,Je,it,Y.image.data):Y.isCompressedTexture?se.compressedTexSubImage2D(3553,q,D.x,D.y,Y.mipmaps[0].width,Y.mipmaps[0].height,Je,Y.mipmaps[0].data):se.texSubImage2D(3553,q,D.x,D.y,Je,it,Y.image),q===0&&oe.generateMipmaps&&se.generateMipmap(3553),ye.unbindTexture()},this.copyTextureToTexture3D=function(D,Y,oe,q,ce=0){if(_.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const ke=D.max.x-D.min.x+1,Je=D.max.y-D.min.y+1,it=D.max.z-D.min.z+1,je=$.convert(q.format),mt=$.convert(q.type);let ct;if(q.isData3DTexture)te.setTexture3D(q,0),ct=32879;else if(q.isDataArrayTexture)te.setTexture2DArray(q,0),ct=35866;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}se.pixelStorei(37440,q.flipY),se.pixelStorei(37441,q.premultiplyAlpha),se.pixelStorei(3317,q.unpackAlignment);const ut=se.getParameter(3314),Lt=se.getParameter(32878),Ei=se.getParameter(3316),Qi=se.getParameter(3315),Ki=se.getParameter(32877),Mn=oe.isCompressedTexture?oe.mipmaps[0]:oe.image;se.pixelStorei(3314,Mn.width),se.pixelStorei(32878,Mn.height),se.pixelStorei(3316,D.min.x),se.pixelStorei(3315,D.min.y),se.pixelStorei(32877,D.min.z),oe.isDataTexture||oe.isData3DTexture?se.texSubImage3D(ct,ce,Y.x,Y.y,Y.z,ke,Je,it,je,mt,Mn.data):oe.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),se.compressedTexSubImage3D(ct,ce,Y.x,Y.y,Y.z,ke,Je,it,je,Mn.data)):se.texSubImage3D(ct,ce,Y.x,Y.y,Y.z,ke,Je,it,je,mt,Mn),se.pixelStorei(3314,ut),se.pixelStorei(32878,Lt),se.pixelStorei(3316,Ei),se.pixelStorei(3315,Qi),se.pixelStorei(32877,Ki),ce===0&&q.generateMipmaps&&se.generateMipmap(ct),ye.unbindTexture()},this.initTexture=function(D){D.isCubeTexture?te.setTextureCube(D,0):D.isData3DTexture?te.setTexture3D(D,0):D.isDataArrayTexture?te.setTexture2DArray(D,0):te.setTexture2D(D,0),ye.unbindTexture()},this.resetState=function(){S=0,w=0,T=null,ye.reset(),Fe.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}class X0 extends Qf{}X0.prototype.isWebGL1Renderer=!0;class qc{constructor(e,t=25e-5){this.isFogExp2=!0,this.name="",this.color=new Le(e),this.density=t}clone(){return new qc(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}class Yc{constructor(e,t=1,n=1e3){this.isFog=!0,this.name="",this.color=new Le(e),this.near=t,this.far=n}clone(){return new Yc(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}class Kf extends _t{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),t}get autoUpdate(){return console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate}set autoUpdate(e){console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate=e}}class Zc{constructor(e,t){this.isInterleavedBuffer=!0,this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=oa,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=Fn()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,n){e*=this.stride,n*=t.stride;for(let i=0,r=this.stride;i<r;i++)this.array[e+i]=t.array[n+i];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Fn()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(t,this.stride);return n.setUsage(this.usage),n}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Fn()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const gn=new I;class cs{constructor(e,t,n,i=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=i===!0}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++)gn.fromBufferAttribute(this,t),gn.applyMatrix4(e),this.setXYZ(t,gn.x,gn.y,gn.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)gn.fromBufferAttribute(this,t),gn.applyNormalMatrix(e),this.setXYZ(t,gn.x,gn.y,gn.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)gn.fromBufferAttribute(this,t),gn.transformDirection(e),this.setXYZ(t,gn.x,gn.y,gn.z);return this}setX(e,t){return this.normalized&&(t=Tt(t,this.array)),this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.normalized&&(t=Tt(t,this.array)),this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.normalized&&(t=Tt(t,this.array)),this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.normalized&&(t=Tt(t,this.array)),this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(t=Wi(t,this.array)),t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(t=Wi(t,this.array)),t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(t=Wi(t,this.array)),t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(t=Wi(t,this.array)),t}setXY(e,t,n){return e=e*this.data.stride+this.offset,this.normalized&&(t=Tt(t,this.array),n=Tt(n,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this}setXYZ(e,t,n,i){return e=e*this.data.stride+this.offset,this.normalized&&(t=Tt(t,this.array),n=Tt(n,this.array),i=Tt(i,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this}setXYZW(e,t,n,i,r){return e=e*this.data.stride+this.offset,this.normalized&&(t=Tt(t,this.array),n=Tt(n,this.array),i=Tt(i,this.array),r=Tt(r,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this.data.array[e+3]=r,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will deinterleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[i+r])}return new Et(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new cs(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will deinterleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[i+r])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class $f extends on{constructor(e){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new Le(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}let Xs;const ko=new I,qs=new I,Ys=new I,Zs=new fe,Vo=new fe,q0=new et,ec=new I,Go=new I,tc=new I,zm=new fe,Ih=new fe,Nm=new fe;class Y0 extends _t{constructor(e){if(super(),this.isSprite=!0,this.type="Sprite",Xs===void 0){Xs=new st;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),n=new Zc(t,5);Xs.setIndex([0,1,2,0,2,3]),Xs.setAttribute("position",new cs(n,3,0,!1)),Xs.setAttribute("uv",new cs(n,2,3,!1))}this.geometry=Xs,this.material=e!==void 0?e:new $f,this.center=new fe(.5,.5)}raycast(e,t){e.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),qs.setFromMatrixScale(this.matrixWorld),q0.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),Ys.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&qs.multiplyScalar(-Ys.z);const n=this.material.rotation;let i,r;n!==0&&(r=Math.cos(n),i=Math.sin(n));const a=this.center;nc(ec.set(-.5,-.5,0),Ys,a,qs,i,r),nc(Go.set(.5,-.5,0),Ys,a,qs,i,r),nc(tc.set(.5,.5,0),Ys,a,qs,i,r),zm.set(0,0),Ih.set(1,0),Nm.set(1,1);let c=e.ray.intersectTriangle(ec,Go,tc,!1,ko);if(c===null&&(nc(Go.set(-.5,.5,0),Ys,a,qs,i,r),Ih.set(0,1),c=e.ray.intersectTriangle(ec,tc,Go,!1,ko),c===null))return;const u=e.ray.origin.distanceTo(ko);u<e.near||u>e.far||t.push({distance:u,point:ko.clone(),uv:ei.getUV(ko,ec,Go,tc,zm,Ih,Nm,new fe),face:null,object:this})}copy(e,t){return super.copy(e,t),e.center!==void 0&&this.center.copy(e.center),this.material=e.material,this}}function nc(l,e,t,n,i,r){Zs.subVectors(l,t).addScalar(.5).multiply(n),i!==void 0?(Vo.x=r*Zs.x-i*Zs.y,Vo.y=i*Zs.x+r*Zs.y):Vo.copy(Zs),l.copy(e),l.x+=Vo.x,l.y+=Vo.y,l.applyMatrix4(q0)}const ic=new I,Fm=new I;class Z0 extends _t{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(e){super.copy(e,!1);const t=e.levels;for(let n=0,i=t.length;n<i;n++){const r=t[n];this.addLevel(r.object.clone(),r.distance)}return this.autoUpdate=e.autoUpdate,this}addLevel(e,t=0){t=Math.abs(t);const n=this.levels;let i;for(i=0;i<n.length&&!(t<n[i].distance);i++);return n.splice(i,0,{distance:t,object:e}),this.add(e),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(e){const t=this.levels;if(t.length>0){let n,i;for(n=1,i=t.length;n<i&&!(e<t[n].distance);n++);return t[n-1].object}return null}raycast(e,t){if(this.levels.length>0){ic.setFromMatrixPosition(this.matrixWorld);const i=e.ray.origin.distanceTo(ic);this.getObjectForDistance(i).raycast(e,t)}}update(e){const t=this.levels;if(t.length>1){ic.setFromMatrixPosition(e.matrixWorld),Fm.setFromMatrixPosition(this.matrixWorld);const n=ic.distanceTo(Fm)/e.zoom;t[0].object.visible=!0;let i,r;for(i=1,r=t.length;i<r&&n>=t[i].distance;i++)t[i-1].object.visible=!1,t[i].object.visible=!0;for(this._currentLevel=i-1;i<r;i++)t[i].object.visible=!1}}toJSON(e){const t=super.toJSON(e);this.autoUpdate===!1&&(t.object.autoUpdate=!1),t.object.levels=[];const n=this.levels;for(let i=0,r=n.length;i<r;i++){const a=n[i];t.object.levels.push({object:a.object.uuid,distance:a.distance})}return t}}const Om=new I,Um=new wt,Bm=new wt,Uw=new I,km=new et;class J0 extends sn{constructor(e,t){super(e,t),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new et,this.bindMatrixInverse=new et}copy(e,t){return super.copy(e,t),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,this}bind(e,t){this.skeleton=e,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new wt,t=this.geometry.attributes.skinWeight;for(let n=0,i=t.count;n<i;n++){e.fromBufferAttribute(t,n);const r=1/e.manhattanLength();r!==1/0?e.multiplyScalar(r):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode==="attached"?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode==="detached"?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(e,t){const n=this.skeleton,i=this.geometry;Um.fromBufferAttribute(i.attributes.skinIndex,e),Bm.fromBufferAttribute(i.attributes.skinWeight,e),Om.copy(t).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let r=0;r<4;r++){const a=Bm.getComponent(r);if(a!==0){const c=Um.getComponent(r);km.multiplyMatrices(n.bones[c].matrixWorld,n.boneInverses[c]),t.addScaledVector(Uw.copy(Om).applyMatrix4(km),a)}}return t.applyMatrix4(this.bindMatrixInverse)}}class ed extends _t{constructor(){super(),this.isBone=!0,this.type="Bone"}}class io extends Zt{constructor(e=null,t=1,n=1,i,r,a,c,u,h=Yt,d=Yt,p,m){super(null,a,c,u,h,d,i,r,p,m),this.isDataTexture=!0,this.image={data:e,width:t,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const Vm=new et,Bw=new et;class Jc{constructor(e=[],t=[]){this.uuid=Fn(),this.bones=e.slice(0),this.boneInverses=t,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const e=this.bones,t=this.boneInverses;if(this.boneMatrices=new Float32Array(e.length*16),t.length===0)this.calculateInverses();else if(e.length!==t.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let n=0,i=this.bones.length;n<i;n++)this.boneInverses.push(new et)}}calculateInverses(){this.boneInverses.length=0;for(let e=0,t=this.bones.length;e<t;e++){const n=new et;this.bones[e]&&n.copy(this.bones[e].matrixWorld).invert(),this.boneInverses.push(n)}}pose(){for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&n.matrixWorld.copy(this.boneInverses[e]).invert()}for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&(n.parent&&n.parent.isBone?(n.matrix.copy(n.parent.matrixWorld).invert(),n.matrix.multiply(n.matrixWorld)):n.matrix.copy(n.matrixWorld),n.matrix.decompose(n.position,n.quaternion,n.scale))}}update(){const e=this.bones,t=this.boneInverses,n=this.boneMatrices,i=this.boneTexture;for(let r=0,a=e.length;r<a;r++){const c=e[r]?e[r].matrixWorld:Bw;Vm.multiplyMatrices(c,t[r]),Vm.toArray(n,r*16)}i!==null&&(i.needsUpdate=!0)}clone(){return new Jc(this.bones,this.boneInverses)}computeBoneTexture(){let e=Math.sqrt(this.bones.length*4);e=R0(e),e=Math.max(e,4);const t=new Float32Array(e*e*4);t.set(this.boneMatrices);const n=new io(t,e,e,ti,Hi);return n.needsUpdate=!0,this.boneMatrices=t,this.boneTexture=n,this.boneTextureSize=e,this}getBoneByName(e){for(let t=0,n=this.bones.length;t<n;t++){const i=this.bones[t];if(i.name===e)return i}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(e,t){this.uuid=e.uuid;for(let n=0,i=e.bones.length;n<i;n++){const r=e.bones[n];let a=t[r];a===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",r),a=new ed),this.bones.push(a),this.boneInverses.push(new et().fromArray(e.boneInverses[n]))}return this.init(),this}toJSON(){const e={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};e.uuid=this.uuid;const t=this.bones,n=this.boneInverses;for(let i=0,r=t.length;i<r;i++){const a=t[i];e.bones.push(a.uuid);const c=n[i];e.boneInverses.push(c.toArray())}return e}}class oo extends Et{constructor(e,t,n,i=1){super(e,t,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=i}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}const Gm=new et,Hm=new et,rc=[],Ho=new sn;class j0 extends sn{constructor(e,t,n){super(e,t),this.isInstancedMesh=!0,this.instanceMatrix=new oo(new Float32Array(n*16),16),this.instanceColor=null,this.count=n,this.frustumCulled=!1}copy(e,t){return super.copy(e,t),this.instanceMatrix.copy(e.instanceMatrix),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}raycast(e,t){const n=this.matrixWorld,i=this.count;if(Ho.geometry=this.geometry,Ho.material=this.material,Ho.material!==void 0)for(let r=0;r<i;r++){this.getMatrixAt(r,Gm),Hm.multiplyMatrices(n,Gm),Ho.matrixWorld=Hm,Ho.raycast(e,rc);for(let a=0,c=rc.length;a<c;a++){const u=rc[a];u.instanceId=r,u.object=this,t.push(u)}rc.length=0}}setColorAt(e,t){this.instanceColor===null&&(this.instanceColor=new oo(new Float32Array(this.instanceMatrix.count*3),3)),t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}class yn extends on{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new Le(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const Wm=new I,Xm=new I,qm=new et,Dh=new _a,sc=new ds;class Sr extends _t{constructor(e=new st,t=new yn){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[0];for(let i=1,r=t.count;i<r;i++)Wm.fromBufferAttribute(t,i-1),Xm.fromBufferAttribute(t,i),n[i]=n[i-1],n[i]+=Wm.distanceTo(Xm);e.setAttribute("lineDistance",new De(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,r=e.params.Line.threshold,a=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),sc.copy(n.boundingSphere),sc.applyMatrix4(i),sc.radius+=r,e.ray.intersectsSphere(sc)===!1)return;qm.copy(i).invert(),Dh.copy(e.ray).applyMatrix4(qm);const c=r/((this.scale.x+this.scale.y+this.scale.z)/3),u=c*c,h=new I,d=new I,p=new I,m=new I,v=this.isLineSegments?2:1,x=n.index,y=n.attributes.position;if(x!==null){const S=Math.max(0,a.start),w=Math.min(x.count,a.start+a.count);for(let T=S,E=w-1;T<E;T+=v){const C=x.getX(T),P=x.getX(T+1);if(h.fromBufferAttribute(y,C),d.fromBufferAttribute(y,P),Dh.distanceSqToSegment(h,d,m,p)>u)continue;m.applyMatrix4(this.matrixWorld);const A=e.ray.origin.distanceTo(m);A<e.near||A>e.far||t.push({distance:A,point:p.clone().applyMatrix4(this.matrixWorld),index:T,face:null,faceIndex:null,object:this})}}else{const S=Math.max(0,a.start),w=Math.min(y.count,a.start+a.count);for(let T=S,E=w-1;T<E;T+=v){if(h.fromBufferAttribute(y,T),d.fromBufferAttribute(y,T+1),Dh.distanceSqToSegment(h,d,m,p)>u)continue;m.applyMatrix4(this.matrixWorld);const P=e.ray.origin.distanceTo(m);P<e.near||P>e.far||t.push({distance:P,point:p.clone().applyMatrix4(this.matrixWorld),index:T,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,a=i.length;r<a;r++){const c=i[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[c]=r}}}}}const Ym=new I,Zm=new I;class Ti extends Sr{constructor(e,t){super(e,t),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[];for(let i=0,r=t.count;i<r;i+=2)Ym.fromBufferAttribute(t,i),Zm.fromBufferAttribute(t,i+1),n[i]=i===0?0:n[i-1],n[i+1]=n[i]+Ym.distanceTo(Zm);e.setAttribute("lineDistance",new De(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class Q0 extends Sr{constructor(e,t){super(e,t),this.isLineLoop=!0,this.type="LineLoop"}}class jc extends on{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new Le(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}const Jm=new et,Ef=new _a,oc=new ds,ac=new I;class K0 extends _t{constructor(e=new st,t=new jc){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=e.material,this.geometry=e.geometry,this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,r=e.params.Points.threshold,a=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),oc.copy(n.boundingSphere),oc.applyMatrix4(i),oc.radius+=r,e.ray.intersectsSphere(oc)===!1)return;Jm.copy(i).invert(),Ef.copy(e.ray).applyMatrix4(Jm);const c=r/((this.scale.x+this.scale.y+this.scale.z)/3),u=c*c,h=n.index,p=n.attributes.position;if(h!==null){const m=Math.max(0,a.start),v=Math.min(h.count,a.start+a.count);for(let x=m,_=v;x<_;x++){const y=h.getX(x);ac.fromBufferAttribute(p,y),jm(ac,y,u,i,e,t,this)}}else{const m=Math.max(0,a.start),v=Math.min(p.count,a.start+a.count);for(let x=m,_=v;x<_;x++)ac.fromBufferAttribute(p,x),jm(ac,x,u,i,e,t,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,a=i.length;r<a;r++){const c=i[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[c]=r}}}}}function jm(l,e,t,n,i,r,a){const c=Ef.distanceSqToPoint(l);if(c<t){const u=new I;Ef.closestPointToPoint(l,u),u.applyMatrix4(n);const h=i.ray.origin.distanceTo(u);if(h<i.near||h>i.far)return;r.push({distance:h,distanceToRay:Math.sqrt(c),point:u,index:e,face:null,object:a})}}class kw extends Zt{constructor(e,t,n,i,r,a,c,u,h){super(e,t,n,i,r,a,c,u,h),this.isVideoTexture=!0,this.minFilter=a!==void 0?a:Vt,this.magFilter=r!==void 0?r:Vt,this.generateMipmaps=!1;const d=this;function p(){d.needsUpdate=!0,e.requestVideoFrameCallback(p)}"requestVideoFrameCallback"in e&&e.requestVideoFrameCallback(p)}clone(){return new this.constructor(this.image).copy(this)}update(){const e=this.image;"requestVideoFrameCallback"in e===!1&&e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}class Vw extends Zt{constructor(e,t,n){super({width:e,height:t}),this.isFramebufferTexture=!0,this.format=n,this.magFilter=Yt,this.minFilter=Yt,this.generateMipmaps=!1,this.needsUpdate=!0}}class $0 extends Zt{constructor(e,t,n,i,r,a,c,u,h,d,p,m){super(null,a,c,u,h,d,i,r,p,m),this.isCompressedTexture=!0,this.image={width:t,height:n},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}}class Gw extends Zt{constructor(e,t,n,i,r,a,c,u,h){super(e,t,n,i,r,a,c,u,h),this.isCanvasTexture=!0,this.needsUpdate=!0}}class fi{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)}getPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return t}getSpacedPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPointAt(n/e));return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let n,i=this.getPoint(0),r=0;t.push(0);for(let a=1;a<=e;a++)n=this.getPoint(a/e),r+=n.distanceTo(i),t.push(r),i=n;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,t){const n=this.getLengths();let i=0;const r=n.length;let a;t?a=t:a=e*n[r-1];let c=0,u=r-1,h;for(;c<=u;)if(i=Math.floor(c+(u-c)/2),h=n[i]-a,h<0)c=i+1;else if(h>0)u=i-1;else{u=i;break}if(i=u,n[i]===a)return i/(r-1);const d=n[i],m=n[i+1]-d,v=(a-d)/m;return(i+v)/(r-1)}getTangent(e,t){let i=e-1e-4,r=e+1e-4;i<0&&(i=0),r>1&&(r=1);const a=this.getPoint(i),c=this.getPoint(r),u=t||(a.isVector2?new fe:new I);return u.copy(c).sub(a).normalize(),u}getTangentAt(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)}computeFrenetFrames(e,t){const n=new I,i=[],r=[],a=[],c=new I,u=new et;for(let v=0;v<=e;v++){const x=v/e;i[v]=this.getTangentAt(x,new I)}r[0]=new I,a[0]=new I;let h=Number.MAX_VALUE;const d=Math.abs(i[0].x),p=Math.abs(i[0].y),m=Math.abs(i[0].z);d<=h&&(h=d,n.set(1,0,0)),p<=h&&(h=p,n.set(0,1,0)),m<=h&&n.set(0,0,1),c.crossVectors(i[0],n).normalize(),r[0].crossVectors(i[0],c),a[0].crossVectors(i[0],r[0]);for(let v=1;v<=e;v++){if(r[v]=r[v-1].clone(),a[v]=a[v-1].clone(),c.crossVectors(i[v-1],i[v]),c.length()>Number.EPSILON){c.normalize();const x=Math.acos(Gt(i[v-1].dot(i[v]),-1,1));r[v].applyMatrix4(u.makeRotationAxis(c,x))}a[v].crossVectors(i[v],r[v])}if(t===!0){let v=Math.acos(Gt(r[0].dot(r[e]),-1,1));v/=e,i[0].dot(c.crossVectors(r[0],r[e]))>0&&(v=-v);for(let x=1;x<=e;x++)r[x].applyMatrix4(u.makeRotationAxis(i[x],v*x)),a[x].crossVectors(i[x],r[x])}return{tangents:i,normals:r,binormals:a}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class Qc extends fi{constructor(e=0,t=0,n=1,i=1,r=0,a=Math.PI*2,c=!1,u=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=n,this.yRadius=i,this.aStartAngle=r,this.aEndAngle=a,this.aClockwise=c,this.aRotation=u}getPoint(e,t){const n=t||new fe,i=Math.PI*2;let r=this.aEndAngle-this.aStartAngle;const a=Math.abs(r)<Number.EPSILON;for(;r<0;)r+=i;for(;r>i;)r-=i;r<Number.EPSILON&&(a?r=0:r=i),this.aClockwise===!0&&!a&&(r===i?r=-i:r=r-i);const c=this.aStartAngle+e*r;let u=this.aX+this.xRadius*Math.cos(c),h=this.aY+this.yRadius*Math.sin(c);if(this.aRotation!==0){const d=Math.cos(this.aRotation),p=Math.sin(this.aRotation),m=u-this.aX,v=h-this.aY;u=m*d-v*p+this.aX,h=m*p+v*d+this.aY}return n.set(u,h)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}class ev extends Qc{constructor(e,t,n,i,r,a){super(e,t,n,n,i,r,a),this.isArcCurve=!0,this.type="ArcCurve"}}function td(){let l=0,e=0,t=0,n=0;function i(r,a,c,u){l=r,e=c,t=-3*r+3*a-2*c-u,n=2*r-2*a+c+u}return{initCatmullRom:function(r,a,c,u,h){i(a,c,h*(c-r),h*(u-a))},initNonuniformCatmullRom:function(r,a,c,u,h,d,p){let m=(a-r)/h-(c-r)/(h+d)+(c-a)/d,v=(c-a)/d-(u-a)/(d+p)+(u-c)/p;m*=d,v*=d,i(a,c,m,v)},calc:function(r){const a=r*r,c=a*r;return l+e*r+t*a+n*c}}}const lc=new I,zh=new td,Nh=new td,Fh=new td;class tv extends fi{constructor(e=[],t=!1,n="centripetal",i=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=n,this.tension=i}getPoint(e,t=new I){const n=t,i=this.points,r=i.length,a=(r-(this.closed?0:1))*e;let c=Math.floor(a),u=a-c;this.closed?c+=c>0?0:(Math.floor(Math.abs(c)/r)+1)*r:u===0&&c===r-1&&(c=r-2,u=1);let h,d;this.closed||c>0?h=i[(c-1)%r]:(lc.subVectors(i[0],i[1]).add(i[0]),h=lc);const p=i[c%r],m=i[(c+1)%r];if(this.closed||c+2<r?d=i[(c+2)%r]:(lc.subVectors(i[r-1],i[r-2]).add(i[r-1]),d=lc),this.curveType==="centripetal"||this.curveType==="chordal"){const v=this.curveType==="chordal"?.5:.25;let x=Math.pow(h.distanceToSquared(p),v),_=Math.pow(p.distanceToSquared(m),v),y=Math.pow(m.distanceToSquared(d),v);_<1e-4&&(_=1),x<1e-4&&(x=_),y<1e-4&&(y=_),zh.initNonuniformCatmullRom(h.x,p.x,m.x,d.x,x,_,y),Nh.initNonuniformCatmullRom(h.y,p.y,m.y,d.y,x,_,y),Fh.initNonuniformCatmullRom(h.z,p.z,m.z,d.z,x,_,y)}else this.curveType==="catmullrom"&&(zh.initCatmullRom(h.x,p.x,m.x,d.x,this.tension),Nh.initCatmullRom(h.y,p.y,m.y,d.y,this.tension),Fh.initCatmullRom(h.z,p.z,m.z,d.z,this.tension));return n.set(zh.calc(u),Nh.calc(u),Fh.calc(u)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new I().fromArray(i))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}}function Qm(l,e,t,n,i){const r=(n-e)*.5,a=(i-t)*.5,c=l*l,u=l*c;return(2*t-2*n+r+a)*u+(-3*t+3*n-2*r-a)*c+r*l+t}function Hw(l,e){const t=1-l;return t*t*e}function Ww(l,e){return 2*(1-l)*l*e}function Xw(l,e){return l*l*e}function Qo(l,e,t,n){return Hw(l,e)+Ww(l,t)+Xw(l,n)}function qw(l,e){const t=1-l;return t*t*t*e}function Yw(l,e){const t=1-l;return 3*t*t*l*e}function Zw(l,e){return 3*(1-l)*l*l*e}function Jw(l,e){return l*l*l*e}function Ko(l,e,t,n,i){return qw(l,e)+Yw(l,t)+Zw(l,n)+Jw(l,i)}class nd extends fi{constructor(e=new fe,t=new fe,n=new fe,i=new fe){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new fe){const n=t,i=this.v0,r=this.v1,a=this.v2,c=this.v3;return n.set(Ko(e,i.x,r.x,a.x,c.x),Ko(e,i.y,r.y,a.y,c.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class nv extends fi{constructor(e=new I,t=new I,n=new I,i=new I){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new I){const n=t,i=this.v0,r=this.v1,a=this.v2,c=this.v3;return n.set(Ko(e,i.x,r.x,a.x,c.x),Ko(e,i.y,r.y,a.y,c.y),Ko(e,i.z,r.z,a.z,c.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class Kc extends fi{constructor(e=new fe,t=new fe){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new fe){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t){const n=t||new fe;return n.copy(this.v2).sub(this.v1).normalize(),n}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class iv extends fi{constructor(e=new I,t=new I){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=e,this.v2=t}getPoint(e,t=new I){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class id extends fi{constructor(e=new fe,t=new fe,n=new fe){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new fe){const n=t,i=this.v0,r=this.v1,a=this.v2;return n.set(Qo(e,i.x,r.x,a.x),Qo(e,i.y,r.y,a.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class rd extends fi{constructor(e=new I,t=new I,n=new I){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new I){const n=t,i=this.v0,r=this.v1,a=this.v2;return n.set(Qo(e,i.x,r.x,a.x),Qo(e,i.y,r.y,a.y),Qo(e,i.z,r.z,a.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class sd extends fi{constructor(e=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=e}getPoint(e,t=new fe){const n=t,i=this.points,r=(i.length-1)*e,a=Math.floor(r),c=r-a,u=i[a===0?a:a-1],h=i[a],d=i[a>i.length-2?i.length-1:a+1],p=i[a>i.length-3?i.length-1:a+2];return n.set(Qm(c,u.x,h.x,d.x,p.x),Qm(c,u.y,h.y,d.y,p.y)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new fe().fromArray(i))}return this}}var od=Object.freeze({__proto__:null,ArcCurve:ev,CatmullRomCurve3:tv,CubicBezierCurve:nd,CubicBezierCurve3:nv,EllipseCurve:Qc,LineCurve:Kc,LineCurve3:iv,QuadraticBezierCurve:id,QuadraticBezierCurve3:rd,SplineCurve:sd});class rv extends fi{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new Kc(t,e))}getPoint(e,t){const n=e*this.getLength(),i=this.getCurveLengths();let r=0;for(;r<i.length;){if(i[r]>=n){const a=i[r]-n,c=this.curves[r],u=c.getLength(),h=u===0?0:1-a/u;return c.getPointAt(h,t)}r++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let t=0;for(let n=0,i=this.curves.length;n<i;n++)t+=this.curves[n].getLength(),e.push(t);return this.cacheLengths=e,e}getSpacedPoints(e=40){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){const t=[];let n;for(let i=0,r=this.curves;i<r.length;i++){const a=r[i],c=a.isEllipseCurve?e*2:a.isLineCurve||a.isLineCurve3?1:a.isSplineCurve?e*a.points.length:e,u=a.getPoints(c);for(let h=0;h<u.length;h++){const d=u[h];n&&n.equals(d)||(t.push(d),n=d)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(e){super.copy(e),this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(i.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,n=this.curves.length;t<n;t++){const i=this.curves[t];e.curves.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(new od[i.type]().fromJSON(i))}return this}}class ca extends rv{constructor(e){super(),this.type="Path",this.currentPoint=new fe,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,n=e.length;t<n;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){const n=new Kc(this.currentPoint.clone(),new fe(e,t));return this.curves.push(n),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,n,i){const r=new id(this.currentPoint.clone(),new fe(e,t),new fe(n,i));return this.curves.push(r),this.currentPoint.set(n,i),this}bezierCurveTo(e,t,n,i,r,a){const c=new nd(this.currentPoint.clone(),new fe(e,t),new fe(n,i),new fe(r,a));return this.curves.push(c),this.currentPoint.set(r,a),this}splineThru(e){const t=[this.currentPoint.clone()].concat(e),n=new sd(t);return this.curves.push(n),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,n,i,r,a){const c=this.currentPoint.x,u=this.currentPoint.y;return this.absarc(e+c,t+u,n,i,r,a),this}absarc(e,t,n,i,r,a){return this.absellipse(e,t,n,n,i,r,a),this}ellipse(e,t,n,i,r,a,c,u){const h=this.currentPoint.x,d=this.currentPoint.y;return this.absellipse(e+h,t+d,n,i,r,a,c,u),this}absellipse(e,t,n,i,r,a,c,u){const h=new Qc(e,t,n,i,r,a,c,u);if(this.curves.length>0){const p=h.getPoint(0);p.equals(this.currentPoint)||this.lineTo(p.x,p.y)}this.curves.push(h);const d=h.getPoint(1);return this.currentPoint.copy(d),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class fo extends st{constructor(e=[new fe(0,-.5),new fe(.5,0),new fe(0,.5)],t=12,n=0,i=Math.PI*2){super(),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:n,phiLength:i},t=Math.floor(t),i=Gt(i,0,Math.PI*2);const r=[],a=[],c=[],u=[],h=[],d=1/t,p=new I,m=new fe,v=new I,x=new I,_=new I;let y=0,S=0;for(let w=0;w<=e.length-1;w++)switch(w){case 0:y=e[w+1].x-e[w].x,S=e[w+1].y-e[w].y,v.x=S*1,v.y=-y,v.z=S*0,_.copy(v),v.normalize(),u.push(v.x,v.y,v.z);break;case e.length-1:u.push(_.x,_.y,_.z);break;default:y=e[w+1].x-e[w].x,S=e[w+1].y-e[w].y,v.x=S*1,v.y=-y,v.z=S*0,x.copy(v),v.x+=_.x,v.y+=_.y,v.z+=_.z,v.normalize(),u.push(v.x,v.y,v.z),_.copy(x)}for(let w=0;w<=t;w++){const T=n+w*d*i,E=Math.sin(T),C=Math.cos(T);for(let P=0;P<=e.length-1;P++){p.x=e[P].x*E,p.y=e[P].y,p.z=e[P].x*C,a.push(p.x,p.y,p.z),m.x=w/t,m.y=P/(e.length-1),c.push(m.x,m.y);const N=u[3*P+0]*E,A=u[3*P+1],L=u[3*P+0]*C;h.push(N,A,L)}}for(let w=0;w<t;w++)for(let T=0;T<e.length-1;T++){const E=T+w*e.length,C=E,P=E+e.length,N=E+e.length+1,A=E+1;r.push(C,P,A),r.push(N,A,P)}this.setIndex(r),this.setAttribute("position",new De(a,3)),this.setAttribute("uv",new De(c,2)),this.setAttribute("normal",new De(h,3))}static fromJSON(e){return new fo(e.points,e.segments,e.phiStart,e.phiLength)}}class wa extends fo{constructor(e=1,t=1,n=4,i=8){const r=new ca;r.absarc(0,-t/2,e,Math.PI*1.5,0),r.absarc(0,t/2,e,0,Math.PI*.5),super(r.getPoints(n),i),this.type="CapsuleGeometry",this.parameters={radius:e,height:t,capSegments:n,radialSegments:i}}static fromJSON(e){return new wa(e.radius,e.length,e.capSegments,e.radialSegments)}}class ba extends st{constructor(e=1,t=8,n=0,i=Math.PI*2){super(),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:i},t=Math.max(3,t);const r=[],a=[],c=[],u=[],h=new I,d=new fe;a.push(0,0,0),c.push(0,0,1),u.push(.5,.5);for(let p=0,m=3;p<=t;p++,m+=3){const v=n+p/t*i;h.x=e*Math.cos(v),h.y=e*Math.sin(v),a.push(h.x,h.y,h.z),c.push(0,0,1),d.x=(a[m]/e+1)/2,d.y=(a[m+1]/e+1)/2,u.push(d.x,d.y)}for(let p=1;p<=t;p++)r.push(p,p+1,0);this.setIndex(r),this.setAttribute("position",new De(a,3)),this.setAttribute("normal",new De(c,3)),this.setAttribute("uv",new De(u,2))}static fromJSON(e){return new ba(e.radius,e.segments,e.thetaStart,e.thetaLength)}}class ps extends st{constructor(e=1,t=1,n=1,i=8,r=1,a=!1,c=0,u=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:i,heightSegments:r,openEnded:a,thetaStart:c,thetaLength:u};const h=this;i=Math.floor(i),r=Math.floor(r);const d=[],p=[],m=[],v=[];let x=0;const _=[],y=n/2;let S=0;w(),a===!1&&(e>0&&T(!0),t>0&&T(!1)),this.setIndex(d),this.setAttribute("position",new De(p,3)),this.setAttribute("normal",new De(m,3)),this.setAttribute("uv",new De(v,2));function w(){const E=new I,C=new I;let P=0;const N=(t-e)/n;for(let A=0;A<=r;A++){const L=[],O=A/r,X=O*(t-e)+e;for(let ae=0;ae<=i;ae++){const J=ae/i,H=J*u+c,K=Math.sin(H),ie=Math.cos(H);C.x=X*K,C.y=-O*n+y,C.z=X*ie,p.push(C.x,C.y,C.z),E.set(K,N,ie).normalize(),m.push(E.x,E.y,E.z),v.push(J,1-O),L.push(x++)}_.push(L)}for(let A=0;A<i;A++)for(let L=0;L<r;L++){const O=_[L][A],X=_[L+1][A],ae=_[L+1][A+1],J=_[L][A+1];d.push(O,X,J),d.push(X,ae,J),P+=6}h.addGroup(S,P,0),S+=P}function T(E){const C=x,P=new fe,N=new I;let A=0;const L=E===!0?e:t,O=E===!0?1:-1;for(let ae=1;ae<=i;ae++)p.push(0,y*O,0),m.push(0,O,0),v.push(.5,.5),x++;const X=x;for(let ae=0;ae<=i;ae++){const H=ae/i*u+c,K=Math.cos(H),ie=Math.sin(H);N.x=L*ie,N.y=y*O,N.z=L*K,p.push(N.x,N.y,N.z),m.push(0,O,0),P.x=K*.5+.5,P.y=ie*.5*O+.5,v.push(P.x,P.y),x++}for(let ae=0;ae<i;ae++){const J=C+ae,H=X+ae;E===!0?d.push(H,H+1,J):d.push(H+1,H,J),A+=3}h.addGroup(S,A,E===!0?1:2),S+=A}}static fromJSON(e){return new ps(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class Ta extends ps{constructor(e=1,t=1,n=8,i=1,r=!1,a=0,c=Math.PI*2){super(0,e,t,n,i,r,a,c),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:i,openEnded:r,thetaStart:a,thetaLength:c}}static fromJSON(e){return new Ta(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class ji extends st{constructor(e=[],t=[],n=1,i=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:n,detail:i};const r=[],a=[];c(i),h(n),d(),this.setAttribute("position",new De(r,3)),this.setAttribute("normal",new De(r.slice(),3)),this.setAttribute("uv",new De(a,2)),i===0?this.computeVertexNormals():this.normalizeNormals();function c(w){const T=new I,E=new I,C=new I;for(let P=0;P<t.length;P+=3)v(t[P+0],T),v(t[P+1],E),v(t[P+2],C),u(T,E,C,w)}function u(w,T,E,C){const P=C+1,N=[];for(let A=0;A<=P;A++){N[A]=[];const L=w.clone().lerp(E,A/P),O=T.clone().lerp(E,A/P),X=P-A;for(let ae=0;ae<=X;ae++)ae===0&&A===P?N[A][ae]=L:N[A][ae]=L.clone().lerp(O,ae/X)}for(let A=0;A<P;A++)for(let L=0;L<2*(P-A)-1;L++){const O=Math.floor(L/2);L%2===0?(m(N[A][O+1]),m(N[A+1][O]),m(N[A][O])):(m(N[A][O+1]),m(N[A+1][O+1]),m(N[A+1][O]))}}function h(w){const T=new I;for(let E=0;E<r.length;E+=3)T.x=r[E+0],T.y=r[E+1],T.z=r[E+2],T.normalize().multiplyScalar(w),r[E+0]=T.x,r[E+1]=T.y,r[E+2]=T.z}function d(){const w=new I;for(let T=0;T<r.length;T+=3){w.x=r[T+0],w.y=r[T+1],w.z=r[T+2];const E=y(w)/2/Math.PI+.5,C=S(w)/Math.PI+.5;a.push(E,1-C)}x(),p()}function p(){for(let w=0;w<a.length;w+=6){const T=a[w+0],E=a[w+2],C=a[w+4],P=Math.max(T,E,C),N=Math.min(T,E,C);P>.9&&N<.1&&(T<.2&&(a[w+0]+=1),E<.2&&(a[w+2]+=1),C<.2&&(a[w+4]+=1))}}function m(w){r.push(w.x,w.y,w.z)}function v(w,T){const E=w*3;T.x=e[E+0],T.y=e[E+1],T.z=e[E+2]}function x(){const w=new I,T=new I,E=new I,C=new I,P=new fe,N=new fe,A=new fe;for(let L=0,O=0;L<r.length;L+=9,O+=6){w.set(r[L+0],r[L+1],r[L+2]),T.set(r[L+3],r[L+4],r[L+5]),E.set(r[L+6],r[L+7],r[L+8]),P.set(a[O+0],a[O+1]),N.set(a[O+2],a[O+3]),A.set(a[O+4],a[O+5]),C.copy(w).add(T).add(E).divideScalar(3);const X=y(C);_(P,O+0,w,X),_(N,O+2,T,X),_(A,O+4,E,X)}}function _(w,T,E,C){C<0&&w.x===1&&(a[T]=w.x-1),E.x===0&&E.z===0&&(a[T]=C/2/Math.PI+.5)}function y(w){return Math.atan2(w.z,-w.x)}function S(w){return Math.atan2(-w.y,Math.sqrt(w.x*w.x+w.z*w.z))}}static fromJSON(e){return new ji(e.vertices,e.indices,e.radius,e.details)}}class Ea extends ji{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2,i=1/n,r=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-n,0,-i,n,0,i,-n,0,i,n,-i,-n,0,-i,n,0,i,-n,0,i,n,0,-n,0,-i,n,0,-i,-n,0,i,n,0,i],a=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(r,a,e,t),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new Ea(e.radius,e.detail)}}const cc=new I,uc=new I,Oh=new I,hc=new ei;class sv extends st{constructor(e=null,t=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:e,thresholdAngle:t},e!==null){const i=Math.pow(10,4),r=Math.cos(is*t),a=e.getIndex(),c=e.getAttribute("position"),u=a?a.count:c.count,h=[0,0,0],d=["a","b","c"],p=new Array(3),m={},v=[];for(let x=0;x<u;x+=3){a?(h[0]=a.getX(x),h[1]=a.getX(x+1),h[2]=a.getX(x+2)):(h[0]=x,h[1]=x+1,h[2]=x+2);const{a:_,b:y,c:S}=hc;if(_.fromBufferAttribute(c,h[0]),y.fromBufferAttribute(c,h[1]),S.fromBufferAttribute(c,h[2]),hc.getNormal(Oh),p[0]=`${Math.round(_.x*i)},${Math.round(_.y*i)},${Math.round(_.z*i)}`,p[1]=`${Math.round(y.x*i)},${Math.round(y.y*i)},${Math.round(y.z*i)}`,p[2]=`${Math.round(S.x*i)},${Math.round(S.y*i)},${Math.round(S.z*i)}`,!(p[0]===p[1]||p[1]===p[2]||p[2]===p[0]))for(let w=0;w<3;w++){const T=(w+1)%3,E=p[w],C=p[T],P=hc[d[w]],N=hc[d[T]],A=`${E}_${C}`,L=`${C}_${E}`;L in m&&m[L]?(Oh.dot(m[L].normal)<=r&&(v.push(P.x,P.y,P.z),v.push(N.x,N.y,N.z)),m[L]=null):A in m||(m[A]={index0:h[w],index1:h[T],normal:Oh.clone()})}}for(const x in m)if(m[x]){const{index0:_,index1:y}=m[x];cc.fromBufferAttribute(c,_),uc.fromBufferAttribute(c,y),v.push(cc.x,cc.y,cc.z),v.push(uc.x,uc.y,uc.z)}this.setAttribute("position",new De(v,3))}}}class os extends ca{constructor(e){super(e),this.uuid=Fn(),this.type="Shape",this.holes=[]}getPointsHoles(e){const t=[];for(let n=0,i=this.holes.length;n<i;n++)t[n]=this.holes[n].getPoints(e);return t}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let t=0,n=this.holes.length;t<n;t++){const i=this.holes[t];e.holes.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(new ca().fromJSON(i))}return this}}const jw={triangulate:function(l,e,t=2){const n=e&&e.length,i=n?e[0]*t:l.length;let r=ov(l,0,i,t,!0);const a=[];if(!r||r.next===r.prev)return a;let c,u,h,d,p,m,v;if(n&&(r=tb(l,e,r,t)),l.length>80*t){c=h=l[0],u=d=l[1];for(let x=t;x<i;x+=t)p=l[x],m=l[x+1],p<c&&(c=p),m<u&&(u=m),p>h&&(h=p),m>d&&(d=m);v=Math.max(h-c,d-u),v=v!==0?1/v:0}return ua(r,a,t,c,u,v),a}};function ov(l,e,t,n,i){let r,a;if(i===fb(l,e,t,n)>0)for(r=e;r<t;r+=n)a=Km(r,l[r],l[r+1],a);else for(r=t-n;r>=e;r-=n)a=Km(r,l[r],l[r+1],a);return a&&$c(a,a.next)&&(fa(a),a=a.next),a}function wr(l,e){if(!l)return l;e||(e=l);let t=l,n;do if(n=!1,!t.steiner&&($c(t,t.next)||Nt(t.prev,t,t.next)===0)){if(fa(t),t=e=t.prev,t===t.next)break;n=!0}else t=t.next;while(n||t!==e);return e}function ua(l,e,t,n,i,r,a){if(!l)return;!a&&r&&ob(l,n,i,r);let c=l,u,h;for(;l.prev!==l.next;){if(u=l.prev,h=l.next,r?Kw(l,n,i,r):Qw(l)){e.push(u.i/t),e.push(l.i/t),e.push(h.i/t),fa(l),l=h.next,c=h.next;continue}if(l=h,l===c){a?a===1?(l=$w(wr(l),e,t),ua(l,e,t,n,i,r,2)):a===2&&eb(l,e,t,n,i,r):ua(wr(l),e,t,n,i,r,1);break}}}function Qw(l){const e=l.prev,t=l,n=l.next;if(Nt(e,t,n)>=0)return!1;let i=l.next.next;for(;i!==l.prev;){if(no(e.x,e.y,t.x,t.y,n.x,n.y,i.x,i.y)&&Nt(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function Kw(l,e,t,n){const i=l.prev,r=l,a=l.next;if(Nt(i,r,a)>=0)return!1;const c=i.x<r.x?i.x<a.x?i.x:a.x:r.x<a.x?r.x:a.x,u=i.y<r.y?i.y<a.y?i.y:a.y:r.y<a.y?r.y:a.y,h=i.x>r.x?i.x>a.x?i.x:a.x:r.x>a.x?r.x:a.x,d=i.y>r.y?i.y>a.y?i.y:a.y:r.y>a.y?r.y:a.y,p=Af(c,u,e,t,n),m=Af(h,d,e,t,n);let v=l.prevZ,x=l.nextZ;for(;v&&v.z>=p&&x&&x.z<=m;){if(v!==l.prev&&v!==l.next&&no(i.x,i.y,r.x,r.y,a.x,a.y,v.x,v.y)&&Nt(v.prev,v,v.next)>=0||(v=v.prevZ,x!==l.prev&&x!==l.next&&no(i.x,i.y,r.x,r.y,a.x,a.y,x.x,x.y)&&Nt(x.prev,x,x.next)>=0))return!1;x=x.nextZ}for(;v&&v.z>=p;){if(v!==l.prev&&v!==l.next&&no(i.x,i.y,r.x,r.y,a.x,a.y,v.x,v.y)&&Nt(v.prev,v,v.next)>=0)return!1;v=v.prevZ}for(;x&&x.z<=m;){if(x!==l.prev&&x!==l.next&&no(i.x,i.y,r.x,r.y,a.x,a.y,x.x,x.y)&&Nt(x.prev,x,x.next)>=0)return!1;x=x.nextZ}return!0}function $w(l,e,t){let n=l;do{const i=n.prev,r=n.next.next;!$c(i,r)&&av(i,n,n.next,r)&&ha(i,r)&&ha(r,i)&&(e.push(i.i/t),e.push(n.i/t),e.push(r.i/t),fa(n),fa(n.next),n=l=r),n=n.next}while(n!==l);return wr(n)}function eb(l,e,t,n,i,r){let a=l;do{let c=a.next.next;for(;c!==a.prev;){if(a.i!==c.i&&cb(a,c)){let u=lv(a,c);a=wr(a,a.next),u=wr(u,u.next),ua(a,e,t,n,i,r),ua(u,e,t,n,i,r);return}c=c.next}a=a.next}while(a!==l)}function tb(l,e,t,n){const i=[];let r,a,c,u,h;for(r=0,a=e.length;r<a;r++)c=e[r]*n,u=r<a-1?e[r+1]*n:l.length,h=ov(l,c,u,n,!1),h===h.next&&(h.steiner=!0),i.push(lb(h));for(i.sort(nb),r=0;r<i.length;r++)ib(i[r],t),t=wr(t,t.next);return t}function nb(l,e){return l.x-e.x}function ib(l,e){if(e=rb(l,e),e){const t=lv(e,l);wr(e,e.next),wr(t,t.next)}}function rb(l,e){let t=e;const n=l.x,i=l.y;let r=-1/0,a;do{if(i<=t.y&&i>=t.next.y&&t.next.y!==t.y){const m=t.x+(i-t.y)*(t.next.x-t.x)/(t.next.y-t.y);if(m<=n&&m>r){if(r=m,m===n){if(i===t.y)return t;if(i===t.next.y)return t.next}a=t.x<t.next.x?t:t.next}}t=t.next}while(t!==e);if(!a)return null;if(n===r)return a;const c=a,u=a.x,h=a.y;let d=1/0,p;t=a;do n>=t.x&&t.x>=u&&n!==t.x&&no(i<h?n:r,i,u,h,i<h?r:n,i,t.x,t.y)&&(p=Math.abs(i-t.y)/(n-t.x),ha(t,l)&&(p<d||p===d&&(t.x>a.x||t.x===a.x&&sb(a,t)))&&(a=t,d=p)),t=t.next;while(t!==c);return a}function sb(l,e){return Nt(l.prev,l,e.prev)<0&&Nt(e.next,l,l.next)<0}function ob(l,e,t,n){let i=l;do i.z===null&&(i.z=Af(i.x,i.y,e,t,n)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next;while(i!==l);i.prevZ.nextZ=null,i.prevZ=null,ab(i)}function ab(l){let e,t,n,i,r,a,c,u,h=1;do{for(t=l,l=null,r=null,a=0;t;){for(a++,n=t,c=0,e=0;e<h&&(c++,n=n.nextZ,!!n);e++);for(u=h;c>0||u>0&&n;)c!==0&&(u===0||!n||t.z<=n.z)?(i=t,t=t.nextZ,c--):(i=n,n=n.nextZ,u--),r?r.nextZ=i:l=i,i.prevZ=r,r=i;t=n}r.nextZ=null,h*=2}while(a>1);return l}function Af(l,e,t,n,i){return l=32767*(l-t)*i,e=32767*(e-n)*i,l=(l|l<<8)&16711935,l=(l|l<<4)&252645135,l=(l|l<<2)&858993459,l=(l|l<<1)&1431655765,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,l|e<<1}function lb(l){let e=l,t=l;do(e.x<t.x||e.x===t.x&&e.y<t.y)&&(t=e),e=e.next;while(e!==l);return t}function no(l,e,t,n,i,r,a,c){return(i-a)*(e-c)-(l-a)*(r-c)>=0&&(l-a)*(n-c)-(t-a)*(e-c)>=0&&(t-a)*(r-c)-(i-a)*(n-c)>=0}function cb(l,e){return l.next.i!==e.i&&l.prev.i!==e.i&&!ub(l,e)&&(ha(l,e)&&ha(e,l)&&hb(l,e)&&(Nt(l.prev,l,e.prev)||Nt(l,e.prev,e))||$c(l,e)&&Nt(l.prev,l,l.next)>0&&Nt(e.prev,e,e.next)>0)}function Nt(l,e,t){return(e.y-l.y)*(t.x-e.x)-(e.x-l.x)*(t.y-e.y)}function $c(l,e){return l.x===e.x&&l.y===e.y}function av(l,e,t,n){const i=dc(Nt(l,e,t)),r=dc(Nt(l,e,n)),a=dc(Nt(t,n,l)),c=dc(Nt(t,n,e));return!!(i!==r&&a!==c||i===0&&fc(l,t,e)||r===0&&fc(l,n,e)||a===0&&fc(t,l,n)||c===0&&fc(t,e,n))}function fc(l,e,t){return e.x<=Math.max(l.x,t.x)&&e.x>=Math.min(l.x,t.x)&&e.y<=Math.max(l.y,t.y)&&e.y>=Math.min(l.y,t.y)}function dc(l){return l>0?1:l<0?-1:0}function ub(l,e){let t=l;do{if(t.i!==l.i&&t.next.i!==l.i&&t.i!==e.i&&t.next.i!==e.i&&av(t,t.next,l,e))return!0;t=t.next}while(t!==l);return!1}function ha(l,e){return Nt(l.prev,l,l.next)<0?Nt(l,e,l.next)>=0&&Nt(l,l.prev,e)>=0:Nt(l,e,l.prev)<0||Nt(l,l.next,e)<0}function hb(l,e){let t=l,n=!1;const i=(l.x+e.x)/2,r=(l.y+e.y)/2;do t.y>r!=t.next.y>r&&t.next.y!==t.y&&i<(t.next.x-t.x)*(r-t.y)/(t.next.y-t.y)+t.x&&(n=!n),t=t.next;while(t!==l);return n}function lv(l,e){const t=new Cf(l.i,l.x,l.y),n=new Cf(e.i,e.x,e.y),i=l.next,r=e.prev;return l.next=e,e.prev=l,t.next=i,i.prev=t,n.next=t,t.prev=n,r.next=n,n.prev=r,n}function Km(l,e,t,n){const i=new Cf(l,e,t);return n?(i.next=n.next,i.prev=n,n.next.prev=i,n.next=i):(i.prev=i,i.next=i),i}function fa(l){l.next.prev=l.prev,l.prev.next=l.next,l.prevZ&&(l.prevZ.nextZ=l.nextZ),l.nextZ&&(l.nextZ.prevZ=l.prevZ)}function Cf(l,e,t){this.i=l,this.x=e,this.y=t,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function fb(l,e,t,n){let i=0;for(let r=e,a=t-n;r<t;r+=n)i+=(l[a]-l[r])*(l[r+1]+l[a+1]),a=r;return i}class wi{static area(e){const t=e.length;let n=0;for(let i=t-1,r=0;r<t;i=r++)n+=e[i].x*e[r].y-e[r].x*e[i].y;return n*.5}static isClockWise(e){return wi.area(e)<0}static triangulateShape(e,t){const n=[],i=[],r=[];$m(e),eg(n,e);let a=e.length;t.forEach($m);for(let u=0;u<t.length;u++)i.push(a),a+=t[u].length,eg(n,t[u]);const c=jw.triangulate(n,i);for(let u=0;u<c.length;u+=3)r.push(c.slice(u,u+3));return r}}function $m(l){const e=l.length;e>2&&l[e-1].equals(l[0])&&l.pop()}function eg(l,e){for(let t=0;t<e.length;t++)l.push(e[t].x),l.push(e[t].y)}class Aa extends st{constructor(e=new os([new fe(.5,.5),new fe(-.5,.5),new fe(-.5,-.5),new fe(.5,-.5)]),t={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];const n=this,i=[],r=[];for(let c=0,u=e.length;c<u;c++){const h=e[c];a(h)}this.setAttribute("position",new De(i,3)),this.setAttribute("uv",new De(r,2)),this.computeVertexNormals();function a(c){const u=[],h=t.curveSegments!==void 0?t.curveSegments:12,d=t.steps!==void 0?t.steps:1,p=t.depth!==void 0?t.depth:1;let m=t.bevelEnabled!==void 0?t.bevelEnabled:!0,v=t.bevelThickness!==void 0?t.bevelThickness:.2,x=t.bevelSize!==void 0?t.bevelSize:v-.1,_=t.bevelOffset!==void 0?t.bevelOffset:0,y=t.bevelSegments!==void 0?t.bevelSegments:3;const S=t.extrudePath,w=t.UVGenerator!==void 0?t.UVGenerator:db;let T,E=!1,C,P,N,A;S&&(T=S.getSpacedPoints(d),E=!0,m=!1,C=S.computeFrenetFrames(d,!1),P=new I,N=new I,A=new I),m||(y=0,v=0,x=0,_=0);const L=c.extractPoints(h);let O=L.shape;const X=L.holes;if(!wi.isClockWise(O)){O=O.reverse();for(let ue=0,te=X.length;ue<te;ue++){const ve=X[ue];wi.isClockWise(ve)&&(X[ue]=ve.reverse())}}const J=wi.triangulateShape(O,X),H=O;for(let ue=0,te=X.length;ue<te;ue++){const ve=X[ue];O=O.concat(ve)}function K(ue,te,ve){return te||console.error("THREE.ExtrudeGeometry: vec does not exist"),te.clone().multiplyScalar(ve).add(ue)}const ie=O.length,he=J.length;function k(ue,te,ve){let ze,Me,Qe;const We=ue.x-te.x,Ve=ue.y-te.y,yt=ve.x-ue.x,Mt=ve.y-ue.y,F=We*We+Ve*Ve,R=We*Mt-Ve*yt;if(Math.abs(R)>Number.EPSILON){const Q=Math.sqrt(F),pe=Math.sqrt(yt*yt+Mt*Mt),xe=te.x-Ve/Q,be=te.y+We/Q,Ze=ve.x-Mt/pe,$=ve.y+yt/pe,Fe=((Ze-xe)*Mt-($-be)*yt)/(We*Mt-Ve*yt);ze=xe+We*Fe-ue.x,Me=be+Ve*Fe-ue.y;const Pe=ze*ze+Me*Me;if(Pe<=2)return new fe(ze,Me);Qe=Math.sqrt(Pe/2)}else{let Q=!1;We>Number.EPSILON?yt>Number.EPSILON&&(Q=!0):We<-Number.EPSILON?yt<-Number.EPSILON&&(Q=!0):Math.sign(Ve)===Math.sign(Mt)&&(Q=!0),Q?(ze=-Ve,Me=We,Qe=Math.sqrt(F)):(ze=We,Me=Ve,Qe=Math.sqrt(F/2))}return new fe(ze/Qe,Me/Qe)}const U=[];for(let ue=0,te=H.length,ve=te-1,ze=ue+1;ue<te;ue++,ve++,ze++)ve===te&&(ve=0),ze===te&&(ze=0),U[ue]=k(H[ue],H[ve],H[ze]);const B=[];let le,ne=U.concat();for(let ue=0,te=X.length;ue<te;ue++){const ve=X[ue];le=[];for(let ze=0,Me=ve.length,Qe=Me-1,We=ze+1;ze<Me;ze++,Qe++,We++)Qe===Me&&(Qe=0),We===Me&&(We=0),le[ze]=k(ve[ze],ve[Qe],ve[We]);B.push(le),ne=ne.concat(le)}for(let ue=0;ue<y;ue++){const te=ue/y,ve=v*Math.cos(te*Math.PI/2),ze=x*Math.sin(te*Math.PI/2)+_;for(let Me=0,Qe=H.length;Me<Qe;Me++){const We=K(H[Me],U[Me],ze);Ye(We.x,We.y,-ve)}for(let Me=0,Qe=X.length;Me<Qe;Me++){const We=X[Me];le=B[Me];for(let Ve=0,yt=We.length;Ve<yt;Ve++){const Mt=K(We[Ve],le[Ve],ze);Ye(Mt.x,Mt.y,-ve)}}}const de=x+_;for(let ue=0;ue<ie;ue++){const te=m?K(O[ue],ne[ue],de):O[ue];E?(N.copy(C.normals[0]).multiplyScalar(te.x),P.copy(C.binormals[0]).multiplyScalar(te.y),A.copy(T[0]).add(N).add(P),Ye(A.x,A.y,A.z)):Ye(te.x,te.y,0)}for(let ue=1;ue<=d;ue++)for(let te=0;te<ie;te++){const ve=m?K(O[te],ne[te],de):O[te];E?(N.copy(C.normals[ue]).multiplyScalar(ve.x),P.copy(C.binormals[ue]).multiplyScalar(ve.y),A.copy(T[ue]).add(N).add(P),Ye(A.x,A.y,A.z)):Ye(ve.x,ve.y,p/d*ue)}for(let ue=y-1;ue>=0;ue--){const te=ue/y,ve=v*Math.cos(te*Math.PI/2),ze=x*Math.sin(te*Math.PI/2)+_;for(let Me=0,Qe=H.length;Me<Qe;Me++){const We=K(H[Me],U[Me],ze);Ye(We.x,We.y,p+ve)}for(let Me=0,Qe=X.length;Me<Qe;Me++){const We=X[Me];le=B[Me];for(let Ve=0,yt=We.length;Ve<yt;Ve++){const Mt=K(We[Ve],le[Ve],ze);E?Ye(Mt.x,Mt.y+T[d-1].y,T[d-1].x+ve):Ye(Mt.x,Mt.y,p+ve)}}}we(),Be();function we(){const ue=i.length/3;if(m){let te=0,ve=ie*te;for(let ze=0;ze<he;ze++){const Me=J[ze];He(Me[2]+ve,Me[1]+ve,Me[0]+ve)}te=d+y*2,ve=ie*te;for(let ze=0;ze<he;ze++){const Me=J[ze];He(Me[0]+ve,Me[1]+ve,Me[2]+ve)}}else{for(let te=0;te<he;te++){const ve=J[te];He(ve[2],ve[1],ve[0])}for(let te=0;te<he;te++){const ve=J[te];He(ve[0]+ie*d,ve[1]+ie*d,ve[2]+ie*d)}}n.addGroup(ue,i.length/3-ue,0)}function Be(){const ue=i.length/3;let te=0;se(H,te),te+=H.length;for(let ve=0,ze=X.length;ve<ze;ve++){const Me=X[ve];se(Me,te),te+=Me.length}n.addGroup(ue,i.length/3-ue,1)}function se(ue,te){let ve=ue.length;for(;--ve>=0;){const ze=ve;let Me=ve-1;Me<0&&(Me=ue.length-1);for(let Qe=0,We=d+y*2;Qe<We;Qe++){const Ve=ie*Qe,yt=ie*(Qe+1),Mt=te+ze+Ve,F=te+Me+Ve,R=te+Me+yt,Q=te+ze+yt;Xe(Mt,F,R,Q)}}}function Ye(ue,te,ve){u.push(ue),u.push(te),u.push(ve)}function He(ue,te,ve){ye(ue),ye(te),ye(ve);const ze=i.length/3,Me=w.generateTopUV(n,i,ze-3,ze-2,ze-1);qe(Me[0]),qe(Me[1]),qe(Me[2])}function Xe(ue,te,ve,ze){ye(ue),ye(te),ye(ze),ye(te),ye(ve),ye(ze);const Me=i.length/3,Qe=w.generateSideWallUV(n,i,Me-6,Me-3,Me-2,Me-1);qe(Qe[0]),qe(Qe[1]),qe(Qe[3]),qe(Qe[1]),qe(Qe[2]),qe(Qe[3])}function ye(ue){i.push(u[ue*3+0]),i.push(u[ue*3+1]),i.push(u[ue*3+2])}function qe(ue){r.push(ue.x),r.push(ue.y)}}}toJSON(){const e=super.toJSON(),t=this.parameters.shapes,n=this.parameters.options;return pb(t,n,e)}static fromJSON(e,t){const n=[];for(let r=0,a=e.shapes.length;r<a;r++){const c=t[e.shapes[r]];n.push(c)}const i=e.options.extrudePath;return i!==void 0&&(e.options.extrudePath=new od[i.type]().fromJSON(i)),new Aa(n,e.options)}}const db={generateTopUV:function(l,e,t,n,i){const r=e[t*3],a=e[t*3+1],c=e[n*3],u=e[n*3+1],h=e[i*3],d=e[i*3+1];return[new fe(r,a),new fe(c,u),new fe(h,d)]},generateSideWallUV:function(l,e,t,n,i,r){const a=e[t*3],c=e[t*3+1],u=e[t*3+2],h=e[n*3],d=e[n*3+1],p=e[n*3+2],m=e[i*3],v=e[i*3+1],x=e[i*3+2],_=e[r*3],y=e[r*3+1],S=e[r*3+2];return Math.abs(c-d)<Math.abs(a-h)?[new fe(a,1-u),new fe(h,1-p),new fe(m,1-x),new fe(_,1-S)]:[new fe(c,1-u),new fe(d,1-p),new fe(v,1-x),new fe(y,1-S)]}};function pb(l,e,t){if(t.shapes=[],Array.isArray(l))for(let n=0,i=l.length;n<i;n++){const r=l[n];t.shapes.push(r.uuid)}else t.shapes.push(l.uuid);return t.options=Object.assign({},e),e.extrudePath!==void 0&&(t.options.extrudePath=e.extrudePath.toJSON()),t}class Ca extends ji{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2,i=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1],r=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(i,r,e,t),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new Ca(e.radius,e.detail)}}class po extends ji{constructor(e=1,t=0){const n=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],i=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(n,i,e,t),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new po(e.radius,e.detail)}}class Pa extends st{constructor(e=.5,t=1,n=8,i=1,r=0,a=Math.PI*2){super(),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:i,thetaStart:r,thetaLength:a},n=Math.max(3,n),i=Math.max(1,i);const c=[],u=[],h=[],d=[];let p=e;const m=(t-e)/i,v=new I,x=new fe;for(let _=0;_<=i;_++){for(let y=0;y<=n;y++){const S=r+y/n*a;v.x=p*Math.cos(S),v.y=p*Math.sin(S),u.push(v.x,v.y,v.z),h.push(0,0,1),x.x=(v.x/t+1)/2,x.y=(v.y/t+1)/2,d.push(x.x,x.y)}p+=m}for(let _=0;_<i;_++){const y=_*(n+1);for(let S=0;S<n;S++){const w=S+y,T=w,E=w+n+1,C=w+n+2,P=w+1;c.push(T,E,P),c.push(E,C,P)}}this.setIndex(c),this.setAttribute("position",new De(u,3)),this.setAttribute("normal",new De(h,3)),this.setAttribute("uv",new De(d,2))}static fromJSON(e){return new Pa(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}class La extends st{constructor(e=new os([new fe(0,.5),new fe(-.5,-.5),new fe(.5,-.5)]),t=12){super(),this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:t};const n=[],i=[],r=[],a=[];let c=0,u=0;if(Array.isArray(e)===!1)h(e);else for(let d=0;d<e.length;d++)h(e[d]),this.addGroup(c,u,d),c+=u,u=0;this.setIndex(n),this.setAttribute("position",new De(i,3)),this.setAttribute("normal",new De(r,3)),this.setAttribute("uv",new De(a,2));function h(d){const p=i.length/3,m=d.extractPoints(t);let v=m.shape;const x=m.holes;wi.isClockWise(v)===!1&&(v=v.reverse());for(let y=0,S=x.length;y<S;y++){const w=x[y];wi.isClockWise(w)===!0&&(x[y]=w.reverse())}const _=wi.triangulateShape(v,x);for(let y=0,S=x.length;y<S;y++){const w=x[y];v=v.concat(w)}for(let y=0,S=v.length;y<S;y++){const w=v[y];i.push(w.x,w.y,0),r.push(0,0,1),a.push(w.x,w.y)}for(let y=0,S=_.length;y<S;y++){const w=_[y],T=w[0]+p,E=w[1]+p,C=w[2]+p;n.push(T,E,C),u+=3}}}toJSON(){const e=super.toJSON(),t=this.parameters.shapes;return mb(t,e)}static fromJSON(e,t){const n=[];for(let i=0,r=e.shapes.length;i<r;i++){const a=t[e.shapes[i]];n.push(a)}return new La(n,e.curveSegments)}}function mb(l,e){if(e.shapes=[],Array.isArray(l))for(let t=0,n=l.length;t<n;t++){const i=l[t];e.shapes.push(i.uuid)}else e.shapes.push(l.uuid);return e}class mo extends st{constructor(e=1,t=32,n=16,i=0,r=Math.PI*2,a=0,c=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:r,thetaStart:a,thetaLength:c},t=Math.max(3,Math.floor(t)),n=Math.max(2,Math.floor(n));const u=Math.min(a+c,Math.PI);let h=0;const d=[],p=new I,m=new I,v=[],x=[],_=[],y=[];for(let S=0;S<=n;S++){const w=[],T=S/n;let E=0;S==0&&a==0?E=.5/t:S==n&&u==Math.PI&&(E=-.5/t);for(let C=0;C<=t;C++){const P=C/t;p.x=-e*Math.cos(i+P*r)*Math.sin(a+T*c),p.y=e*Math.cos(a+T*c),p.z=e*Math.sin(i+P*r)*Math.sin(a+T*c),x.push(p.x,p.y,p.z),m.copy(p).normalize(),_.push(m.x,m.y,m.z),y.push(P+E,1-T),w.push(h++)}d.push(w)}for(let S=0;S<n;S++)for(let w=0;w<t;w++){const T=d[S][w+1],E=d[S][w],C=d[S+1][w],P=d[S+1][w+1];(S!==0||a>0)&&v.push(T,E,P),(S!==n-1||u<Math.PI)&&v.push(E,C,P)}this.setIndex(v),this.setAttribute("position",new De(x,3)),this.setAttribute("normal",new De(_,3)),this.setAttribute("uv",new De(y,2))}static fromJSON(e){return new mo(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class Ra extends ji{constructor(e=1,t=0){const n=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],i=[2,1,0,0,3,2,1,3,0,2,3,1];super(n,i,e,t),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new Ra(e.radius,e.detail)}}class Ia extends st{constructor(e=1,t=.4,n=8,i=6,r=Math.PI*2){super(),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:i,arc:r},n=Math.floor(n),i=Math.floor(i);const a=[],c=[],u=[],h=[],d=new I,p=new I,m=new I;for(let v=0;v<=n;v++)for(let x=0;x<=i;x++){const _=x/i*r,y=v/n*Math.PI*2;p.x=(e+t*Math.cos(y))*Math.cos(_),p.y=(e+t*Math.cos(y))*Math.sin(_),p.z=t*Math.sin(y),c.push(p.x,p.y,p.z),d.x=e*Math.cos(_),d.y=e*Math.sin(_),m.subVectors(p,d).normalize(),u.push(m.x,m.y,m.z),h.push(x/i),h.push(v/n)}for(let v=1;v<=n;v++)for(let x=1;x<=i;x++){const _=(i+1)*v+x-1,y=(i+1)*(v-1)+x-1,S=(i+1)*(v-1)+x,w=(i+1)*v+x;a.push(_,y,w),a.push(y,S,w)}this.setIndex(a),this.setAttribute("position",new De(c,3)),this.setAttribute("normal",new De(u,3)),this.setAttribute("uv",new De(h,2))}static fromJSON(e){return new Ia(e.radius,e.tube,e.radialSegments,e.tubularSegments,e.arc)}}class Da extends st{constructor(e=1,t=.4,n=64,i=8,r=2,a=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:n,radialSegments:i,p:r,q:a},n=Math.floor(n),i=Math.floor(i);const c=[],u=[],h=[],d=[],p=new I,m=new I,v=new I,x=new I,_=new I,y=new I,S=new I;for(let T=0;T<=n;++T){const E=T/n*r*Math.PI*2;w(E,r,a,e,v),w(E+.01,r,a,e,x),y.subVectors(x,v),S.addVectors(x,v),_.crossVectors(y,S),S.crossVectors(_,y),_.normalize(),S.normalize();for(let C=0;C<=i;++C){const P=C/i*Math.PI*2,N=-t*Math.cos(P),A=t*Math.sin(P);p.x=v.x+(N*S.x+A*_.x),p.y=v.y+(N*S.y+A*_.y),p.z=v.z+(N*S.z+A*_.z),u.push(p.x,p.y,p.z),m.subVectors(p,v).normalize(),h.push(m.x,m.y,m.z),d.push(T/n),d.push(C/i)}}for(let T=1;T<=n;T++)for(let E=1;E<=i;E++){const C=(i+1)*(T-1)+(E-1),P=(i+1)*T+(E-1),N=(i+1)*T+E,A=(i+1)*(T-1)+E;c.push(C,P,A),c.push(P,N,A)}this.setIndex(c),this.setAttribute("position",new De(u,3)),this.setAttribute("normal",new De(h,3)),this.setAttribute("uv",new De(d,2));function w(T,E,C,P,N){const A=Math.cos(T),L=Math.sin(T),O=C/E*T,X=Math.cos(O);N.x=P*(2+X)*.5*A,N.y=P*(2+X)*L*.5,N.z=P*Math.sin(O)*.5}}static fromJSON(e){return new Da(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)}}class za extends st{constructor(e=new rd(new I(-1,-1,0),new I(-1,1,0),new I(1,1,0)),t=64,n=1,i=8,r=!1){super(),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:n,radialSegments:i,closed:r};const a=e.computeFrenetFrames(t,r);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals;const c=new I,u=new I,h=new fe;let d=new I;const p=[],m=[],v=[],x=[];_(),this.setIndex(x),this.setAttribute("position",new De(p,3)),this.setAttribute("normal",new De(m,3)),this.setAttribute("uv",new De(v,2));function _(){for(let T=0;T<t;T++)y(T);y(r===!1?t:0),w(),S()}function y(T){d=e.getPointAt(T/t,d);const E=a.normals[T],C=a.binormals[T];for(let P=0;P<=i;P++){const N=P/i*Math.PI*2,A=Math.sin(N),L=-Math.cos(N);u.x=L*E.x+A*C.x,u.y=L*E.y+A*C.y,u.z=L*E.z+A*C.z,u.normalize(),m.push(u.x,u.y,u.z),c.x=d.x+n*u.x,c.y=d.y+n*u.y,c.z=d.z+n*u.z,p.push(c.x,c.y,c.z)}}function S(){for(let T=1;T<=t;T++)for(let E=1;E<=i;E++){const C=(i+1)*(T-1)+(E-1),P=(i+1)*T+(E-1),N=(i+1)*T+E,A=(i+1)*(T-1)+E;x.push(C,P,A),x.push(P,N,A)}}function w(){for(let T=0;T<=t;T++)for(let E=0;E<=i;E++)h.x=T/t,h.y=E/i,v.push(h.x,h.y)}}toJSON(){const e=super.toJSON();return e.path=this.parameters.path.toJSON(),e}static fromJSON(e){return new za(new od[e.path.type]().fromJSON(e.path),e.tubularSegments,e.radius,e.radialSegments,e.closed)}}class cv extends st{constructor(e=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:e},e!==null){const t=[],n=new Set,i=new I,r=new I;if(e.index!==null){const a=e.attributes.position,c=e.index;let u=e.groups;u.length===0&&(u=[{start:0,count:c.count,materialIndex:0}]);for(let h=0,d=u.length;h<d;++h){const p=u[h],m=p.start,v=p.count;for(let x=m,_=m+v;x<_;x+=3)for(let y=0;y<3;y++){const S=c.getX(x+y),w=c.getX(x+(y+1)%3);i.fromBufferAttribute(a,S),r.fromBufferAttribute(a,w),tg(i,r,n)===!0&&(t.push(i.x,i.y,i.z),t.push(r.x,r.y,r.z))}}}else{const a=e.attributes.position;for(let c=0,u=a.count/3;c<u;c++)for(let h=0;h<3;h++){const d=3*c+h,p=3*c+(h+1)%3;i.fromBufferAttribute(a,d),r.fromBufferAttribute(a,p),tg(i,r,n)===!0&&(t.push(i.x,i.y,i.z),t.push(r.x,r.y,r.z))}}this.setAttribute("position",new De(t,3))}}}function tg(l,e,t){const n=`${l.x},${l.y},${l.z}-${e.x},${e.y},${e.z}`,i=`${e.x},${e.y},${e.z}-${l.x},${l.y},${l.z}`;return t.has(n)===!0||t.has(i)===!0?!1:(t.add(n),t.add(i),!0)}var ng=Object.freeze({__proto__:null,BoxGeometry:Er,CapsuleGeometry:wa,CircleGeometry:ba,ConeGeometry:Ta,CylinderGeometry:ps,DodecahedronGeometry:Ea,EdgesGeometry:sv,ExtrudeGeometry:Aa,IcosahedronGeometry:Ca,LatheGeometry:fo,OctahedronGeometry:po,PlaneGeometry:uo,PolyhedronGeometry:ji,RingGeometry:Pa,ShapeGeometry:La,SphereGeometry:mo,TetrahedronGeometry:Ra,TorusGeometry:Ia,TorusKnotGeometry:Da,TubeGeometry:za,WireframeGeometry:cv});class uv extends on{constructor(e){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new Le(0),this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.fog=e.fog,this}}class hv extends bi{constructor(e){super(e),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class ad extends on{constructor(e){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Le(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Le(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=br,this.normalScale=new fe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class fv extends ad{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new fe(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return Gt(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new Le(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new Le(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new Le(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._iridescence=0,this._transmission=0,this.setValues(e)}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!=e>0&&this.version++,this._iridescence=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.ior=e.ior,this.iridescence=e.iridescence,this.iridescenceMap=e.iridescenceMap,this.iridescenceIOR=e.iridescenceIOR,this.iridescenceThicknessRange=[...e.iridescenceThicknessRange],this.iridescenceThicknessMap=e.iridescenceThicknessMap,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}}class dv extends on{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new Le(16777215),this.specular=new Le(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Le(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=br,this.normalScale=new fe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=va,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class pv extends on{constructor(e){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Le(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Le(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=br,this.normalScale=new fe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}class mv extends on{constructor(e){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=br,this.normalScale=new fe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.flatShading=e.flatShading,this}}class gv extends on{constructor(e){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new Le(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Le(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=br,this.normalScale=new fe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=va,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class vv extends on{constructor(e){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Le(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=br,this.normalScale=new fe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.flatShading=e.flatShading,this.fog=e.fog,this}}class xv extends yn{constructor(e){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(e){return super.copy(e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this}}function $n(l,e,t){return ld(l)?new l.constructor(l.subarray(e,t!==void 0?t:l.length)):l.slice(e,t)}function Kr(l,e,t){return!l||!t&&l.constructor===e?l:typeof e.BYTES_PER_ELEMENT=="number"?new e(l):Array.prototype.slice.call(l)}function ld(l){return ArrayBuffer.isView(l)&&!(l instanceof DataView)}function _v(l){function e(i,r){return l[i]-l[r]}const t=l.length,n=new Array(t);for(let i=0;i!==t;++i)n[i]=i;return n.sort(e),n}function Pf(l,e,t){const n=l.length,i=new l.constructor(n);for(let r=0,a=0;a!==n;++r){const c=t[r]*e;for(let u=0;u!==e;++u)i[a++]=l[c+u]}return i}function cd(l,e,t,n){let i=1,r=l[0];for(;r!==void 0&&r[n]===void 0;)r=l[i++];if(r===void 0)return;let a=r[n];if(a!==void 0)if(Array.isArray(a))do a=r[n],a!==void 0&&(e.push(r.time),t.push.apply(t,a)),r=l[i++];while(r!==void 0);else if(a.toArray!==void 0)do a=r[n],a!==void 0&&(e.push(r.time),a.toArray(t,t.length)),r=l[i++];while(r!==void 0);else do a=r[n],a!==void 0&&(e.push(r.time),t.push(a)),r=l[i++];while(r!==void 0)}function gb(l,e,t,n,i=30){const r=l.clone();r.name=e;const a=[];for(let u=0;u<r.tracks.length;++u){const h=r.tracks[u],d=h.getValueSize(),p=[],m=[];for(let v=0;v<h.times.length;++v){const x=h.times[v]*i;if(!(x<t||x>=n)){p.push(h.times[v]);for(let _=0;_<d;++_)m.push(h.values[v*d+_])}}p.length!==0&&(h.times=Kr(p,h.times.constructor),h.values=Kr(m,h.values.constructor),a.push(h))}r.tracks=a;let c=1/0;for(let u=0;u<r.tracks.length;++u)c>r.tracks[u].times[0]&&(c=r.tracks[u].times[0]);for(let u=0;u<r.tracks.length;++u)r.tracks[u].shift(-1*c);return r.resetDuration(),r}function vb(l,e=0,t=l,n=30){n<=0&&(n=30);const i=t.tracks.length,r=e/n;for(let a=0;a<i;++a){const c=t.tracks[a],u=c.ValueTypeName;if(u==="bool"||u==="string")continue;const h=l.tracks.find(function(S){return S.name===c.name&&S.ValueTypeName===u});if(h===void 0)continue;let d=0;const p=c.getValueSize();c.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(d=p/3);let m=0;const v=h.getValueSize();h.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(m=v/3);const x=c.times.length-1;let _;if(r<=c.times[0]){const S=d,w=p-d;_=$n(c.values,S,w)}else if(r>=c.times[x]){const S=x*p+d,w=S+p-d;_=$n(c.values,S,w)}else{const S=c.createInterpolant(),w=d,T=p-d;S.evaluate(r),_=$n(S.resultBuffer,w,T)}u==="quaternion"&&new Cn().fromArray(_).normalize().conjugate().toArray(_);const y=h.times.length;for(let S=0;S<y;++S){const w=S*v+m;if(u==="quaternion")Cn.multiplyQuaternionsFlat(h.values,w,_,0,h.values,w);else{const T=v-m*2;for(let E=0;E<T;++E)h.values[w+E]-=_[E]}}}return l.blendMode=Hf,l}var xb=Object.freeze({__proto__:null,arraySlice:$n,convertArray:Kr,isTypedArray:ld,getKeyframeOrder:_v,sortedArray:Pf,flattenJSON:cd,subclip:gb,makeClipAdditive:vb});class Na{constructor(e,t,n,i){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=i!==void 0?i:new t.constructor(n),this.sampleValues=t,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(e){const t=this.parameterPositions;let n=this._cachedIndex,i=t[n],r=t[n-1];e:{t:{let a;n:{i:if(!(e<i)){for(let c=n+2;;){if(i===void 0){if(e<r)break i;return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}if(n===c)break;if(r=i,i=t[++n],e<i)break t}a=t.length;break n}if(!(e>=r)){const c=t[1];e<c&&(n=2,r=c);for(let u=n-2;;){if(r===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(n===u)break;if(i=r,r=t[--n-1],e>=r)break t}a=n,n=0;break n}break e}for(;n<a;){const c=n+a>>>1;e<t[c]?a=c:n=c+1}if(i=t[n],r=t[n-1],r===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(i===void 0)return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}this._cachedIndex=n,this.intervalChanged_(n,r,i)}return this.interpolate_(n,r,e,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=e*i;for(let a=0;a!==i;++a)t[a]=n[r+a];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class yv extends Na{constructor(e,t,n,i){super(e,t,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:Jr,endingEnd:Jr}}intervalChanged_(e,t,n){const i=this.parameterPositions;let r=e-2,a=e+1,c=i[r],u=i[a];if(c===void 0)switch(this.getSettings_().endingStart){case jr:r=e,c=2*t-n;break;case sa:r=i.length-2,c=t+i[r]-i[r+1];break;default:r=e,c=n}if(u===void 0)switch(this.getSettings_().endingEnd){case jr:a=e,u=2*n-t;break;case sa:a=1,u=n+i[1]-i[0];break;default:a=e-1,u=t}const h=(n-t)*.5,d=this.valueSize;this._weightPrev=h/(t-c),this._weightNext=h/(u-n),this._offsetPrev=r*d,this._offsetNext=a*d}interpolate_(e,t,n,i){const r=this.resultBuffer,a=this.sampleValues,c=this.valueSize,u=e*c,h=u-c,d=this._offsetPrev,p=this._offsetNext,m=this._weightPrev,v=this._weightNext,x=(n-t)/(i-t),_=x*x,y=_*x,S=-m*y+2*m*_-m*x,w=(1+m)*y+(-1.5-2*m)*_+(-.5+m)*x+1,T=(-1-v)*y+(1.5+v)*_+.5*x,E=v*y-v*_;for(let C=0;C!==c;++C)r[C]=S*a[d+C]+w*a[h+C]+T*a[u+C]+E*a[p+C];return r}}class ud extends Na{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const r=this.resultBuffer,a=this.sampleValues,c=this.valueSize,u=e*c,h=u-c,d=(n-t)/(i-t),p=1-d;for(let m=0;m!==c;++m)r[m]=a[h+m]*p+a[u+m]*d;return r}}class Mv extends Na{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e){return this.copySampleValue_(e-1)}}class di{constructor(e,t,n,i){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=Kr(t,this.TimeBufferType),this.values=Kr(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let n;if(t.toJSON!==this.toJSON)n=t.toJSON(e);else{n={name:e.name,times:Kr(e.times,Array),values:Kr(e.values,Array)};const i=e.getInterpolation();i!==e.DefaultInterpolation&&(n.interpolation=i)}return n.type=e.ValueTypeName,n}InterpolantFactoryMethodDiscrete(e){return new Mv(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new ud(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new yv(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case ia:t=this.InterpolantFactoryMethodDiscrete;break;case ra:t=this.InterpolantFactoryMethodLinear;break;case Cc:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(n);return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return ia;case this.InterpolantFactoryMethodLinear:return ra;case this.InterpolantFactoryMethodSmooth:return Cc}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]+=e}return this}scale(e){if(e!==1){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]*=e}return this}trim(e,t){const n=this.times,i=n.length;let r=0,a=i-1;for(;r!==i&&n[r]<e;)++r;for(;a!==-1&&n[a]>t;)--a;if(++a,r!==0||a!==i){r>=a&&(a=Math.max(a,1),r=a-1);const c=this.getValueSize();this.times=$n(n,r,a),this.values=$n(this.values,r*c,a*c)}return this}validate(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const n=this.times,i=this.values,r=n.length;r===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let a=null;for(let c=0;c!==r;c++){const u=n[c];if(typeof u=="number"&&isNaN(u)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,c,u),e=!1;break}if(a!==null&&a>u){console.error("THREE.KeyframeTrack: Out of order keys.",this,c,u,a),e=!1;break}a=u}if(i!==void 0&&ld(i))for(let c=0,u=i.length;c!==u;++c){const h=i[c];if(isNaN(h)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,c,h),e=!1;break}}return e}optimize(){const e=$n(this.times),t=$n(this.values),n=this.getValueSize(),i=this.getInterpolation()===Cc,r=e.length-1;let a=1;for(let c=1;c<r;++c){let u=!1;const h=e[c],d=e[c+1];if(h!==d&&(c!==1||h!==e[0]))if(i)u=!0;else{const p=c*n,m=p-n,v=p+n;for(let x=0;x!==n;++x){const _=t[p+x];if(_!==t[m+x]||_!==t[v+x]){u=!0;break}}}if(u){if(c!==a){e[a]=e[c];const p=c*n,m=a*n;for(let v=0;v!==n;++v)t[m+v]=t[p+v]}++a}}if(r>0){e[a]=e[r];for(let c=r*n,u=a*n,h=0;h!==n;++h)t[u+h]=t[c+h];++a}return a!==e.length?(this.times=$n(e,0,a),this.values=$n(t,0,a*n)):(this.times=e,this.values=t),this}clone(){const e=$n(this.times,0),t=$n(this.values,0),n=this.constructor,i=new n(this.name,e,t);return i.createInterpolant=this.createInterpolant,i}}di.prototype.TimeBufferType=Float32Array;di.prototype.ValueBufferType=Float32Array;di.prototype.DefaultInterpolation=ra;class ms extends di{}ms.prototype.ValueTypeName="bool";ms.prototype.ValueBufferType=Array;ms.prototype.DefaultInterpolation=ia;ms.prototype.InterpolantFactoryMethodLinear=void 0;ms.prototype.InterpolantFactoryMethodSmooth=void 0;class hd extends di{}hd.prototype.ValueTypeName="color";class da extends di{}da.prototype.ValueTypeName="number";class Sv extends Na{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const r=this.resultBuffer,a=this.sampleValues,c=this.valueSize,u=(n-t)/(i-t);let h=e*c;for(let d=h+c;h!==d;h+=4)Cn.slerpFlat(r,0,a,h-c,a,h,u);return r}}class go extends di{InterpolantFactoryMethodLinear(e){return new Sv(this.times,this.values,this.getValueSize(),e)}}go.prototype.ValueTypeName="quaternion";go.prototype.DefaultInterpolation=ra;go.prototype.InterpolantFactoryMethodSmooth=void 0;class gs extends di{}gs.prototype.ValueTypeName="string";gs.prototype.ValueBufferType=Array;gs.prototype.DefaultInterpolation=ia;gs.prototype.InterpolantFactoryMethodLinear=void 0;gs.prototype.InterpolantFactoryMethodSmooth=void 0;class pa extends di{}pa.prototype.ValueTypeName="vector";class ma{constructor(e,t=-1,n,i=Gc){this.name=e,this.tracks=n,this.duration=t,this.blendMode=i,this.uuid=Fn(),this.duration<0&&this.resetDuration()}static parse(e){const t=[],n=e.tracks,i=1/(e.fps||1);for(let a=0,c=n.length;a!==c;++a)t.push(yb(n[a]).scale(i));const r=new this(e.name,e.duration,t,e.blendMode);return r.uuid=e.uuid,r}static toJSON(e){const t=[],n=e.tracks,i={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let r=0,a=n.length;r!==a;++r)t.push(di.toJSON(n[r]));return i}static CreateFromMorphTargetSequence(e,t,n,i){const r=t.length,a=[];for(let c=0;c<r;c++){let u=[],h=[];u.push((c+r-1)%r,c,(c+1)%r),h.push(0,1,0);const d=_v(u);u=Pf(u,1,d),h=Pf(h,1,d),!i&&u[0]===0&&(u.push(r),h.push(h[0])),a.push(new da(".morphTargetInfluences["+t[c].name+"]",u,h).scale(1/n))}return new this(e,-1,a)}static findByName(e,t){let n=e;if(!Array.isArray(e)){const i=e;n=i.geometry&&i.geometry.animations||i.animations}for(let i=0;i<n.length;i++)if(n[i].name===t)return n[i];return null}static CreateClipsFromMorphTargetSequences(e,t,n){const i={},r=/^([\w-]*?)([\d]+)$/;for(let c=0,u=e.length;c<u;c++){const h=e[c],d=h.name.match(r);if(d&&d.length>1){const p=d[1];let m=i[p];m||(i[p]=m=[]),m.push(h)}}const a=[];for(const c in i)a.push(this.CreateFromMorphTargetSequence(c,i[c],t,n));return a}static parseAnimation(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(p,m,v,x,_){if(v.length!==0){const y=[],S=[];cd(v,y,S,x),y.length!==0&&_.push(new p(m,y,S))}},i=[],r=e.name||"default",a=e.fps||30,c=e.blendMode;let u=e.length||-1;const h=e.hierarchy||[];for(let p=0;p<h.length;p++){const m=h[p].keys;if(!(!m||m.length===0))if(m[0].morphTargets){const v={};let x;for(x=0;x<m.length;x++)if(m[x].morphTargets)for(let _=0;_<m[x].morphTargets.length;_++)v[m[x].morphTargets[_]]=-1;for(const _ in v){const y=[],S=[];for(let w=0;w!==m[x].morphTargets.length;++w){const T=m[x];y.push(T.time),S.push(T.morphTarget===_?1:0)}i.push(new da(".morphTargetInfluence["+_+"]",y,S))}u=v.length*a}else{const v=".bones["+t[p].name+"]";n(pa,v+".position",m,"pos",i),n(go,v+".quaternion",m,"rot",i),n(pa,v+".scale",m,"scl",i)}}return i.length===0?null:new this(r,u,i,c)}resetDuration(){const e=this.tracks;let t=0;for(let n=0,i=e.length;n!==i;++n){const r=this.tracks[n];t=Math.max(t,r.times[r.times.length-1])}return this.duration=t,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function _b(l){switch(l.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return da;case"vector":case"vector2":case"vector3":case"vector4":return pa;case"color":return hd;case"quaternion":return go;case"bool":case"boolean":return ms;case"string":return gs}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+l)}function yb(l){if(l.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=_b(l.type);if(l.times===void 0){const t=[],n=[];cd(l.keys,t,n,"value"),l.times=t,l.values=n}return e.parse!==void 0?e.parse(l):new e(l.name,l.times,l.values,l.interpolation)}const us={enabled:!1,files:{},add:function(l,e){this.enabled!==!1&&(this.files[l]=e)},get:function(l){if(this.enabled!==!1)return this.files[l]},remove:function(l){delete this.files[l]},clear:function(){this.files={}}};class fd{constructor(e,t,n){const i=this;let r=!1,a=0,c=0,u;const h=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(d){c++,r===!1&&i.onStart!==void 0&&i.onStart(d,a,c),r=!0},this.itemEnd=function(d){a++,i.onProgress!==void 0&&i.onProgress(d,a,c),a===c&&(r=!1,i.onLoad!==void 0&&i.onLoad())},this.itemError=function(d){i.onError!==void 0&&i.onError(d)},this.resolveURL=function(d){return u?u(d):d},this.setURLModifier=function(d){return u=d,this},this.addHandler=function(d,p){return h.push(d,p),this},this.removeHandler=function(d){const p=h.indexOf(d);return p!==-1&&h.splice(p,2),this},this.getHandler=function(d){for(let p=0,m=h.length;p<m;p+=2){const v=h[p],x=h[p+1];if(v.global&&(v.lastIndex=0),v.test(d))return x}return null}}}const wv=new fd;class On{constructor(e){this.manager=e!==void 0?e:wv,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(i,r){n.load(e,i,t,r)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}const ki={};class Mb extends Error{constructor(e,t){super(e),this.response=t}}class Yi extends On{constructor(e){super(e)}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=us.get(e);if(r!==void 0)return this.manager.itemStart(e),setTimeout(()=>{t&&t(r),this.manager.itemEnd(e)},0),r;if(ki[e]!==void 0){ki[e].push({onLoad:t,onProgress:n,onError:i});return}ki[e]=[],ki[e].push({onLoad:t,onProgress:n,onError:i});const a=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),c=this.mimeType,u=this.responseType;fetch(a).then(h=>{if(h.status===200||h.status===0){if(h.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||h.body===void 0||h.body.getReader===void 0)return h;const d=ki[e],p=h.body.getReader(),m=h.headers.get("Content-Length"),v=m?parseInt(m):0,x=v!==0;let _=0;const y=new ReadableStream({start(S){w();function w(){p.read().then(({done:T,value:E})=>{if(T)S.close();else{_+=E.byteLength;const C=new ProgressEvent("progress",{lengthComputable:x,loaded:_,total:v});for(let P=0,N=d.length;P<N;P++){const A=d[P];A.onProgress&&A.onProgress(C)}S.enqueue(E),w()}})}}});return new Response(y)}else throw new Mb(`fetch for "${h.url}" responded with ${h.status}: ${h.statusText}`,h)}).then(h=>{switch(u){case"arraybuffer":return h.arrayBuffer();case"blob":return h.blob();case"document":return h.text().then(d=>new DOMParser().parseFromString(d,c));case"json":return h.json();default:if(c===void 0)return h.text();{const p=/charset="?([^;"\s]*)"?/i.exec(c),m=p&&p[1]?p[1].toLowerCase():void 0,v=new TextDecoder(m);return h.arrayBuffer().then(x=>v.decode(x))}}}).then(h=>{us.add(e,h);const d=ki[e];delete ki[e];for(let p=0,m=d.length;p<m;p++){const v=d[p];v.onLoad&&v.onLoad(h)}}).catch(h=>{const d=ki[e];if(d===void 0)throw this.manager.itemError(e),h;delete ki[e];for(let p=0,m=d.length;p<m;p++){const v=d[p];v.onError&&v.onError(h)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class Sb extends On{constructor(e){super(e)}load(e,t,n,i){const r=this,a=new Yi(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(e,function(c){try{t(r.parse(JSON.parse(c)))}catch(u){i?i(u):console.error(u),r.manager.itemError(e)}},n,i)}parse(e){const t=[];for(let n=0;n<e.length;n++){const i=ma.parse(e[n]);t.push(i)}return t}}class wb extends On{constructor(e){super(e)}load(e,t,n,i){const r=this,a=[],c=new $0,u=new Yi(this.manager);u.setPath(this.path),u.setResponseType("arraybuffer"),u.setRequestHeader(this.requestHeader),u.setWithCredentials(r.withCredentials);let h=0;function d(p){u.load(e[p],function(m){const v=r.parse(m,!0);a[p]={width:v.width,height:v.height,format:v.format,mipmaps:v.mipmaps},h+=1,h===6&&(v.mipmapCount===1&&(c.minFilter=Vt),c.image=a,c.format=v.format,c.needsUpdate=!0,t&&t(c))},n,i)}if(Array.isArray(e))for(let p=0,m=e.length;p<m;++p)d(p);else u.load(e,function(p){const m=r.parse(p,!0);if(m.isCubemap){const v=m.mipmaps.length/m.mipmapCount;for(let x=0;x<v;x++){a[x]={mipmaps:[]};for(let _=0;_<m.mipmapCount;_++)a[x].mipmaps.push(m.mipmaps[x*m.mipmapCount+_]),a[x].format=m.format,a[x].width=m.width,a[x].height=m.height}c.image=a}else c.image.width=m.width,c.image.height=m.height,c.mipmaps=m.mipmaps;m.mipmapCount===1&&(c.minFilter=Vt),c.format=m.format,c.needsUpdate=!0,t&&t(c)},n,i);return c}}class ga extends On{constructor(e){super(e)}load(e,t,n,i){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=this,a=us.get(e);if(a!==void 0)return r.manager.itemStart(e),setTimeout(function(){t&&t(a),r.manager.itemEnd(e)},0),a;const c=la("img");function u(){d(),us.add(e,this),t&&t(this),r.manager.itemEnd(e)}function h(p){d(),i&&i(p),r.manager.itemError(e),r.manager.itemEnd(e)}function d(){c.removeEventListener("load",u,!1),c.removeEventListener("error",h,!1)}return c.addEventListener("load",u,!1),c.addEventListener("error",h,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(c.crossOrigin=this.crossOrigin),r.manager.itemStart(e),c.src=e,c}}class bb extends On{constructor(e){super(e)}load(e,t,n,i){const r=new Ma,a=new ga(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);let c=0;function u(h){a.load(e[h],function(d){r.images[h]=d,c++,c===6&&(r.needsUpdate=!0,t&&t(r))},void 0,i)}for(let h=0;h<e.length;++h)u(h);return r}}class Tb extends On{constructor(e){super(e)}load(e,t,n,i){const r=this,a=new io,c=new Yi(this.manager);return c.setResponseType("arraybuffer"),c.setRequestHeader(this.requestHeader),c.setPath(this.path),c.setWithCredentials(r.withCredentials),c.load(e,function(u){const h=r.parse(u);!h||(h.image!==void 0?a.image=h.image:h.data!==void 0&&(a.image.width=h.width,a.image.height=h.height,a.image.data=h.data),a.wrapS=h.wrapS!==void 0?h.wrapS:vn,a.wrapT=h.wrapT!==void 0?h.wrapT:vn,a.magFilter=h.magFilter!==void 0?h.magFilter:Vt,a.minFilter=h.minFilter!==void 0?h.minFilter:Vt,a.anisotropy=h.anisotropy!==void 0?h.anisotropy:1,h.encoding!==void 0&&(a.encoding=h.encoding),h.flipY!==void 0&&(a.flipY=h.flipY),h.format!==void 0&&(a.format=h.format),h.type!==void 0&&(a.type=h.type),h.mipmaps!==void 0&&(a.mipmaps=h.mipmaps,a.minFilter=hs),h.mipmapCount===1&&(a.minFilter=Vt),h.generateMipmaps!==void 0&&(a.generateMipmaps=h.generateMipmaps),a.needsUpdate=!0,t&&t(a,h))},n,i),a}}class Eb extends On{constructor(e){super(e)}load(e,t,n,i){const r=new Zt,a=new ga(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(e,function(c){r.image=c,r.needsUpdate=!0,t!==void 0&&t(r)},n,i),r}}class Ar extends _t{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new Le(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),t}}class bv extends Ar{constructor(e,t,n){super(e,n),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(_t.DefaultUp),this.updateMatrix(),this.groundColor=new Le(t)}copy(e,t){return super.copy(e,t),this.groundColor.copy(e.groundColor),this}}const ig=new et,rg=new I,sg=new I;class dd{constructor(e){this.camera=e,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new fe(512,512),this.map=null,this.mapPass=null,this.matrix=new et,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Wc,this._frameExtents=new fe(1,1),this._viewportCount=1,this._viewports=[new wt(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,n=this.matrix;rg.setFromMatrixPosition(e.matrixWorld),t.position.copy(rg),sg.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(sg),t.updateMatrixWorld(),ig.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(ig),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(t.projectionMatrix),n.multiply(t.matrixWorldInverse)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class Ab extends dd{constructor(){super(new nn(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(e){const t=this.camera,n=aa*2*e.angle*this.focus,i=this.mapSize.width/this.mapSize.height,r=e.distance||t.far;(n!==t.fov||i!==t.aspect||r!==t.far)&&(t.fov=n,t.aspect=i,t.far=r,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}class Tv extends Ar{constructor(e,t,n=0,i=Math.PI/3,r=0,a=1){super(e,t),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(_t.DefaultUp),this.updateMatrix(),this.target=new _t,this.distance=n,this.angle=i,this.penumbra=r,this.decay=a,this.map=null,this.shadow=new Ab}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}const og=new et,Wo=new I,Uh=new I;class Cb extends dd{constructor(){super(new nn(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new fe(4,2),this._viewportCount=6,this._viewports=[new wt(2,1,1,1),new wt(0,1,1,1),new wt(3,1,1,1),new wt(1,1,1,1),new wt(3,0,1,1),new wt(1,0,1,1)],this._cubeDirections=[new I(1,0,0),new I(-1,0,0),new I(0,0,1),new I(0,0,-1),new I(0,1,0),new I(0,-1,0)],this._cubeUps=[new I(0,1,0),new I(0,1,0),new I(0,1,0),new I(0,1,0),new I(0,0,1),new I(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera,i=this.matrix,r=e.distance||n.far;r!==n.far&&(n.far=r,n.updateProjectionMatrix()),Wo.setFromMatrixPosition(e.matrixWorld),n.position.copy(Wo),Uh.copy(n.position),Uh.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(Uh),n.updateMatrixWorld(),i.makeTranslation(-Wo.x,-Wo.y,-Wo.z),og.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(og)}}class Ev extends Ar{constructor(e,t,n=0,i=1){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new Cb}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class Pb extends dd{constructor(){super(new Sa(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class Av extends Ar{constructor(e,t){super(e,t),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(_t.DefaultUp),this.updateMatrix(),this.target=new _t,this.shadow=new Pb}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}class Cv extends Ar{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}class Pv extends Ar{constructor(e,t,n=10,i=10){super(e,t),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=n,this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(e){this.intensity=e/(this.width*this.height*Math.PI)}copy(e){return super.copy(e),this.width=e.width,this.height=e.height,this}toJSON(e){const t=super.toJSON(e);return t.object.width=this.width,t.object.height=this.height,t}}class Lv{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let e=0;e<9;e++)this.coefficients.push(new I)}set(e){for(let t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this}zero(){for(let e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this}getAt(e,t){const n=e.x,i=e.y,r=e.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.282095),t.addScaledVector(a[1],.488603*i),t.addScaledVector(a[2],.488603*r),t.addScaledVector(a[3],.488603*n),t.addScaledVector(a[4],1.092548*(n*i)),t.addScaledVector(a[5],1.092548*(i*r)),t.addScaledVector(a[6],.315392*(3*r*r-1)),t.addScaledVector(a[7],1.092548*(n*r)),t.addScaledVector(a[8],.546274*(n*n-i*i)),t}getIrradianceAt(e,t){const n=e.x,i=e.y,r=e.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.886227),t.addScaledVector(a[1],2*.511664*i),t.addScaledVector(a[2],2*.511664*r),t.addScaledVector(a[3],2*.511664*n),t.addScaledVector(a[4],2*.429043*n*i),t.addScaledVector(a[5],2*.429043*i*r),t.addScaledVector(a[6],.743125*r*r-.247708),t.addScaledVector(a[7],2*.429043*n*r),t.addScaledVector(a[8],.429043*(n*n-i*i)),t}add(e){for(let t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this}addScaledSH(e,t){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(e.coefficients[n],t);return this}scale(e){for(let t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this}lerp(e,t){for(let n=0;n<9;n++)this.coefficients[n].lerp(e.coefficients[n],t);return this}equals(e){for(let t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0}copy(e){return this.set(e.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(e,t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(e,t+i*3);return this}toArray(e=[],t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(e,t+i*3);return e}static getBasisAt(e,t){const n=e.x,i=e.y,r=e.z;t[0]=.282095,t[1]=.488603*i,t[2]=.488603*r,t[3]=.488603*n,t[4]=1.092548*n*i,t[5]=1.092548*i*r,t[6]=.315392*(3*r*r-1),t[7]=1.092548*n*r,t[8]=.546274*(n*n-i*i)}}class eu extends Ar{constructor(e=new Lv,t=1){super(void 0,t),this.isLightProbe=!0,this.sh=e}copy(e){return super.copy(e),this.sh.copy(e.sh),this}fromJSON(e){return this.intensity=e.intensity,this.sh.fromArray(e.sh),this}toJSON(e){const t=super.toJSON(e);return t.object.sh=this.sh.toArray(),t}}class tu extends On{constructor(e){super(e),this.textures={}}load(e,t,n,i){const r=this,a=new Yi(r.manager);a.setPath(r.path),a.setRequestHeader(r.requestHeader),a.setWithCredentials(r.withCredentials),a.load(e,function(c){try{t(r.parse(JSON.parse(c)))}catch(u){i?i(u):console.error(u),r.manager.itemError(e)}},n,i)}parse(e){const t=this.textures;function n(r){return t[r]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",r),t[r]}const i=tu.createMaterialFromType(e.type);if(e.uuid!==void 0&&(i.uuid=e.uuid),e.name!==void 0&&(i.name=e.name),e.color!==void 0&&i.color!==void 0&&i.color.setHex(e.color),e.roughness!==void 0&&(i.roughness=e.roughness),e.metalness!==void 0&&(i.metalness=e.metalness),e.sheen!==void 0&&(i.sheen=e.sheen),e.sheenColor!==void 0&&(i.sheenColor=new Le().setHex(e.sheenColor)),e.sheenRoughness!==void 0&&(i.sheenRoughness=e.sheenRoughness),e.emissive!==void 0&&i.emissive!==void 0&&i.emissive.setHex(e.emissive),e.specular!==void 0&&i.specular!==void 0&&i.specular.setHex(e.specular),e.specularIntensity!==void 0&&(i.specularIntensity=e.specularIntensity),e.specularColor!==void 0&&i.specularColor!==void 0&&i.specularColor.setHex(e.specularColor),e.shininess!==void 0&&(i.shininess=e.shininess),e.clearcoat!==void 0&&(i.clearcoat=e.clearcoat),e.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=e.clearcoatRoughness),e.iridescence!==void 0&&(i.iridescence=e.iridescence),e.iridescenceIOR!==void 0&&(i.iridescenceIOR=e.iridescenceIOR),e.iridescenceThicknessRange!==void 0&&(i.iridescenceThicknessRange=e.iridescenceThicknessRange),e.transmission!==void 0&&(i.transmission=e.transmission),e.thickness!==void 0&&(i.thickness=e.thickness),e.attenuationDistance!==void 0&&(i.attenuationDistance=e.attenuationDistance),e.attenuationColor!==void 0&&i.attenuationColor!==void 0&&i.attenuationColor.setHex(e.attenuationColor),e.fog!==void 0&&(i.fog=e.fog),e.flatShading!==void 0&&(i.flatShading=e.flatShading),e.blending!==void 0&&(i.blending=e.blending),e.combine!==void 0&&(i.combine=e.combine),e.side!==void 0&&(i.side=e.side),e.shadowSide!==void 0&&(i.shadowSide=e.shadowSide),e.opacity!==void 0&&(i.opacity=e.opacity),e.transparent!==void 0&&(i.transparent=e.transparent),e.alphaTest!==void 0&&(i.alphaTest=e.alphaTest),e.depthTest!==void 0&&(i.depthTest=e.depthTest),e.depthWrite!==void 0&&(i.depthWrite=e.depthWrite),e.colorWrite!==void 0&&(i.colorWrite=e.colorWrite),e.stencilWrite!==void 0&&(i.stencilWrite=e.stencilWrite),e.stencilWriteMask!==void 0&&(i.stencilWriteMask=e.stencilWriteMask),e.stencilFunc!==void 0&&(i.stencilFunc=e.stencilFunc),e.stencilRef!==void 0&&(i.stencilRef=e.stencilRef),e.stencilFuncMask!==void 0&&(i.stencilFuncMask=e.stencilFuncMask),e.stencilFail!==void 0&&(i.stencilFail=e.stencilFail),e.stencilZFail!==void 0&&(i.stencilZFail=e.stencilZFail),e.stencilZPass!==void 0&&(i.stencilZPass=e.stencilZPass),e.wireframe!==void 0&&(i.wireframe=e.wireframe),e.wireframeLinewidth!==void 0&&(i.wireframeLinewidth=e.wireframeLinewidth),e.wireframeLinecap!==void 0&&(i.wireframeLinecap=e.wireframeLinecap),e.wireframeLinejoin!==void 0&&(i.wireframeLinejoin=e.wireframeLinejoin),e.rotation!==void 0&&(i.rotation=e.rotation),e.linewidth!==1&&(i.linewidth=e.linewidth),e.dashSize!==void 0&&(i.dashSize=e.dashSize),e.gapSize!==void 0&&(i.gapSize=e.gapSize),e.scale!==void 0&&(i.scale=e.scale),e.polygonOffset!==void 0&&(i.polygonOffset=e.polygonOffset),e.polygonOffsetFactor!==void 0&&(i.polygonOffsetFactor=e.polygonOffsetFactor),e.polygonOffsetUnits!==void 0&&(i.polygonOffsetUnits=e.polygonOffsetUnits),e.dithering!==void 0&&(i.dithering=e.dithering),e.alphaToCoverage!==void 0&&(i.alphaToCoverage=e.alphaToCoverage),e.premultipliedAlpha!==void 0&&(i.premultipliedAlpha=e.premultipliedAlpha),e.visible!==void 0&&(i.visible=e.visible),e.toneMapped!==void 0&&(i.toneMapped=e.toneMapped),e.userData!==void 0&&(i.userData=e.userData),e.vertexColors!==void 0&&(typeof e.vertexColors=="number"?i.vertexColors=e.vertexColors>0:i.vertexColors=e.vertexColors),e.uniforms!==void 0)for(const r in e.uniforms){const a=e.uniforms[r];switch(i.uniforms[r]={},a.type){case"t":i.uniforms[r].value=n(a.value);break;case"c":i.uniforms[r].value=new Le().setHex(a.value);break;case"v2":i.uniforms[r].value=new fe().fromArray(a.value);break;case"v3":i.uniforms[r].value=new I().fromArray(a.value);break;case"v4":i.uniforms[r].value=new wt().fromArray(a.value);break;case"m3":i.uniforms[r].value=new An().fromArray(a.value);break;case"m4":i.uniforms[r].value=new et().fromArray(a.value);break;default:i.uniforms[r].value=a.value}}if(e.defines!==void 0&&(i.defines=e.defines),e.vertexShader!==void 0&&(i.vertexShader=e.vertexShader),e.fragmentShader!==void 0&&(i.fragmentShader=e.fragmentShader),e.glslVersion!==void 0&&(i.glslVersion=e.glslVersion),e.extensions!==void 0)for(const r in e.extensions)i.extensions[r]=e.extensions[r];if(e.size!==void 0&&(i.size=e.size),e.sizeAttenuation!==void 0&&(i.sizeAttenuation=e.sizeAttenuation),e.map!==void 0&&(i.map=n(e.map)),e.matcap!==void 0&&(i.matcap=n(e.matcap)),e.alphaMap!==void 0&&(i.alphaMap=n(e.alphaMap)),e.bumpMap!==void 0&&(i.bumpMap=n(e.bumpMap)),e.bumpScale!==void 0&&(i.bumpScale=e.bumpScale),e.normalMap!==void 0&&(i.normalMap=n(e.normalMap)),e.normalMapType!==void 0&&(i.normalMapType=e.normalMapType),e.normalScale!==void 0){let r=e.normalScale;Array.isArray(r)===!1&&(r=[r,r]),i.normalScale=new fe().fromArray(r)}return e.displacementMap!==void 0&&(i.displacementMap=n(e.displacementMap)),e.displacementScale!==void 0&&(i.displacementScale=e.displacementScale),e.displacementBias!==void 0&&(i.displacementBias=e.displacementBias),e.roughnessMap!==void 0&&(i.roughnessMap=n(e.roughnessMap)),e.metalnessMap!==void 0&&(i.metalnessMap=n(e.metalnessMap)),e.emissiveMap!==void 0&&(i.emissiveMap=n(e.emissiveMap)),e.emissiveIntensity!==void 0&&(i.emissiveIntensity=e.emissiveIntensity),e.specularMap!==void 0&&(i.specularMap=n(e.specularMap)),e.specularIntensityMap!==void 0&&(i.specularIntensityMap=n(e.specularIntensityMap)),e.specularColorMap!==void 0&&(i.specularColorMap=n(e.specularColorMap)),e.envMap!==void 0&&(i.envMap=n(e.envMap)),e.envMapIntensity!==void 0&&(i.envMapIntensity=e.envMapIntensity),e.reflectivity!==void 0&&(i.reflectivity=e.reflectivity),e.refractionRatio!==void 0&&(i.refractionRatio=e.refractionRatio),e.lightMap!==void 0&&(i.lightMap=n(e.lightMap)),e.lightMapIntensity!==void 0&&(i.lightMapIntensity=e.lightMapIntensity),e.aoMap!==void 0&&(i.aoMap=n(e.aoMap)),e.aoMapIntensity!==void 0&&(i.aoMapIntensity=e.aoMapIntensity),e.gradientMap!==void 0&&(i.gradientMap=n(e.gradientMap)),e.clearcoatMap!==void 0&&(i.clearcoatMap=n(e.clearcoatMap)),e.clearcoatRoughnessMap!==void 0&&(i.clearcoatRoughnessMap=n(e.clearcoatRoughnessMap)),e.clearcoatNormalMap!==void 0&&(i.clearcoatNormalMap=n(e.clearcoatNormalMap)),e.clearcoatNormalScale!==void 0&&(i.clearcoatNormalScale=new fe().fromArray(e.clearcoatNormalScale)),e.iridescenceMap!==void 0&&(i.iridescenceMap=n(e.iridescenceMap)),e.iridescenceThicknessMap!==void 0&&(i.iridescenceThicknessMap=n(e.iridescenceThicknessMap)),e.transmissionMap!==void 0&&(i.transmissionMap=n(e.transmissionMap)),e.thicknessMap!==void 0&&(i.thicknessMap=n(e.thicknessMap)),e.sheenColorMap!==void 0&&(i.sheenColorMap=n(e.sheenColorMap)),e.sheenRoughnessMap!==void 0&&(i.sheenRoughnessMap=n(e.sheenRoughnessMap)),i}setTextures(e){return this.textures=e,this}static createMaterialFromType(e){const t={ShadowMaterial:uv,SpriteMaterial:$f,RawShaderMaterial:hv,ShaderMaterial:bi,PointsMaterial:jc,MeshPhysicalMaterial:fv,MeshStandardMaterial:ad,MeshPhongMaterial:dv,MeshToonMaterial:pv,MeshNormalMaterial:mv,MeshLambertMaterial:gv,MeshDepthMaterial:Jf,MeshDistanceMaterial:jf,MeshBasicMaterial:Tr,MeshMatcapMaterial:vv,LineDashedMaterial:xv,LineBasicMaterial:yn,Material:on};return new t[e]}}class Lf{static decodeText(e){if(typeof TextDecoder<"u")return new TextDecoder().decode(e);let t="";for(let n=0,i=e.length;n<i;n++)t+=String.fromCharCode(e[n]);try{return decodeURIComponent(escape(t))}catch{return t}}static extractUrlBase(e){const t=e.lastIndexOf("/");return t===-1?"./":e.slice(0,t+1)}static resolveURL(e,t){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}}class Rv extends st{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(e){return super.copy(e),this.instanceCount=e.instanceCount,this}clone(){return new this.constructor().copy(this)}toJSON(){const e=super.toJSON(this);return e.instanceCount=this.instanceCount,e.isInstancedBufferGeometry=!0,e}}class Iv extends On{constructor(e){super(e)}load(e,t,n,i){const r=this,a=new Yi(r.manager);a.setPath(r.path),a.setRequestHeader(r.requestHeader),a.setWithCredentials(r.withCredentials),a.load(e,function(c){try{t(r.parse(JSON.parse(c)))}catch(u){i?i(u):console.error(u),r.manager.itemError(e)}},n,i)}parse(e){const t={},n={};function i(v,x){if(t[x]!==void 0)return t[x];const y=v.interleavedBuffers[x],S=r(v,y.buffer),w=$s(y.type,S),T=new Zc(w,y.stride);return T.uuid=y.uuid,t[x]=T,T}function r(v,x){if(n[x]!==void 0)return n[x];const y=v.arrayBuffers[x],S=new Uint32Array(y).buffer;return n[x]=S,S}const a=e.isInstancedBufferGeometry?new Rv:new st,c=e.data.index;if(c!==void 0){const v=$s(c.type,c.array);a.setIndex(new Et(v,1))}const u=e.data.attributes;for(const v in u){const x=u[v];let _;if(x.isInterleavedBufferAttribute){const y=i(e.data,x.data);_=new cs(y,x.itemSize,x.offset,x.normalized)}else{const y=$s(x.type,x.array),S=x.isInstancedBufferAttribute?oo:Et;_=new S(y,x.itemSize,x.normalized)}x.name!==void 0&&(_.name=x.name),x.usage!==void 0&&_.setUsage(x.usage),x.updateRange!==void 0&&(_.updateRange.offset=x.updateRange.offset,_.updateRange.count=x.updateRange.count),a.setAttribute(v,_)}const h=e.data.morphAttributes;if(h)for(const v in h){const x=h[v],_=[];for(let y=0,S=x.length;y<S;y++){const w=x[y];let T;if(w.isInterleavedBufferAttribute){const E=i(e.data,w.data);T=new cs(E,w.itemSize,w.offset,w.normalized)}else{const E=$s(w.type,w.array);T=new Et(E,w.itemSize,w.normalized)}w.name!==void 0&&(T.name=w.name),_.push(T)}a.morphAttributes[v]=_}e.data.morphTargetsRelative&&(a.morphTargetsRelative=!0);const p=e.data.groups||e.data.drawcalls||e.data.offsets;if(p!==void 0)for(let v=0,x=p.length;v!==x;++v){const _=p[v];a.addGroup(_.start,_.count,_.materialIndex)}const m=e.data.boundingSphere;if(m!==void 0){const v=new I;m.center!==void 0&&v.fromArray(m.center),a.boundingSphere=new ds(v,m.radius)}return e.name&&(a.name=e.name),e.userData&&(a.userData=e.userData),a}}class Lb extends On{constructor(e){super(e)}load(e,t,n,i){const r=this,a=this.path===""?Lf.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||a;const c=new Yi(this.manager);c.setPath(this.path),c.setRequestHeader(this.requestHeader),c.setWithCredentials(this.withCredentials),c.load(e,function(u){let h=null;try{h=JSON.parse(u)}catch(p){i!==void 0&&i(p),console.error("THREE:ObjectLoader: Can't parse "+e+".",p.message);return}const d=h.metadata;if(d===void 0||d.type===void 0||d.type.toLowerCase()==="geometry"){console.error("THREE.ObjectLoader: Can't load "+e);return}r.parse(h,t)},n,i)}async loadAsync(e,t){const n=this,i=this.path===""?Lf.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||i;const r=new Yi(this.manager);r.setPath(this.path),r.setRequestHeader(this.requestHeader),r.setWithCredentials(this.withCredentials);const a=await r.loadAsync(e,t),c=JSON.parse(a),u=c.metadata;if(u===void 0||u.type===void 0||u.type.toLowerCase()==="geometry")throw new Error("THREE.ObjectLoader: Can't load "+e);return await n.parseAsync(c)}parse(e,t){const n=this.parseAnimations(e.animations),i=this.parseShapes(e.shapes),r=this.parseGeometries(e.geometries,i),a=this.parseImages(e.images,function(){t!==void 0&&t(h)}),c=this.parseTextures(e.textures,a),u=this.parseMaterials(e.materials,c),h=this.parseObject(e.object,r,u,c,n),d=this.parseSkeletons(e.skeletons,h);if(this.bindSkeletons(h,d),t!==void 0){let p=!1;for(const m in a)if(a[m].data instanceof HTMLImageElement){p=!0;break}p===!1&&t(h)}return h}async parseAsync(e){const t=this.parseAnimations(e.animations),n=this.parseShapes(e.shapes),i=this.parseGeometries(e.geometries,n),r=await this.parseImagesAsync(e.images),a=this.parseTextures(e.textures,r),c=this.parseMaterials(e.materials,a),u=this.parseObject(e.object,i,c,a,t),h=this.parseSkeletons(e.skeletons,u);return this.bindSkeletons(u,h),u}parseShapes(e){const t={};if(e!==void 0)for(let n=0,i=e.length;n<i;n++){const r=new os().fromJSON(e[n]);t[r.uuid]=r}return t}parseSkeletons(e,t){const n={},i={};if(t.traverse(function(r){r.isBone&&(i[r.uuid]=r)}),e!==void 0)for(let r=0,a=e.length;r<a;r++){const c=new Jc().fromJSON(e[r],i);n[c.uuid]=c}return n}parseGeometries(e,t){const n={};if(e!==void 0){const i=new Iv;for(let r=0,a=e.length;r<a;r++){let c;const u=e[r];switch(u.type){case"BufferGeometry":case"InstancedBufferGeometry":c=i.parse(u);break;default:u.type in ng?c=ng[u.type].fromJSON(u,t):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${u.type}"`)}c.uuid=u.uuid,u.name!==void 0&&(c.name=u.name),c.isBufferGeometry===!0&&u.userData!==void 0&&(c.userData=u.userData),n[u.uuid]=c}}return n}parseMaterials(e,t){const n={},i={};if(e!==void 0){const r=new tu;r.setTextures(t);for(let a=0,c=e.length;a<c;a++){const u=e[a];n[u.uuid]===void 0&&(n[u.uuid]=r.parse(u)),i[u.uuid]=n[u.uuid]}}return i}parseAnimations(e){const t={};if(e!==void 0)for(let n=0;n<e.length;n++){const i=e[n],r=ma.parse(i);t[r.uuid]=r}return t}parseImages(e,t){const n=this,i={};let r;function a(u){return n.manager.itemStart(u),r.load(u,function(){n.manager.itemEnd(u)},void 0,function(){n.manager.itemError(u),n.manager.itemEnd(u)})}function c(u){if(typeof u=="string"){const h=u,d=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(h)?h:n.resourcePath+h;return a(d)}else return u.data?{data:$s(u.type,u.data),width:u.width,height:u.height}:null}if(e!==void 0&&e.length>0){const u=new fd(t);r=new ga(u),r.setCrossOrigin(this.crossOrigin);for(let h=0,d=e.length;h<d;h++){const p=e[h],m=p.url;if(Array.isArray(m)){const v=[];for(let x=0,_=m.length;x<_;x++){const y=m[x],S=c(y);S!==null&&(S instanceof HTMLImageElement?v.push(S):v.push(new io(S.data,S.width,S.height)))}i[p.uuid]=new Qr(v)}else{const v=c(p.url);i[p.uuid]=new Qr(v)}}}return i}async parseImagesAsync(e){const t=this,n={};let i;async function r(a){if(typeof a=="string"){const c=a,u=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(c)?c:t.resourcePath+c;return await i.loadAsync(u)}else return a.data?{data:$s(a.type,a.data),width:a.width,height:a.height}:null}if(e!==void 0&&e.length>0){i=new ga(this.manager),i.setCrossOrigin(this.crossOrigin);for(let a=0,c=e.length;a<c;a++){const u=e[a],h=u.url;if(Array.isArray(h)){const d=[];for(let p=0,m=h.length;p<m;p++){const v=h[p],x=await r(v);x!==null&&(x instanceof HTMLImageElement?d.push(x):d.push(new io(x.data,x.width,x.height)))}n[u.uuid]=new Qr(d)}else{const d=await r(u.url);n[u.uuid]=new Qr(d)}}}return n}parseTextures(e,t){function n(r,a){return typeof r=="number"?r:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",r),a[r])}const i={};if(e!==void 0)for(let r=0,a=e.length;r<a;r++){const c=e[r];c.image===void 0&&console.warn('THREE.ObjectLoader: No "image" specified for',c.uuid),t[c.image]===void 0&&console.warn("THREE.ObjectLoader: Undefined image",c.image);const u=t[c.image],h=u.data;let d;Array.isArray(h)?(d=new Ma,h.length===6&&(d.needsUpdate=!0)):(h&&h.data?d=new io:d=new Zt,h&&(d.needsUpdate=!0)),d.source=u,d.uuid=c.uuid,c.name!==void 0&&(d.name=c.name),c.mapping!==void 0&&(d.mapping=n(c.mapping,Rb)),c.offset!==void 0&&d.offset.fromArray(c.offset),c.repeat!==void 0&&d.repeat.fromArray(c.repeat),c.center!==void 0&&d.center.fromArray(c.center),c.rotation!==void 0&&(d.rotation=c.rotation),c.wrap!==void 0&&(d.wrapS=n(c.wrap[0],ag),d.wrapT=n(c.wrap[1],ag)),c.format!==void 0&&(d.format=c.format),c.type!==void 0&&(d.type=c.type),c.encoding!==void 0&&(d.encoding=c.encoding),c.minFilter!==void 0&&(d.minFilter=n(c.minFilter,lg)),c.magFilter!==void 0&&(d.magFilter=n(c.magFilter,lg)),c.anisotropy!==void 0&&(d.anisotropy=c.anisotropy),c.flipY!==void 0&&(d.flipY=c.flipY),c.premultiplyAlpha!==void 0&&(d.premultiplyAlpha=c.premultiplyAlpha),c.unpackAlignment!==void 0&&(d.unpackAlignment=c.unpackAlignment),c.userData!==void 0&&(d.userData=c.userData),i[c.uuid]=d}return i}parseObject(e,t,n,i,r){let a;function c(m){return t[m]===void 0&&console.warn("THREE.ObjectLoader: Undefined geometry",m),t[m]}function u(m){if(m!==void 0){if(Array.isArray(m)){const v=[];for(let x=0,_=m.length;x<_;x++){const y=m[x];n[y]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",y),v.push(n[y])}return v}return n[m]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",m),n[m]}}function h(m){return i[m]===void 0&&console.warn("THREE.ObjectLoader: Undefined texture",m),i[m]}let d,p;switch(e.type){case"Scene":a=new Kf,e.background!==void 0&&(Number.isInteger(e.background)?a.background=new Le(e.background):a.background=h(e.background)),e.environment!==void 0&&(a.environment=h(e.environment)),e.fog!==void 0&&(e.fog.type==="Fog"?a.fog=new Yc(e.fog.color,e.fog.near,e.fog.far):e.fog.type==="FogExp2"&&(a.fog=new qc(e.fog.color,e.fog.density)));break;case"PerspectiveCamera":a=new nn(e.fov,e.aspect,e.near,e.far),e.focus!==void 0&&(a.focus=e.focus),e.zoom!==void 0&&(a.zoom=e.zoom),e.filmGauge!==void 0&&(a.filmGauge=e.filmGauge),e.filmOffset!==void 0&&(a.filmOffset=e.filmOffset),e.view!==void 0&&(a.view=Object.assign({},e.view));break;case"OrthographicCamera":a=new Sa(e.left,e.right,e.top,e.bottom,e.near,e.far),e.zoom!==void 0&&(a.zoom=e.zoom),e.view!==void 0&&(a.view=Object.assign({},e.view));break;case"AmbientLight":a=new Cv(e.color,e.intensity);break;case"DirectionalLight":a=new Av(e.color,e.intensity);break;case"PointLight":a=new Ev(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":a=new Pv(e.color,e.intensity,e.width,e.height);break;case"SpotLight":a=new Tv(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"HemisphereLight":a=new bv(e.color,e.groundColor,e.intensity);break;case"LightProbe":a=new eu().fromJSON(e);break;case"SkinnedMesh":d=c(e.geometry),p=u(e.material),a=new J0(d,p),e.bindMode!==void 0&&(a.bindMode=e.bindMode),e.bindMatrix!==void 0&&a.bindMatrix.fromArray(e.bindMatrix),e.skeleton!==void 0&&(a.skeleton=e.skeleton);break;case"Mesh":d=c(e.geometry),p=u(e.material),a=new sn(d,p);break;case"InstancedMesh":d=c(e.geometry),p=u(e.material);const m=e.count,v=e.instanceMatrix,x=e.instanceColor;a=new j0(d,p,m),a.instanceMatrix=new oo(new Float32Array(v.array),16),x!==void 0&&(a.instanceColor=new oo(new Float32Array(x.array),x.itemSize));break;case"LOD":a=new Z0;break;case"Line":a=new Sr(c(e.geometry),u(e.material));break;case"LineLoop":a=new Q0(c(e.geometry),u(e.material));break;case"LineSegments":a=new Ti(c(e.geometry),u(e.material));break;case"PointCloud":case"Points":a=new K0(c(e.geometry),u(e.material));break;case"Sprite":a=new Y0(u(e.material));break;case"Group":a=new to;break;case"Bone":a=new ed;break;default:a=new _t}if(a.uuid=e.uuid,e.name!==void 0&&(a.name=e.name),e.matrix!==void 0?(a.matrix.fromArray(e.matrix),e.matrixAutoUpdate!==void 0&&(a.matrixAutoUpdate=e.matrixAutoUpdate),a.matrixAutoUpdate&&a.matrix.decompose(a.position,a.quaternion,a.scale)):(e.position!==void 0&&a.position.fromArray(e.position),e.rotation!==void 0&&a.rotation.fromArray(e.rotation),e.quaternion!==void 0&&a.quaternion.fromArray(e.quaternion),e.scale!==void 0&&a.scale.fromArray(e.scale)),e.castShadow!==void 0&&(a.castShadow=e.castShadow),e.receiveShadow!==void 0&&(a.receiveShadow=e.receiveShadow),e.shadow&&(e.shadow.bias!==void 0&&(a.shadow.bias=e.shadow.bias),e.shadow.normalBias!==void 0&&(a.shadow.normalBias=e.shadow.normalBias),e.shadow.radius!==void 0&&(a.shadow.radius=e.shadow.radius),e.shadow.mapSize!==void 0&&a.shadow.mapSize.fromArray(e.shadow.mapSize),e.shadow.camera!==void 0&&(a.shadow.camera=this.parseObject(e.shadow.camera))),e.visible!==void 0&&(a.visible=e.visible),e.frustumCulled!==void 0&&(a.frustumCulled=e.frustumCulled),e.renderOrder!==void 0&&(a.renderOrder=e.renderOrder),e.userData!==void 0&&(a.userData=e.userData),e.layers!==void 0&&(a.layers.mask=e.layers),e.children!==void 0){const m=e.children;for(let v=0;v<m.length;v++)a.add(this.parseObject(m[v],t,n,i,r))}if(e.animations!==void 0){const m=e.animations;for(let v=0;v<m.length;v++){const x=m[v];a.animations.push(r[x])}}if(e.type==="LOD"){e.autoUpdate!==void 0&&(a.autoUpdate=e.autoUpdate);const m=e.levels;for(let v=0;v<m.length;v++){const x=m[v],_=a.getObjectByProperty("uuid",x.object);_!==void 0&&a.addLevel(_,x.distance)}}return a}bindSkeletons(e,t){Object.keys(t).length!==0&&e.traverse(function(n){if(n.isSkinnedMesh===!0&&n.skeleton!==void 0){const i=t[n.skeleton];i===void 0?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",n.skeleton):n.bind(i,n.bindMatrix)}})}}const Rb={UVMapping:Vc,CubeReflectionMapping:_r,CubeRefractionMapping:yr,EquirectangularReflectionMapping:$o,EquirectangularRefractionMapping:ea,CubeUVReflectionMapping:lo},ag={RepeatWrapping:ta,ClampToEdgeWrapping:vn,MirroredRepeatWrapping:na},lg={NearestFilter:Yt,NearestMipmapNearestFilter:Dc,NearestMipmapLinearFilter:zc,LinearFilter:Vt,LinearMipmapNearestFilter:Vf,LinearMipmapLinearFilter:hs};class Ib extends On{constructor(e){super(e),this.isImageBitmapLoader=!0,typeof createImageBitmap>"u"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch>"u"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(e){return this.options=e,this}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=this,a=us.get(e);if(a!==void 0)return r.manager.itemStart(e),setTimeout(function(){t&&t(a),r.manager.itemEnd(e)},0),a;const c={};c.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",c.headers=this.requestHeader,fetch(e,c).then(function(u){return u.blob()}).then(function(u){return createImageBitmap(u,Object.assign(r.options,{colorSpaceConversion:"none"}))}).then(function(u){us.add(e,u),t&&t(u),r.manager.itemEnd(e)}).catch(function(u){i&&i(u),r.manager.itemError(e),r.manager.itemEnd(e)}),r.manager.itemStart(e)}}let pc;const pd={getContext:function(){return pc===void 0&&(pc=new(window.AudioContext||window.webkitAudioContext)),pc},setContext:function(l){pc=l}};class Db extends On{constructor(e){super(e)}load(e,t,n,i){const r=this,a=new Yi(this.manager);a.setResponseType("arraybuffer"),a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(e,function(c){try{const u=c.slice(0);pd.getContext().decodeAudioData(u,function(d){t(d)})}catch(u){i?i(u):console.error(u),r.manager.itemError(e)}},n,i)}}class zb extends eu{constructor(e,t,n=1){super(void 0,n),this.isHemisphereLightProbe=!0;const i=new Le().set(e),r=new Le().set(t),a=new I(i.r,i.g,i.b),c=new I(r.r,r.g,r.b),u=Math.sqrt(Math.PI),h=u*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(c).multiplyScalar(u),this.sh.coefficients[1].copy(a).sub(c).multiplyScalar(h)}}class Nb extends eu{constructor(e,t=1){super(void 0,t),this.isAmbientLightProbe=!0;const n=new Le().set(e);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}}const cg=new et,ug=new et,kr=new et;class Fb{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new nn,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new nn,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(e){const t=this._cache;if(t.focus!==e.focus||t.fov!==e.fov||t.aspect!==e.aspect*this.aspect||t.near!==e.near||t.far!==e.far||t.zoom!==e.zoom||t.eyeSep!==this.eyeSep){t.focus=e.focus,t.fov=e.fov,t.aspect=e.aspect*this.aspect,t.near=e.near,t.far=e.far,t.zoom=e.zoom,t.eyeSep=this.eyeSep,kr.copy(e.projectionMatrix);const i=t.eyeSep/2,r=i*t.near/t.focus,a=t.near*Math.tan(is*t.fov*.5)/t.zoom;let c,u;ug.elements[12]=-i,cg.elements[12]=i,c=-a*t.aspect+r,u=a*t.aspect+r,kr.elements[0]=2*t.near/(u-c),kr.elements[8]=(u+c)/(u-c),this.cameraL.projectionMatrix.copy(kr),c=-a*t.aspect-r,u=a*t.aspect-r,kr.elements[0]=2*t.near/(u-c),kr.elements[8]=(u+c)/(u-c),this.cameraR.projectionMatrix.copy(kr)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(ug),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(cg)}}class md{constructor(e=!0){this.autoStart=e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=hg(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const t=hg();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}}function hg(){return(typeof performance>"u"?Date:performance).now()}const Vr=new I,fg=new Cn,Ob=new I,Gr=new I;class Ub extends _t{constructor(){super(),this.type="AudioListener",this.context=pd.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new md}getInput(){return this.gain}removeFilter(){return this.filter!==null&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(e){return this.filter!==null?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}updateMatrixWorld(e){super.updateMatrixWorld(e);const t=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(Vr,fg,Ob),Gr.set(0,0,-1).applyQuaternion(fg),t.positionX){const i=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(Vr.x,i),t.positionY.linearRampToValueAtTime(Vr.y,i),t.positionZ.linearRampToValueAtTime(Vr.z,i),t.forwardX.linearRampToValueAtTime(Gr.x,i),t.forwardY.linearRampToValueAtTime(Gr.y,i),t.forwardZ.linearRampToValueAtTime(Gr.z,i),t.upX.linearRampToValueAtTime(n.x,i),t.upY.linearRampToValueAtTime(n.y,i),t.upZ.linearRampToValueAtTime(n.z,i)}else t.setPosition(Vr.x,Vr.y,Vr.z),t.setOrientation(Gr.x,Gr.y,Gr.z,n.x,n.y,n.z)}}class Dv extends _t{constructor(e){super(),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this}setMediaElementSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this}setMediaStreamSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this}setBuffer(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this}play(e=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.loopStart=this.loopStart,t.loopEnd=this.loopEnd,t.onended=this.onEnded.bind(this),t.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=t,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(e){return e||(e=[]),this._connected===!0?(this.disconnect(),this.filters=e.slice(),this.connect()):this.filters=e.slice(),this}setDetune(e){if(this.detune=e,this.source.detune!==void 0)return this.isPlaying===!0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=e,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=e,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(e){return this.loopStart=e,this}setLoopEnd(e){return this.loopEnd=e,this}getVolume(){return this.gain.gain.value}setVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}}const Hr=new I,dg=new Cn,Bb=new I,Wr=new I;class kb extends Dv{constructor(e){super(e),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}disconnect(){super.disconnect(),this.panner.disconnect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(e){return this.panner.refDistance=e,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(e){return this.panner.rolloffFactor=e,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(e){return this.panner.distanceModel=e,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(e){return this.panner.maxDistance=e,this}setDirectionalCone(e,t,n){return this.panner.coneInnerAngle=e,this.panner.coneOuterAngle=t,this.panner.coneOuterGain=n,this}updateMatrixWorld(e){if(super.updateMatrixWorld(e),this.hasPlaybackControl===!0&&this.isPlaying===!1)return;this.matrixWorld.decompose(Hr,dg,Bb),Wr.set(0,0,1).applyQuaternion(dg);const t=this.panner;if(t.positionX){const n=this.context.currentTime+this.listener.timeDelta;t.positionX.linearRampToValueAtTime(Hr.x,n),t.positionY.linearRampToValueAtTime(Hr.y,n),t.positionZ.linearRampToValueAtTime(Hr.z,n),t.orientationX.linearRampToValueAtTime(Wr.x,n),t.orientationY.linearRampToValueAtTime(Wr.y,n),t.orientationZ.linearRampToValueAtTime(Wr.z,n)}else t.setPosition(Hr.x,Hr.y,Hr.z),t.setOrientation(Wr.x,Wr.y,Wr.z)}}class Vb{constructor(e,t=2048){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=t,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let e=0;const t=this.getFrequencyData();for(let n=0;n<t.length;n++)e+=t[n];return e/t.length}}class zv{constructor(e,t,n){this.binding=e,this.valueSize=n;let i,r,a;switch(t){case"quaternion":i=this._slerp,r=this._slerpAdditive,a=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(n*6),this._workIndex=5;break;case"string":case"bool":i=this._select,r=this._select,a=this._setAdditiveIdentityOther,this.buffer=new Array(n*5);break;default:i=this._lerp,r=this._lerpAdditive,a=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(n*5)}this._mixBufferRegion=i,this._mixBufferRegionAdditive=r,this._setIdentity=a,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(e,t){const n=this.buffer,i=this.valueSize,r=e*i+i;let a=this.cumulativeWeight;if(a===0){for(let c=0;c!==i;++c)n[r+c]=n[c];a=t}else{a+=t;const c=t/a;this._mixBufferRegion(n,r,0,c,i)}this.cumulativeWeight=a}accumulateAdditive(e){const t=this.buffer,n=this.valueSize,i=n*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(t,i,0,e,n),this.cumulativeWeightAdditive+=e}apply(e){const t=this.valueSize,n=this.buffer,i=e*t+t,r=this.cumulativeWeight,a=this.cumulativeWeightAdditive,c=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,r<1){const u=t*this._origIndex;this._mixBufferRegion(n,i,u,1-r,t)}a>0&&this._mixBufferRegionAdditive(n,i,this._addIndex*t,1,t);for(let u=t,h=t+t;u!==h;++u)if(n[u]!==n[u+t]){c.setValue(n,i);break}}saveOriginalState(){const e=this.binding,t=this.buffer,n=this.valueSize,i=n*this._origIndex;e.getValue(t,i);for(let r=n,a=i;r!==a;++r)t[r]=t[i+r%n];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)}_setAdditiveIdentityNumeric(){const e=this._addIndex*this.valueSize,t=e+this.valueSize;for(let n=e;n<t;n++)this.buffer[n]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const e=this._origIndex*this.valueSize,t=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[t+n]=this.buffer[e+n]}_select(e,t,n,i,r){if(i>=.5)for(let a=0;a!==r;++a)e[t+a]=e[n+a]}_slerp(e,t,n,i){Cn.slerpFlat(e,t,e,t,e,n,i)}_slerpAdditive(e,t,n,i,r){const a=this._workIndex*r;Cn.multiplyQuaternionsFlat(e,a,e,t,e,n),Cn.slerpFlat(e,t,e,t,e,a,i)}_lerp(e,t,n,i,r){const a=1-i;for(let c=0;c!==r;++c){const u=t+c;e[u]=e[u]*a+e[n+c]*i}}_lerpAdditive(e,t,n,i,r){for(let a=0;a!==r;++a){const c=t+a;e[c]=e[c]+e[n+a]*i}}}const gd="\\[\\]\\.:\\/",Gb=new RegExp("["+gd+"]","g"),vd="[^"+gd+"]",Hb="[^"+gd.replace("\\.","")+"]",Wb=/((?:WC+[\/:])*)/.source.replace("WC",vd),Xb=/(WCOD+)?/.source.replace("WCOD",Hb),qb=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",vd),Yb=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",vd),Zb=new RegExp("^"+Wb+Xb+qb+Yb+"$"),Jb=["material","materials","bones","map"];class jb{constructor(e,t,n){const i=n||dt.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,i)}getValue(e,t){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];i!==void 0&&i.getValue(e,t)}setValue(e,t){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i)n[i].setValue(e,t)}bind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()}unbind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}}class dt{constructor(e,t,n){this.path=t,this.parsedPath=n||dt.parseTrackName(t),this.node=dt.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,n){return e&&e.isAnimationObjectGroup?new dt.Composite(e,t,n):new dt(e,t,n)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(Gb,"")}static parseTrackName(e){const t=Zb.exec(e);if(t===null)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(i!==void 0&&i!==-1){const r=n.nodeName.substring(i+1);Jb.indexOf(r)!==-1&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=r)}if(n.propertyName===null||n.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n}static findNode(e,t){if(t===void 0||t===""||t==="."||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){const n=e.skeleton.getBoneByName(t);if(n!==void 0)return n}if(e.children){const n=function(r){for(let a=0;a<r.length;a++){const c=r[a];if(c.name===t||c.uuid===t)return c;const u=n(c.children);if(u)return u}return null},i=n(e.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)e[t++]=n[i]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const t=this.parsedPath,n=t.objectName,i=t.propertyName;let r=t.propertyIndex;if(e||(e=dt.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(n){let h=t.objectIndex;switch(n){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let d=0;d<e.length;d++)if(e[d].name===h){h=d;break}break;case"map":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}e=e.material.map;break;default:if(e[n]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[n]}if(h!==void 0){if(e[h]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[h]}}const a=e[i];if(a===void 0){const h=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+h+"."+i+" but it wasn't found.",e);return}let c=this.Versioning.None;this.targetObject=e,e.needsUpdate!==void 0?c=this.Versioning.NeedsUpdate:e.matrixWorldNeedsUpdate!==void 0&&(c=this.Versioning.MatrixWorldNeedsUpdate);let u=this.BindingType.Direct;if(r!==void 0){if(i==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[r]!==void 0&&(r=e.morphTargetDictionary[r])}u=this.BindingType.ArrayElement,this.resolvedProperty=a,this.propertyIndex=r}else a.fromArray!==void 0&&a.toArray!==void 0?(u=this.BindingType.HasFromToArray,this.resolvedProperty=a):Array.isArray(a)?(u=this.BindingType.EntireArray,this.resolvedProperty=a):this.propertyName=i;this.getValue=this.GetterByBindingType[u],this.setValue=this.SetterByBindingTypeAndVersioning[u][c]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}dt.Composite=jb;dt.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};dt.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};dt.prototype.GetterByBindingType=[dt.prototype._getValue_direct,dt.prototype._getValue_array,dt.prototype._getValue_arrayElement,dt.prototype._getValue_toArray];dt.prototype.SetterByBindingTypeAndVersioning=[[dt.prototype._setValue_direct,dt.prototype._setValue_direct_setNeedsUpdate,dt.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[dt.prototype._setValue_array,dt.prototype._setValue_array_setNeedsUpdate,dt.prototype._setValue_array_setMatrixWorldNeedsUpdate],[dt.prototype._setValue_arrayElement,dt.prototype._setValue_arrayElement_setNeedsUpdate,dt.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[dt.prototype._setValue_fromArray,dt.prototype._setValue_fromArray_setNeedsUpdate,dt.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class Qb{constructor(){this.isAnimationObjectGroup=!0,this.uuid=Fn(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const e={};this._indicesByUUID=e;for(let n=0,i=arguments.length;n!==i;++n)e[arguments[n].uuid]=n;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const t=this;this.stats={objects:{get total(){return t._objects.length},get inUse(){return this.total-t.nCachedObjects_}},get bindingsPerObject(){return t._bindings.length}}}add(){const e=this._objects,t=this._indicesByUUID,n=this._paths,i=this._parsedPaths,r=this._bindings,a=r.length;let c,u=e.length,h=this.nCachedObjects_;for(let d=0,p=arguments.length;d!==p;++d){const m=arguments[d],v=m.uuid;let x=t[v];if(x===void 0){x=u++,t[v]=x,e.push(m);for(let _=0,y=a;_!==y;++_)r[_].push(new dt(m,n[_],i[_]))}else if(x<h){c=e[x];const _=--h,y=e[_];t[y.uuid]=x,e[x]=y,t[v]=_,e[_]=m;for(let S=0,w=a;S!==w;++S){const T=r[S],E=T[_];let C=T[x];T[x]=E,C===void 0&&(C=new dt(m,n[S],i[S])),T[_]=C}}else e[x]!==c&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=h}remove(){const e=this._objects,t=this._indicesByUUID,n=this._bindings,i=n.length;let r=this.nCachedObjects_;for(let a=0,c=arguments.length;a!==c;++a){const u=arguments[a],h=u.uuid,d=t[h];if(d!==void 0&&d>=r){const p=r++,m=e[p];t[m.uuid]=d,e[d]=m,t[h]=p,e[p]=u;for(let v=0,x=i;v!==x;++v){const _=n[v],y=_[p],S=_[d];_[d]=y,_[p]=S}}}this.nCachedObjects_=r}uncache(){const e=this._objects,t=this._indicesByUUID,n=this._bindings,i=n.length;let r=this.nCachedObjects_,a=e.length;for(let c=0,u=arguments.length;c!==u;++c){const h=arguments[c],d=h.uuid,p=t[d];if(p!==void 0)if(delete t[d],p<r){const m=--r,v=e[m],x=--a,_=e[x];t[v.uuid]=p,e[p]=v,t[_.uuid]=m,e[m]=_,e.pop();for(let y=0,S=i;y!==S;++y){const w=n[y],T=w[m],E=w[x];w[p]=T,w[m]=E,w.pop()}}else{const m=--a,v=e[m];m>0&&(t[v.uuid]=p),e[p]=v,e.pop();for(let x=0,_=i;x!==_;++x){const y=n[x];y[p]=y[m],y.pop()}}}this.nCachedObjects_=r}subscribe_(e,t){const n=this._bindingsIndicesByPath;let i=n[e];const r=this._bindings;if(i!==void 0)return r[i];const a=this._paths,c=this._parsedPaths,u=this._objects,h=u.length,d=this.nCachedObjects_,p=new Array(h);i=r.length,n[e]=i,a.push(e),c.push(t),r.push(p);for(let m=d,v=u.length;m!==v;++m){const x=u[m];p[m]=new dt(x,e,t)}return p}unsubscribe_(e){const t=this._bindingsIndicesByPath,n=t[e];if(n!==void 0){const i=this._paths,r=this._parsedPaths,a=this._bindings,c=a.length-1,u=a[c],h=e[c];t[h]=n,a[n]=u,a.pop(),r[n]=r[c],r.pop(),i[n]=i[c],i.pop()}}}class Kb{constructor(e,t,n=null,i=t.blendMode){this._mixer=e,this._clip=t,this._localRoot=n,this.blendMode=i;const r=t.tracks,a=r.length,c=new Array(a),u={endingStart:Jr,endingEnd:Jr};for(let h=0;h!==a;++h){const d=r[h].createInterpolant(null);c[h]=d,d.settings=u}this._interpolantSettings=u,this._interpolants=c,this._propertyBindings=new Array(a),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=T0,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){return this._startTime=e,this}setLoop(e,t){return this.loop=e,this.repetitions=t,this}setEffectiveWeight(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,t,n){if(e.fadeOut(t),this.fadeIn(t),n){const i=this._clip.duration,r=e._clip.duration,a=r/i,c=i/r;e.warp(1,a,t),this.warp(c,1,t)}return this}crossFadeTo(e,t,n){return e.crossFadeFrom(this,t,n)}stopFading(){const e=this._weightInterpolant;return e!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}setEffectiveTimeScale(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){return this.timeScale=this._clip.duration/e,this.stopWarping()}syncWith(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,t,n){const i=this._mixer,r=i.time,a=this.timeScale;let c=this._timeScaleInterpolant;c===null&&(c=i._lendControlInterpolant(),this._timeScaleInterpolant=c);const u=c.parameterPositions,h=c.sampleValues;return u[0]=r,u[1]=r+n,h[0]=e/a,h[1]=t/a,this}stopWarping(){const e=this._timeScaleInterpolant;return e!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,t,n,i){if(!this.enabled){this._updateWeight(e);return}const r=this._startTime;if(r!==null){const u=(e-r)*n;u<0||n===0?t=0:(this._startTime=null,t=n*u)}t*=this._updateTimeScale(e);const a=this._updateTime(t),c=this._updateWeight(e);if(c>0){const u=this._interpolants,h=this._propertyBindings;switch(this.blendMode){case Hf:for(let d=0,p=u.length;d!==p;++d)u[d].evaluate(a),h[d].accumulateAdditive(c);break;case Gc:default:for(let d=0,p=u.length;d!==p;++d)u[d].evaluate(a),h[d].accumulate(i,c)}}}_updateWeight(e){let t=0;if(this.enabled){t=this.weight;const n=this._weightInterpolant;if(n!==null){const i=n.evaluate(e)[0];t*=i,e>n.parameterPositions[1]&&(this.stopFading(),i===0&&(this.enabled=!1))}}return this._effectiveWeight=t,t}_updateTimeScale(e){let t=0;if(!this.paused){t=this.timeScale;const n=this._timeScaleInterpolant;if(n!==null){const i=n.evaluate(e)[0];t*=i,e>n.parameterPositions[1]&&(this.stopWarping(),t===0?this.paused=!0:this.timeScale=t)}}return this._effectiveTimeScale=t,t}_updateTime(e){const t=this._clip.duration,n=this.loop;let i=this.time+e,r=this._loopCount;const a=n===E0;if(e===0)return r===-1?i:a&&(r&1)===1?t-i:i;if(n===b0){r===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(i>=t)i=t;else if(i<0)i=0;else{this.time=i;break e}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(r===-1&&(e>=0?(r=0,this._setEndings(!0,this.repetitions===0,a)):this._setEndings(this.repetitions===0,!0,a)),i>=t||i<0){const c=Math.floor(i/t);i-=t*c,r+=Math.abs(c);const u=this.repetitions-r;if(u<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,i=e>0?t:0,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(u===1){const h=e<0;this._setEndings(h,!h,a)}else this._setEndings(!1,!1,a);this._loopCount=r,this.time=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:c})}}else this.time=i;if(a&&(r&1)===1)return t-i}return i}_setEndings(e,t,n){const i=this._interpolantSettings;n?(i.endingStart=jr,i.endingEnd=jr):(e?i.endingStart=this.zeroSlopeAtStart?jr:Jr:i.endingStart=sa,t?i.endingEnd=this.zeroSlopeAtEnd?jr:Jr:i.endingEnd=sa)}_scheduleFading(e,t,n){const i=this._mixer,r=i.time;let a=this._weightInterpolant;a===null&&(a=i._lendControlInterpolant(),this._weightInterpolant=a);const c=a.parameterPositions,u=a.sampleValues;return c[0]=r,u[0]=t,c[1]=r+e,u[1]=n,this}}const $b=new Float32Array(1);class e3 extends Ji{constructor(e){super(),this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(e,t){const n=e._localRoot||this._root,i=e._clip.tracks,r=i.length,a=e._propertyBindings,c=e._interpolants,u=n.uuid,h=this._bindingsByRootAndName;let d=h[u];d===void 0&&(d={},h[u]=d);for(let p=0;p!==r;++p){const m=i[p],v=m.name;let x=d[v];if(x!==void 0)++x.referenceCount,a[p]=x;else{if(x=a[p],x!==void 0){x._cacheIndex===null&&(++x.referenceCount,this._addInactiveBinding(x,u,v));continue}const _=t&&t._propertyBindings[p].binding.parsedPath;x=new zv(dt.create(n,v,_),m.ValueTypeName,m.getValueSize()),++x.referenceCount,this._addInactiveBinding(x,u,v),a[p]=x}c[p].resultBuffer=x.buffer}}_activateAction(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const n=(e._localRoot||this._root).uuid,i=e._clip.uuid,r=this._actionsByClip[i];this._bindAction(e,r&&r.knownActions[0]),this._addInactiveAction(e,i,n)}const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const r=t[n];r.useCount++===0&&(this._lendBinding(r),r.saveOriginalState())}this._lendAction(e)}}_deactivateAction(e){if(this._isActiveAction(e)){const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const r=t[n];--r.useCount===0&&(r.restoreOriginalState(),this._takeBackBinding(r))}this._takeBackAction(e)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}}_isActiveAction(e){const t=e._cacheIndex;return t!==null&&t<this._nActiveActions}_addInactiveAction(e,t,n){const i=this._actions,r=this._actionsByClip;let a=r[t];if(a===void 0)a={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,r[t]=a;else{const c=a.knownActions;e._byClipCacheIndex=c.length,c.push(e)}e._cacheIndex=i.length,i.push(e),a.actionByRoot[n]=e}_removeInactiveAction(e){const t=this._actions,n=t[t.length-1],i=e._cacheIndex;n._cacheIndex=i,t[i]=n,t.pop(),e._cacheIndex=null;const r=e._clip.uuid,a=this._actionsByClip,c=a[r],u=c.knownActions,h=u[u.length-1],d=e._byClipCacheIndex;h._byClipCacheIndex=d,u[d]=h,u.pop(),e._byClipCacheIndex=null;const p=c.actionByRoot,m=(e._localRoot||this._root).uuid;delete p[m],u.length===0&&delete a[r],this._removeInactiveBindingsForAction(e)}_removeInactiveBindingsForAction(e){const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const r=t[n];--r.referenceCount===0&&this._removeInactiveBinding(r)}}_lendAction(e){const t=this._actions,n=e._cacheIndex,i=this._nActiveActions++,r=t[i];e._cacheIndex=i,t[i]=e,r._cacheIndex=n,t[n]=r}_takeBackAction(e){const t=this._actions,n=e._cacheIndex,i=--this._nActiveActions,r=t[i];e._cacheIndex=i,t[i]=e,r._cacheIndex=n,t[n]=r}_addInactiveBinding(e,t,n){const i=this._bindingsByRootAndName,r=this._bindings;let a=i[t];a===void 0&&(a={},i[t]=a),a[n]=e,e._cacheIndex=r.length,r.push(e)}_removeInactiveBinding(e){const t=this._bindings,n=e.binding,i=n.rootNode.uuid,r=n.path,a=this._bindingsByRootAndName,c=a[i],u=t[t.length-1],h=e._cacheIndex;u._cacheIndex=h,t[h]=u,t.pop(),delete c[r],Object.keys(c).length===0&&delete a[i]}_lendBinding(e){const t=this._bindings,n=e._cacheIndex,i=this._nActiveBindings++,r=t[i];e._cacheIndex=i,t[i]=e,r._cacheIndex=n,t[n]=r}_takeBackBinding(e){const t=this._bindings,n=e._cacheIndex,i=--this._nActiveBindings,r=t[i];e._cacheIndex=i,t[i]=e,r._cacheIndex=n,t[n]=r}_lendControlInterpolant(){const e=this._controlInterpolants,t=this._nActiveControlInterpolants++;let n=e[t];return n===void 0&&(n=new ud(new Float32Array(2),new Float32Array(2),1,$b),n.__cacheIndex=t,e[t]=n),n}_takeBackControlInterpolant(e){const t=this._controlInterpolants,n=e.__cacheIndex,i=--this._nActiveControlInterpolants,r=t[i];e.__cacheIndex=i,t[i]=e,r.__cacheIndex=n,t[n]=r}clipAction(e,t,n){const i=t||this._root,r=i.uuid;let a=typeof e=="string"?ma.findByName(i,e):e;const c=a!==null?a.uuid:e,u=this._actionsByClip[c];let h=null;if(n===void 0&&(a!==null?n=a.blendMode:n=Gc),u!==void 0){const p=u.actionByRoot[r];if(p!==void 0&&p.blendMode===n)return p;h=u.knownActions[0],a===null&&(a=h._clip)}if(a===null)return null;const d=new Kb(this,a,t,n);return this._bindAction(d,h),this._addInactiveAction(d,c,r),d}existingAction(e,t){const n=t||this._root,i=n.uuid,r=typeof e=="string"?ma.findByName(n,e):e,a=r?r.uuid:e,c=this._actionsByClip[a];return c!==void 0&&c.actionByRoot[i]||null}stopAllAction(){const e=this._actions,t=this._nActiveActions;for(let n=t-1;n>=0;--n)e[n].stop();return this}update(e){e*=this.timeScale;const t=this._actions,n=this._nActiveActions,i=this.time+=e,r=Math.sign(e),a=this._accuIndex^=1;for(let h=0;h!==n;++h)t[h]._update(i,e,r,a);const c=this._bindings,u=this._nActiveBindings;for(let h=0;h!==u;++h)c[h].apply(a);return this}setTime(e){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(e)}getRoot(){return this._root}uncacheClip(e){const t=this._actions,n=e.uuid,i=this._actionsByClip,r=i[n];if(r!==void 0){const a=r.knownActions;for(let c=0,u=a.length;c!==u;++c){const h=a[c];this._deactivateAction(h);const d=h._cacheIndex,p=t[t.length-1];h._cacheIndex=null,h._byClipCacheIndex=null,p._cacheIndex=d,t[d]=p,t.pop(),this._removeInactiveBindingsForAction(h)}delete i[n]}}uncacheRoot(e){const t=e.uuid,n=this._actionsByClip;for(const a in n){const c=n[a].actionByRoot,u=c[t];u!==void 0&&(this._deactivateAction(u),this._removeInactiveAction(u))}const i=this._bindingsByRootAndName,r=i[t];if(r!==void 0)for(const a in r){const c=r[a];c.restoreOriginalState(),this._removeInactiveBinding(c)}}uncacheAction(e,t){const n=this.existingAction(e,t);n!==null&&(this._deactivateAction(n),this._removeInactiveAction(n))}}class xd{constructor(e){this.value=e}clone(){return new xd(this.value.clone===void 0?this.value:this.value.clone())}}let t3=0;class n3 extends Ji{constructor(){super(),this.isUniformsGroup=!0,Object.defineProperty(this,"id",{value:t3++}),this.name="",this.usage=oa,this.uniforms=[]}add(e){return this.uniforms.push(e),this}remove(e){const t=this.uniforms.indexOf(e);return t!==-1&&this.uniforms.splice(t,1),this}setName(e){return this.name=e,this}setUsage(e){return this.usage=e,this}dispose(){return this.dispatchEvent({type:"dispose"}),this}copy(e){this.name=e.name,this.usage=e.usage;const t=e.uniforms;this.uniforms.length=0;for(let n=0,i=t.length;n<i;n++)this.uniforms.push(t[n].clone());return this}clone(){return new this.constructor().copy(this)}}class i3 extends Zc{constructor(e,t,n=1){super(e,t),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=n}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}clone(e){const t=super.clone(e);return t.meshPerAttribute=this.meshPerAttribute,t}toJSON(e){const t=super.toJSON(e);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}}class r3{constructor(e,t,n,i,r){this.isGLBufferAttribute=!0,this.buffer=e,this.type=t,this.itemSize=n,this.elementSize=i,this.count=r,this.version=0}set needsUpdate(e){e===!0&&this.version++}setBuffer(e){return this.buffer=e,this}setType(e,t){return this.type=e,this.elementSize=t,this}setItemSize(e){return this.itemSize=e,this}setCount(e){return this.count=e,this}}class Nv{constructor(e,t,n=0,i=1/0){this.ray=new _a(e,t),this.near=n,this.far=i,this.camera=null,this.layers=new ss,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}intersectObject(e,t=!0,n=[]){return Rf(e,this,n,t),n.sort(pg),n}intersectObjects(e,t=!0,n=[]){for(let i=0,r=e.length;i<r;i++)Rf(e[i],this,n,t);return n.sort(pg),n}}function pg(l,e){return l.distance-e.distance}function Rf(l,e,t,n){if(l.layers.test(e.layers)&&l.raycast(e,t),n===!0){const i=l.children;for(let r=0,a=i.length;r<a;r++)Rf(i[r],e,t,!0)}}class s3{constructor(e=1,t=0,n=0){return this.radius=e,this.phi=t,this.theta=n,this}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(Gt(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class o3{constructor(e=1,t=0,n=0){return this.radius=e,this.theta=t,this.y=n,this}set(e,t,n){return this.radius=e,this.theta=t,this.y=n,this}copy(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+n*n),this.theta=Math.atan2(e,n),this.y=t,this}clone(){return new this.constructor().copy(this)}}const mg=new fe;class a3{constructor(e=new fe(1/0,1/0),t=new fe(-1/0,-1/0)){this.isBox2=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=mg.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(e){return this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return mg.copy(e).clamp(this.min,this.max).sub(e).length()}intersect(e){return this.min.max(e.min),this.max.min(e.max),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const gg=new I,mc=new I;class l3{constructor(e=new I,t=new I){this.start=e,this.end=t}set(e,t){return this.start.copy(e),this.end.copy(t),this}copy(e){return this.start.copy(e.start),this.end.copy(e.end),this}getCenter(e){return e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){return e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,t){return this.delta(t).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,t){gg.subVectors(e,this.start),mc.subVectors(this.end,this.start);const n=mc.dot(mc);let r=mc.dot(gg)/n;return t&&(r=Gt(r,0,1)),r}closestPointToPoint(e,t,n){const i=this.closestPointToPointParameter(e,t);return this.delta(n).multiplyScalar(i).add(this.start)}applyMatrix4(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}const vg=new I;class c3 extends _t{constructor(e,t){super(),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=t;const n=new st,i=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let a=0,c=1,u=32;a<u;a++,c++){const h=a/u*Math.PI*2,d=c/u*Math.PI*2;i.push(Math.cos(h),Math.sin(h),1,Math.cos(d),Math.sin(d),1)}n.setAttribute("position",new De(i,3));const r=new yn({fog:!1,toneMapped:!1});this.cone=new Ti(n,r),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateMatrixWorld();const e=this.light.distance?this.light.distance:1e3,t=e*Math.tan(this.light.angle);this.cone.scale.set(t,t,e),vg.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(vg),this.color!==void 0?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const pr=new I,gc=new et,Bh=new et;class u3 extends Ti{constructor(e){const t=Fv(e),n=new st,i=[],r=[],a=new Le(0,0,1),c=new Le(0,1,0);for(let h=0;h<t.length;h++){const d=t[h];d.parent&&d.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),r.push(a.r,a.g,a.b),r.push(c.r,c.g,c.b))}n.setAttribute("position",new De(i,3)),n.setAttribute("color",new De(r,3));const u=new yn({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(n,u),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(e){const t=this.bones,n=this.geometry,i=n.getAttribute("position");Bh.copy(this.root.matrixWorld).invert();for(let r=0,a=0;r<t.length;r++){const c=t[r];c.parent&&c.parent.isBone&&(gc.multiplyMatrices(Bh,c.matrixWorld),pr.setFromMatrixPosition(gc),i.setXYZ(a,pr.x,pr.y,pr.z),gc.multiplyMatrices(Bh,c.parent.matrixWorld),pr.setFromMatrixPosition(gc),i.setXYZ(a+1,pr.x,pr.y,pr.z),a+=2)}n.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(e)}}function Fv(l){const e=[];l.isBone===!0&&e.push(l);for(let t=0;t<l.children.length;t++)e.push.apply(e,Fv(l.children[t]));return e}class h3 extends sn{constructor(e,t,n){const i=new mo(t,4,2),r=new Tr({wireframe:!0,fog:!1,toneMapped:!1});super(i,r),this.light=e,this.light.updateMatrixWorld(),this.color=n,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.color!==void 0?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const f3=new I,xg=new Le,_g=new Le;class d3 extends _t{constructor(e,t,n){super(),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n;const i=new po(t);i.rotateY(Math.PI*.5),this.material=new Tr({wireframe:!0,fog:!1,toneMapped:!1}),this.color===void 0&&(this.material.vertexColors=!0);const r=i.getAttribute("position"),a=new Float32Array(r.count*3);i.setAttribute("color",new Et(a,3)),this.add(new sn(i,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const e=this.children[0];if(this.color!==void 0)this.material.color.set(this.color);else{const t=e.geometry.getAttribute("color");xg.copy(this.light.color),_g.copy(this.light.groundColor);for(let n=0,i=t.count;n<i;n++){const r=n<i/2?xg:_g;t.setXYZ(n,r.r,r.g,r.b)}t.needsUpdate=!0}e.lookAt(f3.setFromMatrixPosition(this.light.matrixWorld).negate())}}class p3 extends Ti{constructor(e=10,t=10,n=4473924,i=8947848){n=new Le(n),i=new Le(i);const r=t/2,a=e/t,c=e/2,u=[],h=[];for(let m=0,v=0,x=-c;m<=t;m++,x+=a){u.push(-c,0,x,c,0,x),u.push(x,0,-c,x,0,c);const _=m===r?n:i;_.toArray(h,v),v+=3,_.toArray(h,v),v+=3,_.toArray(h,v),v+=3,_.toArray(h,v),v+=3}const d=new st;d.setAttribute("position",new De(u,3)),d.setAttribute("color",new De(h,3));const p=new yn({vertexColors:!0,toneMapped:!1});super(d,p),this.type="GridHelper"}}class m3 extends Ti{constructor(e=10,t=16,n=8,i=64,r=4473924,a=8947848){r=new Le(r),a=new Le(a);const c=[],u=[];if(t>1)for(let p=0;p<t;p++){const m=p/t*(Math.PI*2),v=Math.sin(m)*e,x=Math.cos(m)*e;c.push(0,0,0),c.push(v,0,x);const _=p&1?r:a;u.push(_.r,_.g,_.b),u.push(_.r,_.g,_.b)}for(let p=0;p<n;p++){const m=p&1?r:a,v=e-e/n*p;for(let x=0;x<i;x++){let _=x/i*(Math.PI*2),y=Math.sin(_)*v,S=Math.cos(_)*v;c.push(y,0,S),u.push(m.r,m.g,m.b),_=(x+1)/i*(Math.PI*2),y=Math.sin(_)*v,S=Math.cos(_)*v,c.push(y,0,S),u.push(m.r,m.g,m.b)}}const h=new st;h.setAttribute("position",new De(c,3)),h.setAttribute("color",new De(u,3));const d=new yn({vertexColors:!0,toneMapped:!1});super(h,d),this.type="PolarGridHelper"}}const yg=new I,vc=new I,Mg=new I;class g3 extends _t{constructor(e,t,n){super(),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,t===void 0&&(t=1);let i=new st;i.setAttribute("position",new De([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));const r=new yn({fog:!1,toneMapped:!1});this.lightPlane=new Sr(i,r),this.add(this.lightPlane),i=new st,i.setAttribute("position",new De([0,0,0,0,0,1],3)),this.targetLine=new Sr(i,r),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){yg.setFromMatrixPosition(this.light.matrixWorld),vc.setFromMatrixPosition(this.light.target.matrixWorld),Mg.subVectors(vc,yg),this.lightPlane.lookAt(vc),this.color!==void 0?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(vc),this.targetLine.scale.z=Mg.length()}}const xc=new I,Ot=new ya;class v3 extends Ti{constructor(e){const t=new st,n=new yn({color:16777215,vertexColors:!0,toneMapped:!1}),i=[],r=[],a={};c("n1","n2"),c("n2","n4"),c("n4","n3"),c("n3","n1"),c("f1","f2"),c("f2","f4"),c("f4","f3"),c("f3","f1"),c("n1","f1"),c("n2","f2"),c("n3","f3"),c("n4","f4"),c("p","n1"),c("p","n2"),c("p","n3"),c("p","n4"),c("u1","u2"),c("u2","u3"),c("u3","u1"),c("c","t"),c("p","c"),c("cn1","cn2"),c("cn3","cn4"),c("cf1","cf2"),c("cf3","cf4");function c(x,_){u(x),u(_)}function u(x){i.push(0,0,0),r.push(0,0,0),a[x]===void 0&&(a[x]=[]),a[x].push(i.length/3-1)}t.setAttribute("position",new De(i,3)),t.setAttribute("color",new De(r,3)),super(t,n),this.type="CameraHelper",this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update();const h=new Le(16755200),d=new Le(16711680),p=new Le(43775),m=new Le(16777215),v=new Le(3355443);this.setColors(h,d,p,m,v)}setColors(e,t,n,i,r){const c=this.geometry.getAttribute("color");c.setXYZ(0,e.r,e.g,e.b),c.setXYZ(1,e.r,e.g,e.b),c.setXYZ(2,e.r,e.g,e.b),c.setXYZ(3,e.r,e.g,e.b),c.setXYZ(4,e.r,e.g,e.b),c.setXYZ(5,e.r,e.g,e.b),c.setXYZ(6,e.r,e.g,e.b),c.setXYZ(7,e.r,e.g,e.b),c.setXYZ(8,e.r,e.g,e.b),c.setXYZ(9,e.r,e.g,e.b),c.setXYZ(10,e.r,e.g,e.b),c.setXYZ(11,e.r,e.g,e.b),c.setXYZ(12,e.r,e.g,e.b),c.setXYZ(13,e.r,e.g,e.b),c.setXYZ(14,e.r,e.g,e.b),c.setXYZ(15,e.r,e.g,e.b),c.setXYZ(16,e.r,e.g,e.b),c.setXYZ(17,e.r,e.g,e.b),c.setXYZ(18,e.r,e.g,e.b),c.setXYZ(19,e.r,e.g,e.b),c.setXYZ(20,e.r,e.g,e.b),c.setXYZ(21,e.r,e.g,e.b),c.setXYZ(22,e.r,e.g,e.b),c.setXYZ(23,e.r,e.g,e.b),c.setXYZ(24,t.r,t.g,t.b),c.setXYZ(25,t.r,t.g,t.b),c.setXYZ(26,t.r,t.g,t.b),c.setXYZ(27,t.r,t.g,t.b),c.setXYZ(28,t.r,t.g,t.b),c.setXYZ(29,t.r,t.g,t.b),c.setXYZ(30,t.r,t.g,t.b),c.setXYZ(31,t.r,t.g,t.b),c.setXYZ(32,n.r,n.g,n.b),c.setXYZ(33,n.r,n.g,n.b),c.setXYZ(34,n.r,n.g,n.b),c.setXYZ(35,n.r,n.g,n.b),c.setXYZ(36,n.r,n.g,n.b),c.setXYZ(37,n.r,n.g,n.b),c.setXYZ(38,i.r,i.g,i.b),c.setXYZ(39,i.r,i.g,i.b),c.setXYZ(40,r.r,r.g,r.b),c.setXYZ(41,r.r,r.g,r.b),c.setXYZ(42,r.r,r.g,r.b),c.setXYZ(43,r.r,r.g,r.b),c.setXYZ(44,r.r,r.g,r.b),c.setXYZ(45,r.r,r.g,r.b),c.setXYZ(46,r.r,r.g,r.b),c.setXYZ(47,r.r,r.g,r.b),c.setXYZ(48,r.r,r.g,r.b),c.setXYZ(49,r.r,r.g,r.b),c.needsUpdate=!0}update(){const e=this.geometry,t=this.pointMap,n=1,i=1;Ot.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),Bt("c",t,e,Ot,0,0,-1),Bt("t",t,e,Ot,0,0,1),Bt("n1",t,e,Ot,-n,-i,-1),Bt("n2",t,e,Ot,n,-i,-1),Bt("n3",t,e,Ot,-n,i,-1),Bt("n4",t,e,Ot,n,i,-1),Bt("f1",t,e,Ot,-n,-i,1),Bt("f2",t,e,Ot,n,-i,1),Bt("f3",t,e,Ot,-n,i,1),Bt("f4",t,e,Ot,n,i,1),Bt("u1",t,e,Ot,n*.7,i*1.1,-1),Bt("u2",t,e,Ot,-n*.7,i*1.1,-1),Bt("u3",t,e,Ot,0,i*2,-1),Bt("cf1",t,e,Ot,-n,0,1),Bt("cf2",t,e,Ot,n,0,1),Bt("cf3",t,e,Ot,0,-i,1),Bt("cf4",t,e,Ot,0,i,1),Bt("cn1",t,e,Ot,-n,0,-1),Bt("cn2",t,e,Ot,n,0,-1),Bt("cn3",t,e,Ot,0,-i,-1),Bt("cn4",t,e,Ot,0,i,-1),e.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function Bt(l,e,t,n,i,r,a){xc.set(i,r,a).unproject(n);const c=e[l];if(c!==void 0){const u=t.getAttribute("position");for(let h=0,d=c.length;h<d;h++)u.setXYZ(c[h],xc.x,xc.y,xc.z)}}const _c=new fs;class x3 extends Ti{constructor(e,t=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Float32Array(8*3),r=new st;r.setIndex(new Et(n,1)),r.setAttribute("position",new Et(i,3)),super(r,new yn({color:t,toneMapped:!1})),this.object=e,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(e){if(e!==void 0&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),this.object!==void 0&&_c.setFromObject(this.object),_c.isEmpty())return;const t=_c.min,n=_c.max,i=this.geometry.attributes.position,r=i.array;r[0]=n.x,r[1]=n.y,r[2]=n.z,r[3]=t.x,r[4]=n.y,r[5]=n.z,r[6]=t.x,r[7]=t.y,r[8]=n.z,r[9]=n.x,r[10]=t.y,r[11]=n.z,r[12]=n.x,r[13]=n.y,r[14]=t.z,r[15]=t.x,r[16]=n.y,r[17]=t.z,r[18]=t.x,r[19]=t.y,r[20]=t.z,r[21]=n.x,r[22]=t.y,r[23]=t.z,i.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(e){return this.object=e,this.update(),this}copy(e,t){return super.copy(e,t),this.object=e.object,this}}class _3 extends Ti{constructor(e,t=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],r=new st;r.setIndex(new Et(n,1)),r.setAttribute("position",new De(i,3)),super(r,new yn({color:t,toneMapped:!1})),this.box=e,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(e){const t=this.box;t.isEmpty()||(t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(e))}}class y3 extends Sr{constructor(e,t=1,n=16776960){const i=n,r=[1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],a=new st;a.setAttribute("position",new De(r,3)),a.computeBoundingSphere(),super(a,new yn({color:i,toneMapped:!1})),this.type="PlaneHelper",this.plane=e,this.size=t;const c=[1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],u=new st;u.setAttribute("position",new De(c,3)),u.computeBoundingSphere(),this.add(new sn(u,new Tr({color:i,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(e){this.position.set(0,0,0),this.scale.set(.5*this.size,.5*this.size,1),this.lookAt(this.plane.normal),this.translateZ(-this.plane.constant),super.updateMatrixWorld(e)}}const Sg=new I;let yc,kh;class M3 extends _t{constructor(e=new I(0,0,1),t=new I(0,0,0),n=1,i=16776960,r=n*.2,a=r*.2){super(),this.type="ArrowHelper",yc===void 0&&(yc=new st,yc.setAttribute("position",new De([0,0,0,0,1,0],3)),kh=new ps(0,.5,1,5,1),kh.translate(0,-.5,0)),this.position.copy(t),this.line=new Sr(yc,new yn({color:i,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new sn(kh,new Tr({color:i,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(n,r,a)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{Sg.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(Sg,t)}}setLength(e,t=e*.2,n=t*.2){this.line.scale.set(1,Math.max(1e-4,e-t),1),this.line.updateMatrix(),this.cone.scale.set(n,t,n),this.cone.position.y=e,this.cone.updateMatrix()}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}}class S3 extends Ti{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],i=new st;i.setAttribute("position",new De(t,3)),i.setAttribute("color",new De(n,3));const r=new yn({vertexColors:!0,toneMapped:!1});super(i,r),this.type="AxesHelper"}setColors(e,t,n){const i=new Le,r=this.geometry.attributes.color.array;return i.set(e),i.toArray(r,0),i.toArray(r,3),i.set(t),i.toArray(r,6),i.toArray(r,9),i.set(n),i.toArray(r,12),i.toArray(r,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class w3{constructor(){this.type="ShapePath",this.color=new Le,this.subPaths=[],this.currentPath=null}moveTo(e,t){return this.currentPath=new ca,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t),this}lineTo(e,t){return this.currentPath.lineTo(e,t),this}quadraticCurveTo(e,t,n,i){return this.currentPath.quadraticCurveTo(e,t,n,i),this}bezierCurveTo(e,t,n,i,r,a){return this.currentPath.bezierCurveTo(e,t,n,i,r,a),this}splineThru(e){return this.currentPath.splineThru(e),this}toShapes(e){function t(S){const w=[];for(let T=0,E=S.length;T<E;T++){const C=S[T],P=new os;P.curves=C.curves,w.push(P)}return w}function n(S,w){const T=w.length;let E=!1;for(let C=T-1,P=0;P<T;C=P++){let N=w[C],A=w[P],L=A.x-N.x,O=A.y-N.y;if(Math.abs(O)>Number.EPSILON){if(O<0&&(N=w[P],L=-L,A=w[C],O=-O),S.y<N.y||S.y>A.y)continue;if(S.y===N.y){if(S.x===N.x)return!0}else{const X=O*(S.x-N.x)-L*(S.y-N.y);if(X===0)return!0;if(X<0)continue;E=!E}}else{if(S.y!==N.y)continue;if(A.x<=S.x&&S.x<=N.x||N.x<=S.x&&S.x<=A.x)return!0}}return E}const i=wi.isClockWise,r=this.subPaths;if(r.length===0)return[];let a,c,u;const h=[];if(r.length===1)return c=r[0],u=new os,u.curves=c.curves,h.push(u),h;let d=!i(r[0].getPoints());d=e?!d:d;const p=[],m=[];let v=[],x=0,_;m[x]=void 0,v[x]=[];for(let S=0,w=r.length;S<w;S++)c=r[S],_=c.getPoints(),a=i(_),a=e?!a:a,a?(!d&&m[x]&&x++,m[x]={s:new os,p:_},m[x].s.curves=c.curves,d&&x++,v[x]=[]):v[x].push({h:c,p:_[0]});if(!m[0])return t(r);if(m.length>1){let S=!1,w=0;for(let T=0,E=m.length;T<E;T++)p[T]=[];for(let T=0,E=m.length;T<E;T++){const C=v[T];for(let P=0;P<C.length;P++){const N=C[P];let A=!0;for(let L=0;L<m.length;L++)n(N.p,m[L].p)&&(T!==L&&w++,A?(A=!1,p[L].push(N)):S=!0);A&&p[T].push(N)}}w>0&&S===!1&&(v=p)}let y;for(let S=0,w=m.length;S<w;S++){u=m[S].s,h.push(u),y=v[S];for(let T=0,E=y.length;T<E;T++)u.holes.push(y[T].h)}return h}}const Vi=b3();function b3(){const l=new ArrayBuffer(4),e=new Float32Array(l),t=new Uint32Array(l),n=new Uint32Array(512),i=new Uint32Array(512);for(let u=0;u<256;++u){const h=u-127;h<-27?(n[u]=0,n[u|256]=32768,i[u]=24,i[u|256]=24):h<-14?(n[u]=1024>>-h-14,n[u|256]=1024>>-h-14|32768,i[u]=-h-1,i[u|256]=-h-1):h<=15?(n[u]=h+15<<10,n[u|256]=h+15<<10|32768,i[u]=13,i[u|256]=13):h<128?(n[u]=31744,n[u|256]=64512,i[u]=24,i[u|256]=24):(n[u]=31744,n[u|256]=64512,i[u]=13,i[u|256]=13)}const r=new Uint32Array(2048),a=new Uint32Array(64),c=new Uint32Array(64);for(let u=1;u<1024;++u){let h=u<<13,d=0;for(;(h&8388608)===0;)h<<=1,d-=8388608;h&=-8388609,d+=947912704,r[u]=h|d}for(let u=1024;u<2048;++u)r[u]=939524096+(u-1024<<13);for(let u=1;u<31;++u)a[u]=u<<23;a[31]=1199570944,a[32]=2147483648;for(let u=33;u<63;++u)a[u]=2147483648+(u-32<<23);a[63]=3347054592;for(let u=1;u<64;++u)u!==32&&(c[u]=1024);return{floatView:e,uint32View:t,baseTable:n,shiftTable:i,mantissaTable:r,exponentTable:a,offsetTable:c}}function T3(l){Math.abs(l)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),l=Gt(l,-65504,65504),Vi.floatView[0]=l;const e=Vi.uint32View[0],t=e>>23&511;return Vi.baseTable[t]+((e&8388607)>>Vi.shiftTable[t])}function E3(l){const e=l>>10;return Vi.uint32View[0]=Vi.mantissaTable[Vi.offsetTable[e]+(l&1023)]+Vi.exponentTable[e],Vi.floatView[0]}var A3=Object.freeze({__proto__:null,toHalfFloat:T3,fromHalfFloat:E3});function C3(){console.error("THREE.ImmediateRenderObject has been removed.")}class P3 extends ni{constructor(e,t,n){console.error('THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.'),super(e,t,n),this.samples=4}}class L3 extends xa{constructor(e,t,n,i){console.warn("THREE.DataTexture2DArray has been renamed to DataArrayTexture."),super(e,t,n,i)}}class R3 extends Hc{constructor(e,t,n,i){console.warn("THREE.DataTexture3D has been renamed to Data3DTexture."),super(e,t,n,i)}}class I3 extends Er{constructor(e,t,n,i,r,a){console.warn("THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry."),super(e,t,n,i,r,a)}}class D3 extends wa{constructor(e,t,n,i){console.warn("THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry."),super(e,t,n,i)}}class z3 extends ba{constructor(e,t,n,i){console.warn("THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry."),super(e,t,n,i)}}class N3 extends Ta{constructor(e,t,n,i,r,a,c){console.warn("THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry."),super(e,t,n,i,r,a,c)}}class F3 extends ps{constructor(e,t,n,i,r,a,c,u){console.warn("THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry."),super(e,t,n,i,r,a,c,u)}}class O3 extends Ea{constructor(e,t){console.warn("THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry."),super(e,t)}}class U3 extends Aa{constructor(e,t){console.warn("THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry."),super(e,t)}}class B3 extends Ca{constructor(e,t){console.warn("THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry."),super(e,t)}}class k3 extends fo{constructor(e,t,n,i){console.warn("THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry."),super(e,t,n,i)}}class V3 extends po{constructor(e,t){console.warn("THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry."),super(e,t)}}class G3 extends uo{constructor(e,t,n,i){console.warn("THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry."),super(e,t,n,i)}}class H3 extends ji{constructor(e,t,n,i){console.warn("THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry."),super(e,t,n,i)}}class W3 extends Pa{constructor(e,t,n,i,r,a){console.warn("THREE.RingBufferGeometry has been renamed to THREE.RingGeometry."),super(e,t,n,i,r,a)}}class X3 extends La{constructor(e,t){console.warn("THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry."),super(e,t)}}class q3 extends mo{constructor(e,t,n,i,r,a,c){console.warn("THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry."),super(e,t,n,i,r,a,c)}}class Y3 extends Ra{constructor(e,t){console.warn("THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry."),super(e,t)}}class Z3 extends Ia{constructor(e,t,n,i,r){console.warn("THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry."),super(e,t,n,i,r)}}class J3 extends Da{constructor(e,t,n,i,r,a){console.warn("THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry."),super(e,t,n,i,r,a)}}class j3 extends za{constructor(e,t,n,i,r){console.warn("THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry."),super(e,t,n,i,r)}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:kc}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=kc);const Oc=Object.freeze(Object.defineProperty({__proto__:null,ACESFilmicToneMapping:kf,AddEquation:Yr,AddOperation:r0,AdditiveAnimationBlendMode:Hf,AdditiveBlending:Jh,AlphaFormat:p0,AlwaysDepth:Qg,AlwaysStencilFunc:L0,AmbientLight:Cv,AmbientLightProbe:Nb,AnimationClip:ma,AnimationLoader:Sb,AnimationMixer:e3,AnimationObjectGroup:Qb,AnimationUtils:xb,ArcCurve:ev,ArrayCamera:H0,ArrowHelper:M3,Audio:Dv,AudioAnalyser:Vb,AudioContext:pd,AudioListener:Ub,AudioLoader:Db,AxesHelper:S3,BackSide:Nn,BasicDepthPacking:A0,BasicShadowMap:Jx,Bone:ed,BooleanKeyframeTrack:ms,Box2:a3,Box3:fs,Box3Helper:_3,BoxBufferGeometry:I3,BoxGeometry:Er,BoxHelper:x3,BufferAttribute:Et,BufferGeometry:st,BufferGeometryLoader:Iv,ByteType:c0,Cache:us,Camera:ya,CameraHelper:v3,CanvasTexture:Gw,CapsuleBufferGeometry:D3,CapsuleGeometry:wa,CatmullRomCurve3:tv,CineonToneMapping:a0,CircleBufferGeometry:z3,CircleGeometry:ba,ClampToEdgeWrapping:vn,Clock:md,Color:Le,ColorKeyframeTrack:hd,ColorManagement:Kn,CompressedTexture:$0,CompressedTextureLoader:wb,ConeBufferGeometry:N3,ConeGeometry:Ta,CubeCamera:N0,CubeReflectionMapping:_r,CubeRefractionMapping:yr,CubeTexture:Ma,CubeTextureLoader:bb,CubeUVReflectionMapping:lo,CubicBezierCurve:nd,CubicBezierCurve3:nv,CubicInterpolant:yv,CullFaceBack:Zh,CullFaceFront:Og,CullFaceFrontBack:Zx,CullFaceNone:Fg,Curve:fi,CurvePath:rv,CustomBlending:Ug,CustomToneMapping:l0,CylinderBufferGeometry:F3,CylinderGeometry:ps,Cylindrical:o3,Data3DTexture:Hc,DataArrayTexture:xa,DataTexture:io,DataTexture2DArray:L3,DataTexture3D:R3,DataTextureLoader:Tb,DataUtils:A3,DecrementStencilOp:a_,DecrementWrapStencilOp:c_,DefaultLoadingManager:wv,DepthFormat:xr,DepthStencilFormat:ls,DepthTexture:W0,DirectionalLight:Av,DirectionalLightHelper:g3,DiscreteInterpolant:Mv,DodecahedronBufferGeometry:O3,DodecahedronGeometry:Ea,DoubleSide:Gi,DstAlphaFactor:Xg,DstColorFactor:Yg,DynamicCopyUsage:w_,DynamicDrawUsage:ns,DynamicReadUsage:y_,EdgesGeometry:sv,EllipseCurve:Qc,EqualDepth:$g,EqualStencilFunc:d_,EquirectangularReflectionMapping:$o,EquirectangularRefractionMapping:ea,Euler:co,EventDispatcher:Ji,ExtrudeBufferGeometry:U3,ExtrudeGeometry:Aa,FileLoader:Yi,Float16BufferAttribute:ry,Float32BufferAttribute:De,Float64BufferAttribute:sy,FloatType:Hi,Fog:Yc,FogExp2:qc,FramebufferTexture:Vw,FrontSide:as,Frustum:Wc,GLBufferAttribute:r3,GLSL1:T_,GLSL3:Sf,GreaterDepth:t0,GreaterEqualDepth:e0,GreaterEqualStencilFunc:v_,GreaterStencilFunc:m_,GridHelper:p3,Group:to,HalfFloatType:ro,HemisphereLight:bv,HemisphereLightHelper:d3,HemisphereLightProbe:zb,IcosahedronBufferGeometry:B3,IcosahedronGeometry:Ca,ImageBitmapLoader:Ib,ImageLoader:ga,ImageUtils:Xf,ImmediateRenderObject:C3,IncrementStencilOp:o_,IncrementWrapStencilOp:l_,InstancedBufferAttribute:oo,InstancedBufferGeometry:Rv,InstancedInterleavedBuffer:i3,InstancedMesh:j0,Int16BufferAttribute:ny,Int32BufferAttribute:iy,Int8BufferAttribute:$_,IntType:h0,InterleavedBuffer:Zc,InterleavedBufferAttribute:cs,Interpolant:Na,InterpolateDiscrete:ia,InterpolateLinear:ra,InterpolateSmooth:Cc,InvertStencilOp:u_,KeepStencilOp:Pc,KeyframeTrack:di,LOD:Z0,LatheBufferGeometry:k3,LatheGeometry:fo,Layers:ss,LessDepth:Kg,LessEqualDepth:Ic,LessEqualStencilFunc:p_,LessStencilFunc:f_,Light:Ar,LightProbe:eu,Line:Sr,Line3:l3,LineBasicMaterial:yn,LineCurve:Kc,LineCurve3:iv,LineDashedMaterial:xv,LineLoop:Q0,LineSegments:Ti,LinearEncoding:qi,LinearFilter:Vt,LinearInterpolant:ud,LinearMipMapLinearFilter:$x,LinearMipMapNearestFilter:Kx,LinearMipmapLinearFilter:hs,LinearMipmapNearestFilter:Vf,LinearSRGBColorSpace:vr,LinearToneMapping:s0,Loader:On,LoaderUtils:Lf,LoadingManager:fd,LoopOnce:b0,LoopPingPong:E0,LoopRepeat:T0,LuminanceAlphaFormat:v0,LuminanceFormat:g0,MOUSE:qx,Material:on,MaterialLoader:tu,MathUtils:B_,Matrix3:An,Matrix4:et,MaxEquation:$h,Mesh:sn,MeshBasicMaterial:Tr,MeshDepthMaterial:Jf,MeshDistanceMaterial:jf,MeshLambertMaterial:gv,MeshMatcapMaterial:vv,MeshNormalMaterial:mv,MeshPhongMaterial:dv,MeshPhysicalMaterial:fv,MeshStandardMaterial:ad,MeshToonMaterial:pv,MinEquation:Kh,MirroredRepeatWrapping:na,MixOperation:i0,MultiplyBlending:Qh,MultiplyOperation:va,NearestFilter:Yt,NearestMipMapLinearFilter:Qx,NearestMipMapNearestFilter:jx,NearestMipmapLinearFilter:zc,NearestMipmapNearestFilter:Dc,NeverDepth:jg,NeverStencilFunc:h_,NoBlending:Xi,NoColorSpace:i_,NoToneMapping:hi,NormalAnimationBlendMode:Gc,NormalBlending:es,NotEqualDepth:n0,NotEqualStencilFunc:g_,NumberKeyframeTrack:da,Object3D:_t,ObjectLoader:Lb,ObjectSpaceNormalMap:P0,OctahedronBufferGeometry:V3,OctahedronGeometry:po,OneFactor:Gg,OneMinusDstAlphaFactor:qg,OneMinusDstColorFactor:Zg,OneMinusSrcAlphaFactor:Bf,OneMinusSrcColorFactor:Wg,OrthographicCamera:Sa,PCFShadowMap:Ff,PCFSoftShadowMap:Of,PMREMGenerator:bf,Path:ca,PerspectiveCamera:nn,Plane:mr,PlaneBufferGeometry:G3,PlaneGeometry:uo,PlaneHelper:y3,PointLight:Ev,PointLightHelper:h3,Points:K0,PointsMaterial:jc,PolarGridHelper:m3,PolyhedronBufferGeometry:H3,PolyhedronGeometry:ji,PositionalAudio:kb,PropertyBinding:dt,PropertyMixer:zv,QuadraticBezierCurve:id,QuadraticBezierCurve3:rd,Quaternion:Cn,QuaternionKeyframeTrack:go,QuaternionLinearInterpolant:Sv,REVISION:kc,RGBADepthPacking:C0,RGBAFormat:ti,RGBAIntegerFormat:S0,RGBA_ASTC_10x10_Format:xf,RGBA_ASTC_10x5_Format:mf,RGBA_ASTC_10x6_Format:gf,RGBA_ASTC_10x8_Format:vf,RGBA_ASTC_12x10_Format:_f,RGBA_ASTC_12x12_Format:yf,RGBA_ASTC_4x4_Format:af,RGBA_ASTC_5x4_Format:lf,RGBA_ASTC_5x5_Format:cf,RGBA_ASTC_6x5_Format:uf,RGBA_ASTC_6x6_Format:hf,RGBA_ASTC_8x5_Format:ff,RGBA_ASTC_8x6_Format:df,RGBA_ASTC_8x8_Format:pf,RGBA_BPTC_Format:Mf,RGBA_ETC2_EAC_Format:of,RGBA_PVRTC_2BPPV1_Format:rf,RGBA_PVRTC_4BPPV1_Format:nf,RGBA_S3TC_DXT1_Format:Tc,RGBA_S3TC_DXT3_Format:Ec,RGBA_S3TC_DXT5_Format:Ac,RGBFormat:m0,RGB_ETC1_Format:w0,RGB_ETC2_Format:sf,RGB_PVRTC_2BPPV1_Format:tf,RGB_PVRTC_4BPPV1_Format:ef,RGB_S3TC_DXT1_Format:bc,RGFormat:y0,RGIntegerFormat:M0,RawShaderMaterial:hv,Ray:_a,Raycaster:Nv,RectAreaLight:Pv,RedFormat:x0,RedIntegerFormat:_0,ReinhardToneMapping:o0,RepeatWrapping:ta,ReplaceStencilOp:s_,ReverseSubtractEquation:kg,RingBufferGeometry:W3,RingGeometry:Pa,SRGBColorSpace:Si,Scene:Kf,ShaderChunk:at,ShaderLib:ui,ShaderMaterial:bi,ShadowMaterial:uv,Shape:os,ShapeBufferGeometry:X3,ShapeGeometry:La,ShapePath:w3,ShapeUtils:wi,ShortType:u0,Skeleton:Jc,SkeletonHelper:u3,SkinnedMesh:J0,Source:Qr,Sphere:ds,SphereBufferGeometry:q3,SphereGeometry:mo,Spherical:s3,SphericalHarmonics3:Lv,SplineCurve:sd,SpotLight:Tv,SpotLightHelper:c3,Sprite:Y0,SpriteMaterial:$f,SrcAlphaFactor:Uf,SrcAlphaSaturateFactor:Jg,SrcColorFactor:Hg,StaticCopyUsage:S_,StaticDrawUsage:oa,StaticReadUsage:__,StereoCamera:Fb,StreamCopyUsage:b_,StreamDrawUsage:x_,StreamReadUsage:M_,StringKeyframeTrack:gs,SubtractEquation:Bg,SubtractiveBlending:jh,TOUCH:Yx,TangentSpaceNormalMap:br,TetrahedronBufferGeometry:Y3,TetrahedronGeometry:Ra,Texture:Zt,TextureLoader:Eb,TorusBufferGeometry:Z3,TorusGeometry:Ia,TorusKnotBufferGeometry:J3,TorusKnotGeometry:Da,Triangle:ei,TriangleFanDrawMode:n_,TriangleStripDrawMode:t_,TrianglesDrawMode:e_,TubeBufferGeometry:j3,TubeGeometry:za,UVMapping:Vc,Uint16BufferAttribute:qf,Uint32BufferAttribute:Yf,Uint8BufferAttribute:ey,Uint8ClampedBufferAttribute:ty,Uniform:xd,UniformsGroup:n3,UniformsLib:_e,UniformsUtils:z0,UnsignedByteType:Mr,UnsignedInt248Type:ts,UnsignedIntType:gr,UnsignedShort4444Type:f0,UnsignedShort5551Type:d0,UnsignedShortType:Gf,VSMShadowMap:Ks,Vector2:fe,Vector3:I,Vector4:wt,VectorKeyframeTrack:pa,VideoTexture:kw,WebGL1Renderer:X0,WebGL3DRenderTarget:H_,WebGLArrayRenderTarget:G_,WebGLCubeRenderTarget:F0,WebGLMultipleRenderTargets:W_,WebGLMultisampleRenderTarget:P3,WebGLRenderTarget:ni,WebGLRenderer:Qf,WebGLUtils:G0,WireframeGeometry:cv,WrapAroundEnding:sa,ZeroCurvatureEnding:Jr,ZeroFactor:Vg,ZeroSlopeEnding:jr,ZeroStencilOp:r_,_SRGBAFormat:Nc,sRGBEncoding:At},Symbol.toStringTag,{value:"Module"}));var $r={exports:{}},vs={};/**
 * @license React
 * react-reconciler-constants.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */vs.ConcurrentRoot=1;vs.ContinuousEventPriority=4;vs.DefaultEventPriority=16;vs.DiscreteEventPriority=1;vs.IdleEventPriority=536870912;vs.LegacyRoot=0;(function(l){l.exports=vs})($r);function Q3(l){let e;const t=new Set,n=(h,d)=>{const p=typeof h=="function"?h(e):h;if(p!==e){const m=e;e=d?p:Object.assign({},e,p),t.forEach(v=>v(e,m))}},i=()=>e,r=(h,d=i,p=Object.is)=>{console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");let m=d(e);function v(){const x=d(e);if(!p(m,x)){const _=m;h(m=x,_)}}return t.add(v),()=>t.delete(v)},u={setState:n,getState:i,subscribe:(h,d,p)=>d||p?r(h,d,p):(t.add(h),()=>t.delete(h)),destroy:()=>t.clear()};return e=l(n,i,u),u}const K3=typeof window>"u"||!window.navigator||/ServerSideRendering|^Deno\//.test(window.navigator.userAgent),wg=K3?me.exports.useEffect:me.exports.useLayoutEffect;function $3(l){const e=typeof l=="function"?Q3(l):l,t=(n=e.getState,i=Object.is)=>{const[,r]=me.exports.useReducer(y=>y+1,0),a=e.getState(),c=me.exports.useRef(a),u=me.exports.useRef(n),h=me.exports.useRef(i),d=me.exports.useRef(!1),p=me.exports.useRef();p.current===void 0&&(p.current=n(a));let m,v=!1;(c.current!==a||u.current!==n||h.current!==i||d.current)&&(m=n(a),v=!i(p.current,m)),wg(()=>{v&&(p.current=m),c.current=a,u.current=n,h.current=i,d.current=!1});const x=me.exports.useRef(a);wg(()=>{const y=()=>{try{const w=e.getState(),T=u.current(w);h.current(p.current,T)||(c.current=w,p.current=T,r())}catch{d.current=!0,r()}},S=e.subscribe(y);return e.getState()!==x.current&&y(),S},[]);const _=v?m:p.current;return me.exports.useDebugValue(_),_};return Object.assign(t,e),t[Symbol.iterator]=function(){console.warn("[useStore, api] = create() is deprecated and will be removed in v4");const n=[t,e];return{next(){const i=n.length<=0;return{value:n.shift(),done:i}}}},t}var Ov={exports:{}},Uc={exports:{}},Uv={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(l){function e(k,U){var B=k.length;k.push(U);e:for(;0<B;){var le=B-1>>>1,ne=k[le];if(0<i(ne,U))k[le]=U,k[B]=ne,B=le;else break e}}function t(k){return k.length===0?null:k[0]}function n(k){if(k.length===0)return null;var U=k[0],B=k.pop();if(B!==U){k[0]=B;e:for(var le=0,ne=k.length,de=ne>>>1;le<de;){var we=2*(le+1)-1,Be=k[we],se=we+1,Ye=k[se];if(0>i(Be,B))se<ne&&0>i(Ye,Be)?(k[le]=Ye,k[se]=B,le=se):(k[le]=Be,k[we]=B,le=we);else if(se<ne&&0>i(Ye,B))k[le]=Ye,k[se]=B,le=se;else break e}}return U}function i(k,U){var B=k.sortIndex-U.sortIndex;return B!==0?B:k.id-U.id}if(typeof performance=="object"&&typeof performance.now=="function"){var r=performance;l.unstable_now=function(){return r.now()}}else{var a=Date,c=a.now();l.unstable_now=function(){return a.now()-c}}var u=[],h=[],d=1,p=null,m=3,v=!1,x=!1,_=!1,y=typeof setTimeout=="function"?setTimeout:null,S=typeof clearTimeout=="function"?clearTimeout:null,w=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function T(k){for(var U=t(h);U!==null;){if(U.callback===null)n(h);else if(U.startTime<=k)n(h),U.sortIndex=U.expirationTime,e(u,U);else break;U=t(h)}}function E(k){if(_=!1,T(k),!x)if(t(u)!==null)x=!0,ie(C);else{var U=t(h);U!==null&&he(E,U.startTime-k)}}function C(k,U){x=!1,_&&(_=!1,S(A),A=-1),v=!0;var B=m;try{for(T(U),p=t(u);p!==null&&(!(p.expirationTime>U)||k&&!X());){var le=p.callback;if(typeof le=="function"){p.callback=null,m=p.priorityLevel;var ne=le(p.expirationTime<=U);U=l.unstable_now(),typeof ne=="function"?p.callback=ne:p===t(u)&&n(u),T(U)}else n(u);p=t(u)}if(p!==null)var de=!0;else{var we=t(h);we!==null&&he(E,we.startTime-U),de=!1}return de}finally{p=null,m=B,v=!1}}var P=!1,N=null,A=-1,L=5,O=-1;function X(){return!(l.unstable_now()-O<L)}function ae(){if(N!==null){var k=l.unstable_now();O=k;var U=!0;try{U=N(!0,k)}finally{U?J():(P=!1,N=null)}}else P=!1}var J;if(typeof w=="function")J=function(){w(ae)};else if(typeof MessageChannel<"u"){var H=new MessageChannel,K=H.port2;H.port1.onmessage=ae,J=function(){K.postMessage(null)}}else J=function(){y(ae,0)};function ie(k){N=k,P||(P=!0,J())}function he(k,U){A=y(function(){k(l.unstable_now())},U)}l.unstable_IdlePriority=5,l.unstable_ImmediatePriority=1,l.unstable_LowPriority=4,l.unstable_NormalPriority=3,l.unstable_Profiling=null,l.unstable_UserBlockingPriority=2,l.unstable_cancelCallback=function(k){k.callback=null},l.unstable_continueExecution=function(){x||v||(x=!0,ie(C))},l.unstable_forceFrameRate=function(k){0>k||125<k?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):L=0<k?Math.floor(1e3/k):5},l.unstable_getCurrentPriorityLevel=function(){return m},l.unstable_getFirstCallbackNode=function(){return t(u)},l.unstable_next=function(k){switch(m){case 1:case 2:case 3:var U=3;break;default:U=m}var B=m;m=U;try{return k()}finally{m=B}},l.unstable_pauseExecution=function(){},l.unstable_requestPaint=function(){},l.unstable_runWithPriority=function(k,U){switch(k){case 1:case 2:case 3:case 4:case 5:break;default:k=3}var B=m;m=k;try{return U()}finally{m=B}},l.unstable_scheduleCallback=function(k,U,B){var le=l.unstable_now();switch(typeof B=="object"&&B!==null?(B=B.delay,B=typeof B=="number"&&0<B?le+B:le):B=le,k){case 1:var ne=-1;break;case 2:ne=250;break;case 5:ne=1073741823;break;case 4:ne=1e4;break;default:ne=5e3}return ne=B+ne,k={id:d++,callback:U,priorityLevel:k,startTime:B,expirationTime:ne,sortIndex:-1},B>le?(k.sortIndex=B,e(h,k),t(u)===null&&k===t(h)&&(_?(S(A),A=-1):_=!0,he(E,B-le))):(k.sortIndex=ne,e(u,k),x||v||(x=!0,ie(C))),k},l.unstable_shouldYield=X,l.unstable_wrapCallback=function(k){var U=m;return function(){var B=m;m=U;try{return k.apply(this,arguments)}finally{m=B}}}})(Uv);(function(l){l.exports=Uv})(Uc);/**
 * @license React
 * react-reconciler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var eT=function(e){var t={},n=me.exports,i=Uc.exports,r=Object.assign;function a(s){for(var o="https://reactjs.org/docs/error-decoder.html?invariant="+s,f=1;f<arguments.length;f++)o+="&args[]="+encodeURIComponent(arguments[f]);return"Minified React error #"+s+"; visit "+o+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var c=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,u=Symbol.for("react.element"),h=Symbol.for("react.portal"),d=Symbol.for("react.fragment"),p=Symbol.for("react.strict_mode"),m=Symbol.for("react.profiler"),v=Symbol.for("react.provider"),x=Symbol.for("react.context"),_=Symbol.for("react.forward_ref"),y=Symbol.for("react.suspense"),S=Symbol.for("react.suspense_list"),w=Symbol.for("react.memo"),T=Symbol.for("react.lazy"),E=Symbol.for("react.offscreen"),C=Symbol.iterator;function P(s){return s===null||typeof s!="object"?null:(s=C&&s[C]||s["@@iterator"],typeof s=="function"?s:null)}function N(s){if(s==null)return null;if(typeof s=="function")return s.displayName||s.name||null;if(typeof s=="string")return s;switch(s){case d:return"Fragment";case h:return"Portal";case m:return"Profiler";case p:return"StrictMode";case y:return"Suspense";case S:return"SuspenseList"}if(typeof s=="object")switch(s.$$typeof){case x:return(s.displayName||"Context")+".Consumer";case v:return(s._context.displayName||"Context")+".Provider";case _:var o=s.render;return s=s.displayName,s||(s=o.displayName||o.name||"",s=s!==""?"ForwardRef("+s+")":"ForwardRef"),s;case w:return o=s.displayName||null,o!==null?o:N(s.type)||"Memo";case T:o=s._payload,s=s._init;try{return N(s(o))}catch{}}return null}function A(s){var o=s.type;switch(s.tag){case 24:return"Cache";case 9:return(o.displayName||"Context")+".Consumer";case 10:return(o._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return s=o.render,s=s.displayName||s.name||"",o.displayName||(s!==""?"ForwardRef("+s+")":"ForwardRef");case 7:return"Fragment";case 5:return o;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return N(o);case 8:return o===p?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof o=="function")return o.displayName||o.name||null;if(typeof o=="string")return o}return null}function L(s){var o=s,f=s;if(s.alternate)for(;o.return;)o=o.return;else{s=o;do o=s,(o.flags&4098)!==0&&(f=o.return),s=o.return;while(s)}return o.tag===3?f:null}function O(s){if(L(s)!==s)throw Error(a(188))}function X(s){var o=s.alternate;if(!o){if(o=L(s),o===null)throw Error(a(188));return o!==s?null:s}for(var f=s,g=o;;){var M=f.return;if(M===null)break;var b=M.alternate;if(b===null){if(g=M.return,g!==null){f=g;continue}break}if(M.child===b.child){for(b=M.child;b;){if(b===f)return O(M),s;if(b===g)return O(M),o;b=b.sibling}throw Error(a(188))}if(f.return!==g.return)f=M,g=b;else{for(var z=!1,V=M.child;V;){if(V===f){z=!0,f=M,g=b;break}if(V===g){z=!0,g=M,f=b;break}V=V.sibling}if(!z){for(V=b.child;V;){if(V===f){z=!0,f=b,g=M;break}if(V===g){z=!0,g=b,f=M;break}V=V.sibling}if(!z)throw Error(a(189))}}if(f.alternate!==g)throw Error(a(190))}if(f.tag!==3)throw Error(a(188));return f.stateNode.current===f?s:o}function ae(s){return s=X(s),s!==null?J(s):null}function J(s){if(s.tag===5||s.tag===6)return s;for(s=s.child;s!==null;){var o=J(s);if(o!==null)return o;s=s.sibling}return null}function H(s){if(s.tag===5||s.tag===6)return s;for(s=s.child;s!==null;){if(s.tag!==4){var o=H(s);if(o!==null)return o}s=s.sibling}return null}var K=Array.isArray,ie=e.getPublicInstance,he=e.getRootHostContext,k=e.getChildHostContext,U=e.prepareForCommit,B=e.resetAfterCommit,le=e.createInstance,ne=e.appendInitialChild,de=e.finalizeInitialChildren,we=e.prepareUpdate,Be=e.shouldSetTextContent,se=e.createTextInstance,Ye=e.scheduleTimeout,He=e.cancelTimeout,Xe=e.noTimeout,ye=e.isPrimaryRenderer,qe=e.supportsMutation,ue=e.supportsPersistence,te=e.supportsHydration,ve=e.getInstanceFromNode,ze=e.preparePortalMount,Me=e.getCurrentEventPriority,Qe=e.detachDeletedInstance,We=e.supportsMicrotasks,Ve=e.scheduleMicrotask,yt=e.supportsTestSelectors,Mt=e.findFiberRoot,F=e.getBoundingRect,R=e.getTextContent,Q=e.isHiddenSubtree,pe=e.matchAccessibilityRole,xe=e.setFocusIfFocusable,be=e.setupIntersectionObserver,Ze=e.appendChild,$=e.appendChildToContainer,Fe=e.commitTextUpdate,Pe=e.commitMount,Ue=e.commitUpdate,Ie=e.insertBefore,tt=e.insertInContainerBefore,pt=e.removeChild,Dt=e.removeChildFromContainer,W=e.resetTextContent,Ce=e.hideInstance,re=e.hideTextInstance,Ae=e.unhideInstance,Ee=e.unhideTextInstance,ht=e.clearContainer,Ht=e.cloneInstance,Ct=e.createContainerChildSet,ii=e.appendChildToContainerChildSet,Pt=e.finalizeContainerChildren,Un=e.replaceContainerChildren,dn=e.cloneHiddenInstance,Oa=e.cloneHiddenTextInstance,xs=e.canHydrateInstance,Ua=e.canHydrateTextInstance,nu=e.canHydrateSuspenseInstance,Ba=e.isSuspenseInstancePending,vo=e.isSuspenseInstanceFallback,D=e.registerSuspenseInstanceRetry,Y=e.getNextHydratableSibling,oe=e.getFirstHydratableChild,q=e.getFirstHydratableChildWithinContainer,ce=e.getFirstHydratableChildWithinSuspenseInstance,ke=e.hydrateInstance,Je=e.hydrateTextInstance,it=e.hydrateSuspenseInstance,je=e.getNextHydratableInstanceAfterSuspenseInstance,mt=e.commitHydratedContainer,ct=e.commitHydratedSuspenseInstance,ut=e.clearSuspenseBoundary,Lt=e.clearSuspenseBoundaryFromContainer,Ei=e.shouldDeleteUnhydratedTailInstances,Qi=e.didNotMatchHydratedContainerTextInstance,Ki=e.didNotMatchHydratedTextInstance,Mn;function lt(s){if(Mn===void 0)try{throw Error()}catch(f){var o=f.stack.trim().match(/\n( *(at )?)/);Mn=o&&o[1]||""}return`
`+Mn+s}var pi=!1;function Rt(s,o){if(!s||pi)return"";pi=!0;var f=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(o)if(o=function(){throw Error()},Object.defineProperty(o.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(o,[])}catch(ge){var g=ge}Reflect.construct(s,[],o)}else{try{o.call()}catch(ge){g=ge}s.call(o.prototype)}else{try{throw Error()}catch(ge){g=ge}s()}}catch(ge){if(ge&&g&&typeof ge.stack=="string"){for(var M=ge.stack.split(`
`),b=g.stack.split(`
`),z=M.length-1,V=b.length-1;1<=z&&0<=V&&M[z]!==b[V];)V--;for(;1<=z&&0<=V;z--,V--)if(M[z]!==b[V]){if(z!==1||V!==1)do if(z--,V--,0>V||M[z]!==b[V]){var ee=`
`+M[z].replace(" at new "," at ");return s.displayName&&ee.includes("<anonymous>")&&(ee=ee.replace("<anonymous>",s.displayName)),ee}while(1<=z&&0<=V);break}}}finally{pi=!1,Error.prepareStackTrace=f}return(s=s?s.displayName||s.name:"")?lt(s):""}var Sn=Object.prototype.hasOwnProperty,Bn=[],kn=-1;function Vn(s){return{current:s}}function nt(s){0>kn||(s.current=Bn[kn],Bn[kn]=null,kn--)}function ft(s,o){kn++,Bn[kn]=s.current,s.current=o}var Gn={},St=Vn(Gn),Qt=Vn(!1),Ai=Gn;function Ci(s,o){var f=s.type.contextTypes;if(!f)return Gn;var g=s.stateNode;if(g&&g.__reactInternalMemoizedUnmaskedChildContext===o)return g.__reactInternalMemoizedMaskedChildContext;var M={},b;for(b in f)M[b]=o[b];return g&&(s=s.stateNode,s.__reactInternalMemoizedUnmaskedChildContext=o,s.__reactInternalMemoizedMaskedChildContext=M),M}function wn(s){return s=s.childContextTypes,s!=null}function ka(){nt(Qt),nt(St)}function Md(s,o,f){if(St.current!==Gn)throw Error(a(168));ft(St,o),ft(Qt,f)}function Sd(s,o,f){var g=s.stateNode;if(o=o.childContextTypes,typeof g.getChildContext!="function")return f;g=g.getChildContext();for(var M in g)if(!(M in o))throw Error(a(108,A(s)||"Unknown",M));return r({},f,g)}function Va(s){return s=(s=s.stateNode)&&s.__reactInternalMemoizedMergedChildContext||Gn,Ai=St.current,ft(St,s),ft(Qt,Qt.current),!0}function wd(s,o,f){var g=s.stateNode;if(!g)throw Error(a(169));f?(s=Sd(s,o,Ai),g.__reactInternalMemoizedMergedChildContext=s,nt(Qt),nt(St),ft(St,s)):nt(Qt),ft(Qt,f)}var ri=Math.clz32?Math.clz32:nx,ex=Math.log,tx=Math.LN2;function nx(s){return s>>>=0,s===0?32:31-(ex(s)/tx|0)|0}var Ga=64,Ha=4194304;function xo(s){switch(s&-s){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return s&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return s&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return s}}function Wa(s,o){var f=s.pendingLanes;if(f===0)return 0;var g=0,M=s.suspendedLanes,b=s.pingedLanes,z=f&268435455;if(z!==0){var V=z&~M;V!==0?g=xo(V):(b&=z,b!==0&&(g=xo(b)))}else z=f&~M,z!==0?g=xo(z):b!==0&&(g=xo(b));if(g===0)return 0;if(o!==0&&o!==g&&(o&M)===0&&(M=g&-g,b=o&-o,M>=b||M===16&&(b&4194240)!==0))return o;if((g&4)!==0&&(g|=f&16),o=s.entangledLanes,o!==0)for(s=s.entanglements,o&=g;0<o;)f=31-ri(o),M=1<<f,g|=s[f],o&=~M;return g}function ix(s,o){switch(s){case 1:case 2:case 4:return o+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return o+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function rx(s,o){for(var f=s.suspendedLanes,g=s.pingedLanes,M=s.expirationTimes,b=s.pendingLanes;0<b;){var z=31-ri(b),V=1<<z,ee=M[z];ee===-1?((V&f)===0||(V&g)!==0)&&(M[z]=ix(V,o)):ee<=o&&(s.expiredLanes|=V),b&=~V}}function iu(s){return s=s.pendingLanes&-1073741825,s!==0?s:s&1073741824?1073741824:0}function ru(s){for(var o=[],f=0;31>f;f++)o.push(s);return o}function _o(s,o,f){s.pendingLanes|=o,o!==536870912&&(s.suspendedLanes=0,s.pingedLanes=0),s=s.eventTimes,o=31-ri(o),s[o]=f}function sx(s,o){var f=s.pendingLanes&~o;s.pendingLanes=o,s.suspendedLanes=0,s.pingedLanes=0,s.expiredLanes&=o,s.mutableReadLanes&=o,s.entangledLanes&=o,o=s.entanglements;var g=s.eventTimes;for(s=s.expirationTimes;0<f;){var M=31-ri(f),b=1<<M;o[M]=0,g[M]=-1,s[M]=-1,f&=~b}}function su(s,o){var f=s.entangledLanes|=o;for(s=s.entanglements;f;){var g=31-ri(f),M=1<<g;M&o|s[g]&o&&(s[g]|=o),f&=~M}}var gt=0;function bd(s){return s&=-s,1<s?4<s?(s&268435455)!==0?16:536870912:4:1}var ou=i.unstable_scheduleCallback,Td=i.unstable_cancelCallback,ox=i.unstable_shouldYield,ax=i.unstable_requestPaint,Kt=i.unstable_now,au=i.unstable_ImmediatePriority,lx=i.unstable_UserBlockingPriority,lu=i.unstable_NormalPriority,cx=i.unstable_IdlePriority,Xa=null,mi=null;function ux(s){if(mi&&typeof mi.onCommitFiberRoot=="function")try{mi.onCommitFiberRoot(Xa,s,void 0,(s.current.flags&128)===128)}catch{}}function hx(s,o){return s===o&&(s!==0||1/s===1/o)||s!==s&&o!==o}var gi=typeof Object.is=="function"?Object.is:hx,Pi=null,qa=!1,cu=!1;function Ed(s){Pi===null?Pi=[s]:Pi.push(s)}function fx(s){qa=!0,Ed(s)}function vi(){if(!cu&&Pi!==null){cu=!0;var s=0,o=gt;try{var f=Pi;for(gt=1;s<f.length;s++){var g=f[s];do g=g(!0);while(g!==null)}Pi=null,qa=!1}catch(M){throw Pi!==null&&(Pi=Pi.slice(s+1)),ou(au,vi),M}finally{gt=o,cu=!1}}return null}var dx=c.ReactCurrentBatchConfig;function Ya(s,o){if(gi(s,o))return!0;if(typeof s!="object"||s===null||typeof o!="object"||o===null)return!1;var f=Object.keys(s),g=Object.keys(o);if(f.length!==g.length)return!1;for(g=0;g<f.length;g++){var M=f[g];if(!Sn.call(o,M)||!gi(s[M],o[M]))return!1}return!0}function px(s){switch(s.tag){case 5:return lt(s.type);case 16:return lt("Lazy");case 13:return lt("Suspense");case 19:return lt("SuspenseList");case 0:case 2:case 15:return s=Rt(s.type,!1),s;case 11:return s=Rt(s.type.render,!1),s;case 1:return s=Rt(s.type,!0),s;default:return""}}function si(s,o){if(s&&s.defaultProps){o=r({},o),s=s.defaultProps;for(var f in s)o[f]===void 0&&(o[f]=s[f]);return o}return o}var Za=Vn(null),Ja=null,_s=null,uu=null;function hu(){uu=_s=Ja=null}function Ad(s,o,f){ye?(ft(Za,o._currentValue),o._currentValue=f):(ft(Za,o._currentValue2),o._currentValue2=f)}function fu(s){var o=Za.current;nt(Za),ye?s._currentValue=o:s._currentValue2=o}function du(s,o,f){for(;s!==null;){var g=s.alternate;if((s.childLanes&o)!==o?(s.childLanes|=o,g!==null&&(g.childLanes|=o)):g!==null&&(g.childLanes&o)!==o&&(g.childLanes|=o),s===f)break;s=s.return}}function ys(s,o){Ja=s,uu=_s=null,s=s.dependencies,s!==null&&s.firstContext!==null&&((s.lanes&o)!==0&&(Rn=!0),s.firstContext=null)}function Hn(s){var o=ye?s._currentValue:s._currentValue2;if(uu!==s)if(s={context:s,memoizedValue:o,next:null},_s===null){if(Ja===null)throw Error(a(308));_s=s,Ja.dependencies={lanes:0,firstContext:s}}else _s=_s.next=s;return o}var xi=null,$i=!1;function pu(s){s.updateQueue={baseState:s.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Cd(s,o){s=s.updateQueue,o.updateQueue===s&&(o.updateQueue={baseState:s.baseState,firstBaseUpdate:s.firstBaseUpdate,lastBaseUpdate:s.lastBaseUpdate,shared:s.shared,effects:s.effects})}function Li(s,o){return{eventTime:s,lane:o,tag:0,payload:null,callback:null,next:null}}function er(s,o){var f=s.updateQueue;f!==null&&(f=f.shared,Wt!==null&&(s.mode&1)!==0&&(ot&2)===0?(s=f.interleaved,s===null?(o.next=o,xi===null?xi=[f]:xi.push(f)):(o.next=s.next,s.next=o),f.interleaved=o):(s=f.pending,s===null?o.next=o:(o.next=s.next,s.next=o),f.pending=o))}function ja(s,o,f){if(o=o.updateQueue,o!==null&&(o=o.shared,(f&4194240)!==0)){var g=o.lanes;g&=s.pendingLanes,f|=g,o.lanes=f,su(s,f)}}function Pd(s,o){var f=s.updateQueue,g=s.alternate;if(g!==null&&(g=g.updateQueue,f===g)){var M=null,b=null;if(f=f.firstBaseUpdate,f!==null){do{var z={eventTime:f.eventTime,lane:f.lane,tag:f.tag,payload:f.payload,callback:f.callback,next:null};b===null?M=b=z:b=b.next=z,f=f.next}while(f!==null);b===null?M=b=o:b=b.next=o}else M=b=o;f={baseState:g.baseState,firstBaseUpdate:M,lastBaseUpdate:b,shared:g.shared,effects:g.effects},s.updateQueue=f;return}s=f.lastBaseUpdate,s===null?f.firstBaseUpdate=o:s.next=o,f.lastBaseUpdate=o}function Qa(s,o,f,g){var M=s.updateQueue;$i=!1;var b=M.firstBaseUpdate,z=M.lastBaseUpdate,V=M.shared.pending;if(V!==null){M.shared.pending=null;var ee=V,ge=ee.next;ee.next=null,z===null?b=ge:z.next=ge,z=ee;var Re=s.alternate;Re!==null&&(Re=Re.updateQueue,V=Re.lastBaseUpdate,V!==z&&(V===null?Re.firstBaseUpdate=ge:V.next=ge,Re.lastBaseUpdate=ee))}if(b!==null){var Ke=M.baseState;z=0,Re=ge=ee=null,V=b;do{var Ge=V.lane,bt=V.eventTime;if((g&Ge)===Ge){Re!==null&&(Re=Re.next={eventTime:bt,lane:0,tag:V.tag,payload:V.payload,callback:V.callback,next:null});e:{var Oe=s,un=V;switch(Ge=o,bt=f,un.tag){case 1:if(Oe=un.payload,typeof Oe=="function"){Ke=Oe.call(bt,Ke,Ge);break e}Ke=Oe;break e;case 3:Oe.flags=Oe.flags&-65537|128;case 0:if(Oe=un.payload,Ge=typeof Oe=="function"?Oe.call(bt,Ke,Ge):Oe,Ge==null)break e;Ke=r({},Ke,Ge);break e;case 2:$i=!0}}V.callback!==null&&V.lane!==0&&(s.flags|=64,Ge=M.effects,Ge===null?M.effects=[V]:Ge.push(V))}else bt={eventTime:bt,lane:Ge,tag:V.tag,payload:V.payload,callback:V.callback,next:null},Re===null?(ge=Re=bt,ee=Ke):Re=Re.next=bt,z|=Ge;if(V=V.next,V===null){if(V=M.shared.pending,V===null)break;Ge=V,V=Ge.next,Ge.next=null,M.lastBaseUpdate=Ge,M.shared.pending=null}}while(1);if(Re===null&&(ee=Ke),M.baseState=ee,M.firstBaseUpdate=ge,M.lastBaseUpdate=Re,o=M.shared.interleaved,o!==null){M=o;do z|=M.lane,M=M.next;while(M!==o)}else b===null&&(M.shared.lanes=0);Ps|=z,s.lanes=z,s.memoizedState=Ke}}function Ld(s,o,f){if(s=o.effects,o.effects=null,s!==null)for(o=0;o<s.length;o++){var g=s[o],M=g.callback;if(M!==null){if(g.callback=null,g=f,typeof M!="function")throw Error(a(191,M));M.call(g)}}}var Rd=new n.Component().refs;function mu(s,o,f,g){o=s.memoizedState,f=f(g,o),f=f==null?o:r({},o,f),s.memoizedState=f,s.lanes===0&&(s.updateQueue.baseState=f)}var Ka={isMounted:function(s){return(s=s._reactInternals)?L(s)===s:!1},enqueueSetState:function(s,o,f){s=s._reactInternals;var g=mn(),M=ir(s),b=Li(g,M);b.payload=o,f!=null&&(b.callback=f),er(s,b),o=Zn(s,M,g),o!==null&&ja(o,s,M)},enqueueReplaceState:function(s,o,f){s=s._reactInternals;var g=mn(),M=ir(s),b=Li(g,M);b.tag=1,b.payload=o,f!=null&&(b.callback=f),er(s,b),o=Zn(s,M,g),o!==null&&ja(o,s,M)},enqueueForceUpdate:function(s,o){s=s._reactInternals;var f=mn(),g=ir(s),M=Li(f,g);M.tag=2,o!=null&&(M.callback=o),er(s,M),o=Zn(s,g,f),o!==null&&ja(o,s,g)}};function Id(s,o,f,g,M,b,z){return s=s.stateNode,typeof s.shouldComponentUpdate=="function"?s.shouldComponentUpdate(g,b,z):o.prototype&&o.prototype.isPureReactComponent?!Ya(f,g)||!Ya(M,b):!0}function Dd(s,o,f){var g=!1,M=Gn,b=o.contextType;return typeof b=="object"&&b!==null?b=Hn(b):(M=wn(o)?Ai:St.current,g=o.contextTypes,b=(g=g!=null)?Ci(s,M):Gn),o=new o(f,b),s.memoizedState=o.state!==null&&o.state!==void 0?o.state:null,o.updater=Ka,s.stateNode=o,o._reactInternals=s,g&&(s=s.stateNode,s.__reactInternalMemoizedUnmaskedChildContext=M,s.__reactInternalMemoizedMaskedChildContext=b),o}function zd(s,o,f,g){s=o.state,typeof o.componentWillReceiveProps=="function"&&o.componentWillReceiveProps(f,g),typeof o.UNSAFE_componentWillReceiveProps=="function"&&o.UNSAFE_componentWillReceiveProps(f,g),o.state!==s&&Ka.enqueueReplaceState(o,o.state,null)}function gu(s,o,f,g){var M=s.stateNode;M.props=f,M.state=s.memoizedState,M.refs=Rd,pu(s);var b=o.contextType;typeof b=="object"&&b!==null?M.context=Hn(b):(b=wn(o)?Ai:St.current,M.context=Ci(s,b)),M.state=s.memoizedState,b=o.getDerivedStateFromProps,typeof b=="function"&&(mu(s,o,b,f),M.state=s.memoizedState),typeof o.getDerivedStateFromProps=="function"||typeof M.getSnapshotBeforeUpdate=="function"||typeof M.UNSAFE_componentWillMount!="function"&&typeof M.componentWillMount!="function"||(o=M.state,typeof M.componentWillMount=="function"&&M.componentWillMount(),typeof M.UNSAFE_componentWillMount=="function"&&M.UNSAFE_componentWillMount(),o!==M.state&&Ka.enqueueReplaceState(M,M.state,null),Qa(s,f,M,g),M.state=s.memoizedState),typeof M.componentDidMount=="function"&&(s.flags|=4194308)}var Ms=[],Ss=0,$a=null,el=0,Wn=[],Xn=0,Cr=null,Ri=1,Ii="";function Pr(s,o){Ms[Ss++]=el,Ms[Ss++]=$a,$a=s,el=o}function Nd(s,o,f){Wn[Xn++]=Ri,Wn[Xn++]=Ii,Wn[Xn++]=Cr,Cr=s;var g=Ri;s=Ii;var M=32-ri(g)-1;g&=~(1<<M),f+=1;var b=32-ri(o)+M;if(30<b){var z=M-M%5;b=(g&(1<<z)-1).toString(32),g>>=z,M-=z,Ri=1<<32-ri(o)+M|f<<M|g,Ii=b+s}else Ri=1<<b|f<<M|g,Ii=s}function vu(s){s.return!==null&&(Pr(s,1),Nd(s,1,0))}function xu(s){for(;s===$a;)$a=Ms[--Ss],Ms[Ss]=null,el=Ms[--Ss],Ms[Ss]=null;for(;s===Cr;)Cr=Wn[--Xn],Wn[Xn]=null,Ii=Wn[--Xn],Wn[Xn]=null,Ri=Wn[--Xn],Wn[Xn]=null}var Pn=null,Ln=null,It=!1,yo=!1,oi=null;function Fd(s,o){var f=Jn(5,null,null,0);f.elementType="DELETED",f.stateNode=o,f.return=s,o=s.deletions,o===null?(s.deletions=[f],s.flags|=16):o.push(f)}function Od(s,o){switch(s.tag){case 5:return o=xs(o,s.type,s.pendingProps),o!==null?(s.stateNode=o,Pn=s,Ln=oe(o),!0):!1;case 6:return o=Ua(o,s.pendingProps),o!==null?(s.stateNode=o,Pn=s,Ln=null,!0):!1;case 13:if(o=nu(o),o!==null){var f=Cr!==null?{id:Ri,overflow:Ii}:null;return s.memoizedState={dehydrated:o,treeContext:f,retryLane:1073741824},f=Jn(18,null,null,0),f.stateNode=o,f.return=s,s.child=f,Pn=s,Ln=null,!0}return!1;default:return!1}}function _u(s){return(s.mode&1)!==0&&(s.flags&128)===0}function yu(s){if(It){var o=Ln;if(o){var f=o;if(!Od(s,o)){if(_u(s))throw Error(a(418));o=Y(f);var g=Pn;o&&Od(s,o)?Fd(g,f):(s.flags=s.flags&-4097|2,It=!1,Pn=s)}}else{if(_u(s))throw Error(a(418));s.flags=s.flags&-4097|2,It=!1,Pn=s}}}function Ud(s){for(s=s.return;s!==null&&s.tag!==5&&s.tag!==3&&s.tag!==13;)s=s.return;Pn=s}function Mo(s){if(!te||s!==Pn)return!1;if(!It)return Ud(s),It=!0,!1;if(s.tag!==3&&(s.tag!==5||Ei(s.type)&&!Be(s.type,s.memoizedProps))){var o=Ln;if(o){if(_u(s)){for(s=Ln;s;)s=Y(s);throw Error(a(418))}for(;o;)Fd(s,o),o=Y(o)}}if(Ud(s),s.tag===13){if(!te)throw Error(a(316));if(s=s.memoizedState,s=s!==null?s.dehydrated:null,!s)throw Error(a(317));Ln=je(s)}else Ln=Pn?Y(s.stateNode):null;return!0}function ws(){te&&(Ln=Pn=null,yo=It=!1)}function Mu(s){oi===null?oi=[s]:oi.push(s)}function So(s,o,f){if(s=f.ref,s!==null&&typeof s!="function"&&typeof s!="object"){if(f._owner){if(f=f._owner,f){if(f.tag!==1)throw Error(a(309));var g=f.stateNode}if(!g)throw Error(a(147,s));var M=g,b=""+s;return o!==null&&o.ref!==null&&typeof o.ref=="function"&&o.ref._stringRef===b?o.ref:(o=function(z){var V=M.refs;V===Rd&&(V=M.refs={}),z===null?delete V[b]:V[b]=z},o._stringRef=b,o)}if(typeof s!="string")throw Error(a(284));if(!f._owner)throw Error(a(290,s))}return s}function tl(s,o){throw s=Object.prototype.toString.call(o),Error(a(31,s==="[object Object]"?"object with keys {"+Object.keys(o).join(", ")+"}":s))}function Bd(s){var o=s._init;return o(s._payload)}function kd(s){function o(Z,G){if(s){var j=Z.deletions;j===null?(Z.deletions=[G],Z.flags|=16):j.push(G)}}function f(Z,G){if(!s)return null;for(;G!==null;)o(Z,G),G=G.sibling;return null}function g(Z,G){for(Z=new Map;G!==null;)G.key!==null?Z.set(G.key,G):Z.set(G.index,G),G=G.sibling;return Z}function M(Z,G){return Z=sr(Z,G),Z.index=0,Z.sibling=null,Z}function b(Z,G,j){return Z.index=j,s?(j=Z.alternate,j!==null?(j=j.index,j<G?(Z.flags|=2,G):j):(Z.flags|=2,G)):(Z.flags|=1048576,G)}function z(Z){return s&&Z.alternate===null&&(Z.flags|=2),Z}function V(Z,G,j,Te){return G===null||G.tag!==6?(G=rh(j,Z.mode,Te),G.return=Z,G):(G=M(G,j),G.return=Z,G)}function ee(Z,G,j,Te){var Ne=j.type;return Ne===d?Re(Z,G,j.props.children,Te,j.key):G!==null&&(G.elementType===Ne||typeof Ne=="object"&&Ne!==null&&Ne.$$typeof===T&&Bd(Ne)===G.type)?(Te=M(G,j.props),Te.ref=So(Z,G,j),Te.return=Z,Te):(Te=Il(j.type,j.key,j.props,null,Z.mode,Te),Te.ref=So(Z,G,j),Te.return=Z,Te)}function ge(Z,G,j,Te){return G===null||G.tag!==4||G.stateNode.containerInfo!==j.containerInfo||G.stateNode.implementation!==j.implementation?(G=sh(j,Z.mode,Te),G.return=Z,G):(G=M(G,j.children||[]),G.return=Z,G)}function Re(Z,G,j,Te,Ne){return G===null||G.tag!==7?(G=Fr(j,Z.mode,Te,Ne),G.return=Z,G):(G=M(G,j),G.return=Z,G)}function Ke(Z,G,j){if(typeof G=="string"&&G!==""||typeof G=="number")return G=rh(""+G,Z.mode,j),G.return=Z,G;if(typeof G=="object"&&G!==null){switch(G.$$typeof){case u:return j=Il(G.type,G.key,G.props,null,Z.mode,j),j.ref=So(Z,null,G),j.return=Z,j;case h:return G=sh(G,Z.mode,j),G.return=Z,G;case T:var Te=G._init;return Ke(Z,Te(G._payload),j)}if(K(G)||P(G))return G=Fr(G,Z.mode,j,null),G.return=Z,G;tl(Z,G)}return null}function Ge(Z,G,j,Te){var Ne=G!==null?G.key:null;if(typeof j=="string"&&j!==""||typeof j=="number")return Ne!==null?null:V(Z,G,""+j,Te);if(typeof j=="object"&&j!==null){switch(j.$$typeof){case u:return j.key===Ne?ee(Z,G,j,Te):null;case h:return j.key===Ne?ge(Z,G,j,Te):null;case T:return Ne=j._init,Ge(Z,G,Ne(j._payload),Te)}if(K(j)||P(j))return Ne!==null?null:Re(Z,G,j,Te,null);tl(Z,j)}return null}function bt(Z,G,j,Te,Ne){if(typeof Te=="string"&&Te!==""||typeof Te=="number")return Z=Z.get(j)||null,V(G,Z,""+Te,Ne);if(typeof Te=="object"&&Te!==null){switch(Te.$$typeof){case u:return Z=Z.get(Te.key===null?j:Te.key)||null,ee(G,Z,Te,Ne);case h:return Z=Z.get(Te.key===null?j:Te.key)||null,ge(G,Z,Te,Ne);case T:var rt=Te._init;return bt(Z,G,j,rt(Te._payload),Ne)}if(K(Te)||P(Te))return Z=Z.get(j)||null,Re(G,Z,Te,Ne,null);tl(G,Te)}return null}function Oe(Z,G,j,Te){for(var Ne=null,rt=null,$e=G,vt=G=0,en=null;$e!==null&&vt<j.length;vt++){$e.index>vt?(en=$e,$e=null):en=$e.sibling;var xt=Ge(Z,$e,j[vt],Te);if(xt===null){$e===null&&($e=en);break}s&&$e&&xt.alternate===null&&o(Z,$e),G=b(xt,G,vt),rt===null?Ne=xt:rt.sibling=xt,rt=xt,$e=en}if(vt===j.length)return f(Z,$e),It&&Pr(Z,vt),Ne;if($e===null){for(;vt<j.length;vt++)$e=Ke(Z,j[vt],Te),$e!==null&&(G=b($e,G,vt),rt===null?Ne=$e:rt.sibling=$e,rt=$e);return It&&Pr(Z,vt),Ne}for($e=g(Z,$e);vt<j.length;vt++)en=bt($e,Z,vt,j[vt],Te),en!==null&&(s&&en.alternate!==null&&$e.delete(en.key===null?vt:en.key),G=b(en,G,vt),rt===null?Ne=en:rt.sibling=en,rt=en);return s&&$e.forEach(function(or){return o(Z,or)}),It&&Pr(Z,vt),Ne}function un(Z,G,j,Te){var Ne=P(j);if(typeof Ne!="function")throw Error(a(150));if(j=Ne.call(j),j==null)throw Error(a(151));for(var rt=Ne=null,$e=G,vt=G=0,en=null,xt=j.next();$e!==null&&!xt.done;vt++,xt=j.next()){$e.index>vt?(en=$e,$e=null):en=$e.sibling;var or=Ge(Z,$e,xt.value,Te);if(or===null){$e===null&&($e=en);break}s&&$e&&or.alternate===null&&o(Z,$e),G=b(or,G,vt),rt===null?Ne=or:rt.sibling=or,rt=or,$e=en}if(xt.done)return f(Z,$e),It&&Pr(Z,vt),Ne;if($e===null){for(;!xt.done;vt++,xt=j.next())xt=Ke(Z,xt.value,Te),xt!==null&&(G=b(xt,G,vt),rt===null?Ne=xt:rt.sibling=xt,rt=xt);return It&&Pr(Z,vt),Ne}for($e=g(Z,$e);!xt.done;vt++,xt=j.next())xt=bt($e,Z,vt,xt.value,Te),xt!==null&&(s&&xt.alternate!==null&&$e.delete(xt.key===null?vt:xt.key),G=b(xt,G,vt),rt===null?Ne=xt:rt.sibling=xt,rt=xt);return s&&$e.forEach(function(Wx){return o(Z,Wx)}),It&&Pr(Z,vt),Ne}function jn(Z,G,j,Te){if(typeof j=="object"&&j!==null&&j.type===d&&j.key===null&&(j=j.props.children),typeof j=="object"&&j!==null){switch(j.$$typeof){case u:e:{for(var Ne=j.key,rt=G;rt!==null;){if(rt.key===Ne){if(Ne=j.type,Ne===d){if(rt.tag===7){f(Z,rt.sibling),G=M(rt,j.props.children),G.return=Z,Z=G;break e}}else if(rt.elementType===Ne||typeof Ne=="object"&&Ne!==null&&Ne.$$typeof===T&&Bd(Ne)===rt.type){f(Z,rt.sibling),G=M(rt,j.props),G.ref=So(Z,rt,j),G.return=Z,Z=G;break e}f(Z,rt);break}else o(Z,rt);rt=rt.sibling}j.type===d?(G=Fr(j.props.children,Z.mode,Te,j.key),G.return=Z,Z=G):(Te=Il(j.type,j.key,j.props,null,Z.mode,Te),Te.ref=So(Z,G,j),Te.return=Z,Z=Te)}return z(Z);case h:e:{for(rt=j.key;G!==null;){if(G.key===rt)if(G.tag===4&&G.stateNode.containerInfo===j.containerInfo&&G.stateNode.implementation===j.implementation){f(Z,G.sibling),G=M(G,j.children||[]),G.return=Z,Z=G;break e}else{f(Z,G);break}else o(Z,G);G=G.sibling}G=sh(j,Z.mode,Te),G.return=Z,Z=G}return z(Z);case T:return rt=j._init,jn(Z,G,rt(j._payload),Te)}if(K(j))return Oe(Z,G,j,Te);if(P(j))return un(Z,G,j,Te);tl(Z,j)}return typeof j=="string"&&j!==""||typeof j=="number"?(j=""+j,G!==null&&G.tag===6?(f(Z,G.sibling),G=M(G,j),G.return=Z,Z=G):(f(Z,G),G=rh(j,Z.mode,Te),G.return=Z,Z=G),z(Z)):f(Z,G)}return jn}var bs=kd(!0),Vd=kd(!1),wo={},qn=Vn(wo),bo=Vn(wo),Ts=Vn(wo);function _i(s){if(s===wo)throw Error(a(174));return s}function Su(s,o){ft(Ts,o),ft(bo,s),ft(qn,wo),s=he(o),nt(qn),ft(qn,s)}function Es(){nt(qn),nt(bo),nt(Ts)}function Gd(s){var o=_i(Ts.current),f=_i(qn.current);o=k(f,s.type,o),f!==o&&(ft(bo,s),ft(qn,o))}function wu(s){bo.current===s&&(nt(qn),nt(bo))}var zt=Vn(0);function nl(s){for(var o=s;o!==null;){if(o.tag===13){var f=o.memoizedState;if(f!==null&&(f=f.dehydrated,f===null||Ba(f)||vo(f)))return o}else if(o.tag===19&&o.memoizedProps.revealOrder!==void 0){if((o.flags&128)!==0)return o}else if(o.child!==null){o.child.return=o,o=o.child;continue}if(o===s)break;for(;o.sibling===null;){if(o.return===null||o.return===s)return null;o=o.return}o.sibling.return=o.return,o=o.sibling}return null}var bu=[];function Tu(){for(var s=0;s<bu.length;s++){var o=bu[s];ye?o._workInProgressVersionPrimary=null:o._workInProgressVersionSecondary=null}bu.length=0}var il=c.ReactCurrentDispatcher,Yn=c.ReactCurrentBatchConfig,As=0,Ft=null,an=null,$t=null,rl=!1,To=!1,Eo=0,mx=0;function ln(){throw Error(a(321))}function Eu(s,o){if(o===null)return!1;for(var f=0;f<o.length&&f<s.length;f++)if(!gi(s[f],o[f]))return!1;return!0}function Au(s,o,f,g,M,b){if(As=b,Ft=o,o.memoizedState=null,o.updateQueue=null,o.lanes=0,il.current=s===null||s.memoizedState===null?_x:yx,s=f(g,M),To){b=0;do{if(To=!1,Eo=0,25<=b)throw Error(a(301));b+=1,$t=an=null,o.updateQueue=null,il.current=Mx,s=f(g,M)}while(To)}if(il.current=cl,o=an!==null&&an.next!==null,As=0,$t=an=Ft=null,rl=!1,o)throw Error(a(300));return s}function Cu(){var s=Eo!==0;return Eo=0,s}function Di(){var s={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return $t===null?Ft.memoizedState=$t=s:$t=$t.next=s,$t}function yi(){if(an===null){var s=Ft.alternate;s=s!==null?s.memoizedState:null}else s=an.next;var o=$t===null?Ft.memoizedState:$t.next;if(o!==null)$t=o,an=s;else{if(s===null)throw Error(a(310));an=s,s={memoizedState:an.memoizedState,baseState:an.baseState,baseQueue:an.baseQueue,queue:an.queue,next:null},$t===null?Ft.memoizedState=$t=s:$t=$t.next=s}return $t}function Lr(s,o){return typeof o=="function"?o(s):o}function sl(s){var o=yi(),f=o.queue;if(f===null)throw Error(a(311));f.lastRenderedReducer=s;var g=an,M=g.baseQueue,b=f.pending;if(b!==null){if(M!==null){var z=M.next;M.next=b.next,b.next=z}g.baseQueue=M=b,f.pending=null}if(M!==null){b=M.next,g=g.baseState;var V=z=null,ee=null,ge=b;do{var Re=ge.lane;if((As&Re)===Re)ee!==null&&(ee=ee.next={lane:0,action:ge.action,hasEagerState:ge.hasEagerState,eagerState:ge.eagerState,next:null}),g=ge.hasEagerState?ge.eagerState:s(g,ge.action);else{var Ke={lane:Re,action:ge.action,hasEagerState:ge.hasEagerState,eagerState:ge.eagerState,next:null};ee===null?(V=ee=Ke,z=g):ee=ee.next=Ke,Ft.lanes|=Re,Ps|=Re}ge=ge.next}while(ge!==null&&ge!==b);ee===null?z=g:ee.next=V,gi(g,o.memoizedState)||(Rn=!0),o.memoizedState=g,o.baseState=z,o.baseQueue=ee,f.lastRenderedState=g}if(s=f.interleaved,s!==null){M=s;do b=M.lane,Ft.lanes|=b,Ps|=b,M=M.next;while(M!==s)}else M===null&&(f.lanes=0);return[o.memoizedState,f.dispatch]}function ol(s){var o=yi(),f=o.queue;if(f===null)throw Error(a(311));f.lastRenderedReducer=s;var g=f.dispatch,M=f.pending,b=o.memoizedState;if(M!==null){f.pending=null;var z=M=M.next;do b=s(b,z.action),z=z.next;while(z!==M);gi(b,o.memoizedState)||(Rn=!0),o.memoizedState=b,o.baseQueue===null&&(o.baseState=b),f.lastRenderedState=b}return[b,g]}function Hd(){}function Wd(s,o){var f=Ft,g=yi(),M=o(),b=!gi(g.memoizedState,M);if(b&&(g.memoizedState=M,Rn=!0),g=g.queue,Co(Yd.bind(null,f,g,s),[s]),g.getSnapshot!==o||b||$t!==null&&$t.memoizedState.tag&1){if(f.flags|=2048,Ao(9,qd.bind(null,f,g,M,o),void 0,null),Wt===null)throw Error(a(349));(As&30)!==0||Xd(f,o,M)}return M}function Xd(s,o,f){s.flags|=16384,s={getSnapshot:o,value:f},o=Ft.updateQueue,o===null?(o={lastEffect:null,stores:null},Ft.updateQueue=o,o.stores=[s]):(f=o.stores,f===null?o.stores=[s]:f.push(s))}function qd(s,o,f,g){o.value=f,o.getSnapshot=g,Zd(o)&&Zn(s,1,-1)}function Yd(s,o,f){return f(function(){Zd(o)&&Zn(s,1,-1)})}function Zd(s){var o=s.getSnapshot;s=s.value;try{var f=o();return!gi(s,f)}catch{return!0}}function Pu(s){var o=Di();return typeof s=="function"&&(s=s()),o.memoizedState=o.baseState=s,s={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Lr,lastRenderedState:s},o.queue=s,s=s.dispatch=xx.bind(null,Ft,s),[o.memoizedState,s]}function Ao(s,o,f,g){return s={tag:s,create:o,destroy:f,deps:g,next:null},o=Ft.updateQueue,o===null?(o={lastEffect:null,stores:null},Ft.updateQueue=o,o.lastEffect=s.next=s):(f=o.lastEffect,f===null?o.lastEffect=s.next=s:(g=f.next,f.next=s,s.next=g,o.lastEffect=s)),s}function Jd(){return yi().memoizedState}function al(s,o,f,g){var M=Di();Ft.flags|=s,M.memoizedState=Ao(1|o,f,void 0,g===void 0?null:g)}function ll(s,o,f,g){var M=yi();g=g===void 0?null:g;var b=void 0;if(an!==null){var z=an.memoizedState;if(b=z.destroy,g!==null&&Eu(g,z.deps)){M.memoizedState=Ao(o,f,b,g);return}}Ft.flags|=s,M.memoizedState=Ao(1|o,f,b,g)}function Lu(s,o){return al(8390656,8,s,o)}function Co(s,o){return ll(2048,8,s,o)}function jd(s,o){return ll(4,2,s,o)}function Qd(s,o){return ll(4,4,s,o)}function Kd(s,o){if(typeof o=="function")return s=s(),o(s),function(){o(null)};if(o!=null)return s=s(),o.current=s,function(){o.current=null}}function $d(s,o,f){return f=f!=null?f.concat([s]):null,ll(4,4,Kd.bind(null,o,s),f)}function Ru(){}function ep(s,o){var f=yi();o=o===void 0?null:o;var g=f.memoizedState;return g!==null&&o!==null&&Eu(o,g[1])?g[0]:(f.memoizedState=[s,o],s)}function tp(s,o){var f=yi();o=o===void 0?null:o;var g=f.memoizedState;return g!==null&&o!==null&&Eu(o,g[1])?g[0]:(s=s(),f.memoizedState=[s,o],s)}function gx(s,o){var f=gt;gt=f!==0&&4>f?f:4,s(!0);var g=Yn.transition;Yn.transition={};try{s(!1),o()}finally{gt=f,Yn.transition=g}}function np(){return yi().memoizedState}function vx(s,o,f){var g=ir(s);f={lane:g,action:f,hasEagerState:!1,eagerState:null,next:null},ip(s)?rp(o,f):(sp(s,o,f),f=mn(),s=Zn(s,g,f),s!==null&&op(s,o,g))}function xx(s,o,f){var g=ir(s),M={lane:g,action:f,hasEagerState:!1,eagerState:null,next:null};if(ip(s))rp(o,M);else{sp(s,o,M);var b=s.alternate;if(s.lanes===0&&(b===null||b.lanes===0)&&(b=o.lastRenderedReducer,b!==null))try{var z=o.lastRenderedState,V=b(z,f);if(M.hasEagerState=!0,M.eagerState=V,gi(V,z))return}catch{}finally{}f=mn(),s=Zn(s,g,f),s!==null&&op(s,o,g)}}function ip(s){var o=s.alternate;return s===Ft||o!==null&&o===Ft}function rp(s,o){To=rl=!0;var f=s.pending;f===null?o.next=o:(o.next=f.next,f.next=o),s.pending=o}function sp(s,o,f){Wt!==null&&(s.mode&1)!==0&&(ot&2)===0?(s=o.interleaved,s===null?(f.next=f,xi===null?xi=[o]:xi.push(o)):(f.next=s.next,s.next=f),o.interleaved=f):(s=o.pending,s===null?f.next=f:(f.next=s.next,s.next=f),o.pending=f)}function op(s,o,f){if((f&4194240)!==0){var g=o.lanes;g&=s.pendingLanes,f|=g,o.lanes=f,su(s,f)}}var cl={readContext:Hn,useCallback:ln,useContext:ln,useEffect:ln,useImperativeHandle:ln,useInsertionEffect:ln,useLayoutEffect:ln,useMemo:ln,useReducer:ln,useRef:ln,useState:ln,useDebugValue:ln,useDeferredValue:ln,useTransition:ln,useMutableSource:ln,useSyncExternalStore:ln,useId:ln,unstable_isNewReconciler:!1},_x={readContext:Hn,useCallback:function(s,o){return Di().memoizedState=[s,o===void 0?null:o],s},useContext:Hn,useEffect:Lu,useImperativeHandle:function(s,o,f){return f=f!=null?f.concat([s]):null,al(4194308,4,Kd.bind(null,o,s),f)},useLayoutEffect:function(s,o){return al(4194308,4,s,o)},useInsertionEffect:function(s,o){return al(4,2,s,o)},useMemo:function(s,o){var f=Di();return o=o===void 0?null:o,s=s(),f.memoizedState=[s,o],s},useReducer:function(s,o,f){var g=Di();return o=f!==void 0?f(o):o,g.memoizedState=g.baseState=o,s={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:s,lastRenderedState:o},g.queue=s,s=s.dispatch=vx.bind(null,Ft,s),[g.memoizedState,s]},useRef:function(s){var o=Di();return s={current:s},o.memoizedState=s},useState:Pu,useDebugValue:Ru,useDeferredValue:function(s){var o=Pu(s),f=o[0],g=o[1];return Lu(function(){var M=Yn.transition;Yn.transition={};try{g(s)}finally{Yn.transition=M}},[s]),f},useTransition:function(){var s=Pu(!1),o=s[0];return s=gx.bind(null,s[1]),Di().memoizedState=s,[o,s]},useMutableSource:function(){},useSyncExternalStore:function(s,o,f){var g=Ft,M=Di();if(It){if(f===void 0)throw Error(a(407));f=f()}else{if(f=o(),Wt===null)throw Error(a(349));(As&30)!==0||Xd(g,o,f)}M.memoizedState=f;var b={value:f,getSnapshot:o};return M.queue=b,Lu(Yd.bind(null,g,b,s),[s]),g.flags|=2048,Ao(9,qd.bind(null,g,b,f,o),void 0,null),f},useId:function(){var s=Di(),o=Wt.identifierPrefix;if(It){var f=Ii,g=Ri;f=(g&~(1<<32-ri(g)-1)).toString(32)+f,o=":"+o+"R"+f,f=Eo++,0<f&&(o+="H"+f.toString(32)),o+=":"}else f=mx++,o=":"+o+"r"+f.toString(32)+":";return s.memoizedState=o},unstable_isNewReconciler:!1},yx={readContext:Hn,useCallback:ep,useContext:Hn,useEffect:Co,useImperativeHandle:$d,useInsertionEffect:jd,useLayoutEffect:Qd,useMemo:tp,useReducer:sl,useRef:Jd,useState:function(){return sl(Lr)},useDebugValue:Ru,useDeferredValue:function(s){var o=sl(Lr),f=o[0],g=o[1];return Co(function(){var M=Yn.transition;Yn.transition={};try{g(s)}finally{Yn.transition=M}},[s]),f},useTransition:function(){var s=sl(Lr)[0],o=yi().memoizedState;return[s,o]},useMutableSource:Hd,useSyncExternalStore:Wd,useId:np,unstable_isNewReconciler:!1},Mx={readContext:Hn,useCallback:ep,useContext:Hn,useEffect:Co,useImperativeHandle:$d,useInsertionEffect:jd,useLayoutEffect:Qd,useMemo:tp,useReducer:ol,useRef:Jd,useState:function(){return ol(Lr)},useDebugValue:Ru,useDeferredValue:function(s){var o=ol(Lr),f=o[0],g=o[1];return Co(function(){var M=Yn.transition;Yn.transition={};try{g(s)}finally{Yn.transition=M}},[s]),f},useTransition:function(){var s=ol(Lr)[0],o=yi().memoizedState;return[s,o]},useMutableSource:Hd,useSyncExternalStore:Wd,useId:np,unstable_isNewReconciler:!1};function Iu(s,o){try{var f="",g=o;do f+=px(g),g=g.return;while(g);var M=f}catch(b){M=`
Error generating stack: `+b.message+`
`+b.stack}return{value:s,source:o,stack:M}}function Du(s,o){try{console.error(o.value)}catch(f){setTimeout(function(){throw f})}}var Sx=typeof WeakMap=="function"?WeakMap:Map;function ap(s,o,f){f=Li(-1,f),f.tag=3,f.payload={element:null};var g=o.value;return f.callback=function(){Tl||(Tl=!0,Qu=g),Du(s,o)},f}function lp(s,o,f){f=Li(-1,f),f.tag=3;var g=s.type.getDerivedStateFromError;if(typeof g=="function"){var M=o.value;f.payload=function(){return g(M)},f.callback=function(){Du(s,o)}}var b=s.stateNode;return b!==null&&typeof b.componentDidCatch=="function"&&(f.callback=function(){Du(s,o),typeof g!="function"&&(tr===null?tr=new Set([this]):tr.add(this));var z=o.stack;this.componentDidCatch(o.value,{componentStack:z!==null?z:""})}),f}function cp(s,o,f){var g=s.pingCache;if(g===null){g=s.pingCache=new Sx;var M=new Set;g.set(o,M)}else M=g.get(o),M===void 0&&(M=new Set,g.set(o,M));M.has(f)||(M.add(f),s=Fx.bind(null,s,o,f),o.then(s,s))}function up(s){do{var o;if((o=s.tag===13)&&(o=s.memoizedState,o=o!==null?o.dehydrated!==null:!0),o)return s;s=s.return}while(s!==null);return null}function hp(s,o,f,g,M){return(s.mode&1)===0?(s===o?s.flags|=65536:(s.flags|=128,f.flags|=131072,f.flags&=-52805,f.tag===1&&(f.alternate===null?f.tag=17:(o=Li(-1,1),o.tag=2,er(f,o))),f.lanes|=1),s):(s.flags|=65536,s.lanes=M,s)}function Mi(s){s.flags|=4}function fp(s,o){if(s!==null&&s.child===o.child)return!0;if((o.flags&16)!==0)return!1;for(s=o.child;s!==null;){if((s.flags&12854)!==0||(s.subtreeFlags&12854)!==0)return!1;s=s.sibling}return!0}var Po,Lo,ul,hl;if(qe)Po=function(s,o){for(var f=o.child;f!==null;){if(f.tag===5||f.tag===6)ne(s,f.stateNode);else if(f.tag!==4&&f.child!==null){f.child.return=f,f=f.child;continue}if(f===o)break;for(;f.sibling===null;){if(f.return===null||f.return===o)return;f=f.return}f.sibling.return=f.return,f=f.sibling}},Lo=function(){},ul=function(s,o,f,g,M){if(s=s.memoizedProps,s!==g){var b=o.stateNode,z=_i(qn.current);f=we(b,f,s,g,M,z),(o.updateQueue=f)&&Mi(o)}},hl=function(s,o,f,g){f!==g&&Mi(o)};else if(ue){Po=function(s,o,f,g){for(var M=o.child;M!==null;){if(M.tag===5){var b=M.stateNode;f&&g&&(b=dn(b,M.type,M.memoizedProps,M)),ne(s,b)}else if(M.tag===6)b=M.stateNode,f&&g&&(b=Oa(b,M.memoizedProps,M)),ne(s,b);else if(M.tag!==4){if(M.tag===22&&M.memoizedState!==null)b=M.child,b!==null&&(b.return=M),Po(s,M,!0,!0);else if(M.child!==null){M.child.return=M,M=M.child;continue}}if(M===o)break;for(;M.sibling===null;){if(M.return===null||M.return===o)return;M=M.return}M.sibling.return=M.return,M=M.sibling}};var dp=function(s,o,f,g){for(var M=o.child;M!==null;){if(M.tag===5){var b=M.stateNode;f&&g&&(b=dn(b,M.type,M.memoizedProps,M)),ii(s,b)}else if(M.tag===6)b=M.stateNode,f&&g&&(b=Oa(b,M.memoizedProps,M)),ii(s,b);else if(M.tag!==4){if(M.tag===22&&M.memoizedState!==null)b=M.child,b!==null&&(b.return=M),dp(s,M,!0,!0);else if(M.child!==null){M.child.return=M,M=M.child;continue}}if(M===o)break;for(;M.sibling===null;){if(M.return===null||M.return===o)return;M=M.return}M.sibling.return=M.return,M=M.sibling}};Lo=function(s,o){var f=o.stateNode;if(!fp(s,o)){s=f.containerInfo;var g=Ct(s);dp(g,o,!1,!1),f.pendingChildren=g,Mi(o),Pt(s,g)}},ul=function(s,o,f,g,M){var b=s.stateNode,z=s.memoizedProps;if((s=fp(s,o))&&z===g)o.stateNode=b;else{var V=o.stateNode,ee=_i(qn.current),ge=null;z!==g&&(ge=we(V,f,z,g,M,ee)),s&&ge===null?o.stateNode=b:(b=Ht(b,ge,f,z,g,o,s,V),de(b,f,g,M,ee)&&Mi(o),o.stateNode=b,s?Mi(o):Po(b,o,!1,!1))}},hl=function(s,o,f,g){f!==g?(s=_i(Ts.current),f=_i(qn.current),o.stateNode=se(g,s,f,o),Mi(o)):o.stateNode=s.stateNode}}else Lo=function(){},ul=function(){},hl=function(){};function Ro(s,o){if(!It)switch(s.tailMode){case"hidden":o=s.tail;for(var f=null;o!==null;)o.alternate!==null&&(f=o),o=o.sibling;f===null?s.tail=null:f.sibling=null;break;case"collapsed":f=s.tail;for(var g=null;f!==null;)f.alternate!==null&&(g=f),f=f.sibling;g===null?o||s.tail===null?s.tail=null:s.tail.sibling=null:g.sibling=null}}function cn(s){var o=s.alternate!==null&&s.alternate.child===s.child,f=0,g=0;if(o)for(var M=s.child;M!==null;)f|=M.lanes|M.childLanes,g|=M.subtreeFlags&14680064,g|=M.flags&14680064,M.return=s,M=M.sibling;else for(M=s.child;M!==null;)f|=M.lanes|M.childLanes,g|=M.subtreeFlags,g|=M.flags,M.return=s,M=M.sibling;return s.subtreeFlags|=g,s.childLanes=f,o}function wx(s,o,f){var g=o.pendingProps;switch(xu(o),o.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return cn(o),null;case 1:return wn(o.type)&&ka(),cn(o),null;case 3:return g=o.stateNode,Es(),nt(Qt),nt(St),Tu(),g.pendingContext&&(g.context=g.pendingContext,g.pendingContext=null),(s===null||s.child===null)&&(Mo(o)?Mi(o):s===null||s.memoizedState.isDehydrated&&(o.flags&256)===0||(o.flags|=1024,oi!==null&&(eh(oi),oi=null))),Lo(s,o),cn(o),null;case 5:wu(o),f=_i(Ts.current);var M=o.type;if(s!==null&&o.stateNode!=null)ul(s,o,M,g,f),s.ref!==o.ref&&(o.flags|=512,o.flags|=2097152);else{if(!g){if(o.stateNode===null)throw Error(a(166));return cn(o),null}if(s=_i(qn.current),Mo(o)){if(!te)throw Error(a(175));s=ke(o.stateNode,o.type,o.memoizedProps,f,s,o,!yo),o.updateQueue=s,s!==null&&Mi(o)}else{var b=le(M,g,f,s,o);Po(b,o,!1,!1),o.stateNode=b,de(b,M,g,f,s)&&Mi(o)}o.ref!==null&&(o.flags|=512,o.flags|=2097152)}return cn(o),null;case 6:if(s&&o.stateNode!=null)hl(s,o,s.memoizedProps,g);else{if(typeof g!="string"&&o.stateNode===null)throw Error(a(166));if(s=_i(Ts.current),f=_i(qn.current),Mo(o)){if(!te)throw Error(a(176));if(s=o.stateNode,g=o.memoizedProps,(f=Je(s,g,o,!yo))&&(M=Pn,M!==null))switch(b=(M.mode&1)!==0,M.tag){case 3:Qi(M.stateNode.containerInfo,s,g,b);break;case 5:Ki(M.type,M.memoizedProps,M.stateNode,s,g,b)}f&&Mi(o)}else o.stateNode=se(g,s,f,o)}return cn(o),null;case 13:if(nt(zt),g=o.memoizedState,It&&Ln!==null&&(o.mode&1)!==0&&(o.flags&128)===0){for(s=Ln;s;)s=Y(s);return ws(),o.flags|=98560,o}if(g!==null&&g.dehydrated!==null){if(g=Mo(o),s===null){if(!g)throw Error(a(318));if(!te)throw Error(a(344));if(s=o.memoizedState,s=s!==null?s.dehydrated:null,!s)throw Error(a(317));it(s,o)}else ws(),(o.flags&128)===0&&(o.memoizedState=null),o.flags|=4;return cn(o),null}return oi!==null&&(eh(oi),oi=null),(o.flags&128)!==0?(o.lanes=f,o):(g=g!==null,f=!1,s===null?Mo(o):f=s.memoizedState!==null,g&&!f&&(o.child.flags|=8192,(o.mode&1)!==0&&(s===null||(zt.current&1)!==0?Jt===0&&(Jt=3):nh())),o.updateQueue!==null&&(o.flags|=4),cn(o),null);case 4:return Es(),Lo(s,o),s===null&&ze(o.stateNode.containerInfo),cn(o),null;case 10:return fu(o.type._context),cn(o),null;case 17:return wn(o.type)&&ka(),cn(o),null;case 19:if(nt(zt),M=o.memoizedState,M===null)return cn(o),null;if(g=(o.flags&128)!==0,b=M.rendering,b===null)if(g)Ro(M,!1);else{if(Jt!==0||s!==null&&(s.flags&128)!==0)for(s=o.child;s!==null;){if(b=nl(s),b!==null){for(o.flags|=128,Ro(M,!1),s=b.updateQueue,s!==null&&(o.updateQueue=s,o.flags|=4),o.subtreeFlags=0,s=f,g=o.child;g!==null;)f=g,M=s,f.flags&=14680066,b=f.alternate,b===null?(f.childLanes=0,f.lanes=M,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=b.childLanes,f.lanes=b.lanes,f.child=b.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=b.memoizedProps,f.memoizedState=b.memoizedState,f.updateQueue=b.updateQueue,f.type=b.type,M=b.dependencies,f.dependencies=M===null?null:{lanes:M.lanes,firstContext:M.firstContext}),g=g.sibling;return ft(zt,zt.current&1|2),o.child}s=s.sibling}M.tail!==null&&Kt()>ju&&(o.flags|=128,g=!0,Ro(M,!1),o.lanes=4194304)}else{if(!g)if(s=nl(b),s!==null){if(o.flags|=128,g=!0,s=s.updateQueue,s!==null&&(o.updateQueue=s,o.flags|=4),Ro(M,!0),M.tail===null&&M.tailMode==="hidden"&&!b.alternate&&!It)return cn(o),null}else 2*Kt()-M.renderingStartTime>ju&&f!==1073741824&&(o.flags|=128,g=!0,Ro(M,!1),o.lanes=4194304);M.isBackwards?(b.sibling=o.child,o.child=b):(s=M.last,s!==null?s.sibling=b:o.child=b,M.last=b)}return M.tail!==null?(o=M.tail,M.rendering=o,M.tail=o.sibling,M.renderingStartTime=Kt(),o.sibling=null,s=zt.current,ft(zt,g?s&1|2:s&1),o):(cn(o),null);case 22:case 23:return th(),g=o.memoizedState!==null,s!==null&&s.memoizedState!==null!==g&&(o.flags|=8192),g&&(o.mode&1)!==0?(In&1073741824)!==0&&(cn(o),qe&&o.subtreeFlags&6&&(o.flags|=8192)):cn(o),null;case 24:return null;case 25:return null}throw Error(a(156,o.tag))}var bx=c.ReactCurrentOwner,Rn=!1;function pn(s,o,f,g){o.child=s===null?Vd(o,null,f,g):bs(o,s.child,f,g)}function pp(s,o,f,g,M){f=f.render;var b=o.ref;return ys(o,M),g=Au(s,o,f,g,b,M),f=Cu(),s!==null&&!Rn?(o.updateQueue=s.updateQueue,o.flags&=-2053,s.lanes&=~M,zi(s,o,M)):(It&&f&&vu(o),o.flags|=1,pn(s,o,g,M),o.child)}function mp(s,o,f,g,M){if(s===null){var b=f.type;return typeof b=="function"&&!ih(b)&&b.defaultProps===void 0&&f.compare===null&&f.defaultProps===void 0?(o.tag=15,o.type=b,gp(s,o,b,g,M)):(s=Il(f.type,null,g,o,o.mode,M),s.ref=o.ref,s.return=o,o.child=s)}if(b=s.child,(s.lanes&M)===0){var z=b.memoizedProps;if(f=f.compare,f=f!==null?f:Ya,f(z,g)&&s.ref===o.ref)return zi(s,o,M)}return o.flags|=1,s=sr(b,g),s.ref=o.ref,s.return=o,o.child=s}function gp(s,o,f,g,M){if(s!==null&&Ya(s.memoizedProps,g)&&s.ref===o.ref)if(Rn=!1,(s.lanes&M)!==0)(s.flags&131072)!==0&&(Rn=!0);else return o.lanes=s.lanes,zi(s,o,M);return zu(s,o,f,g,M)}function vp(s,o,f){var g=o.pendingProps,M=g.children,b=s!==null?s.memoizedState:null;if(g.mode==="hidden")if((o.mode&1)===0)o.memoizedState={baseLanes:0,cachePool:null},ft(Cs,In),In|=f;else if((f&1073741824)!==0)o.memoizedState={baseLanes:0,cachePool:null},g=b!==null?b.baseLanes:f,ft(Cs,In),In|=g;else return s=b!==null?b.baseLanes|f:f,o.lanes=o.childLanes=1073741824,o.memoizedState={baseLanes:s,cachePool:null},o.updateQueue=null,ft(Cs,In),In|=s,null;else b!==null?(g=b.baseLanes|f,o.memoizedState=null):g=f,ft(Cs,In),In|=g;return pn(s,o,M,f),o.child}function xp(s,o){var f=o.ref;(s===null&&f!==null||s!==null&&s.ref!==f)&&(o.flags|=512,o.flags|=2097152)}function zu(s,o,f,g,M){var b=wn(f)?Ai:St.current;return b=Ci(o,b),ys(o,M),f=Au(s,o,f,g,b,M),g=Cu(),s!==null&&!Rn?(o.updateQueue=s.updateQueue,o.flags&=-2053,s.lanes&=~M,zi(s,o,M)):(It&&g&&vu(o),o.flags|=1,pn(s,o,f,M),o.child)}function _p(s,o,f,g,M){if(wn(f)){var b=!0;Va(o)}else b=!1;if(ys(o,M),o.stateNode===null)s!==null&&(s.alternate=null,o.alternate=null,o.flags|=2),Dd(o,f,g),gu(o,f,g,M),g=!0;else if(s===null){var z=o.stateNode,V=o.memoizedProps;z.props=V;var ee=z.context,ge=f.contextType;typeof ge=="object"&&ge!==null?ge=Hn(ge):(ge=wn(f)?Ai:St.current,ge=Ci(o,ge));var Re=f.getDerivedStateFromProps,Ke=typeof Re=="function"||typeof z.getSnapshotBeforeUpdate=="function";Ke||typeof z.UNSAFE_componentWillReceiveProps!="function"&&typeof z.componentWillReceiveProps!="function"||(V!==g||ee!==ge)&&zd(o,z,g,ge),$i=!1;var Ge=o.memoizedState;z.state=Ge,Qa(o,g,z,M),ee=o.memoizedState,V!==g||Ge!==ee||Qt.current||$i?(typeof Re=="function"&&(mu(o,f,Re,g),ee=o.memoizedState),(V=$i||Id(o,f,V,g,Ge,ee,ge))?(Ke||typeof z.UNSAFE_componentWillMount!="function"&&typeof z.componentWillMount!="function"||(typeof z.componentWillMount=="function"&&z.componentWillMount(),typeof z.UNSAFE_componentWillMount=="function"&&z.UNSAFE_componentWillMount()),typeof z.componentDidMount=="function"&&(o.flags|=4194308)):(typeof z.componentDidMount=="function"&&(o.flags|=4194308),o.memoizedProps=g,o.memoizedState=ee),z.props=g,z.state=ee,z.context=ge,g=V):(typeof z.componentDidMount=="function"&&(o.flags|=4194308),g=!1)}else{z=o.stateNode,Cd(s,o),V=o.memoizedProps,ge=o.type===o.elementType?V:si(o.type,V),z.props=ge,Ke=o.pendingProps,Ge=z.context,ee=f.contextType,typeof ee=="object"&&ee!==null?ee=Hn(ee):(ee=wn(f)?Ai:St.current,ee=Ci(o,ee));var bt=f.getDerivedStateFromProps;(Re=typeof bt=="function"||typeof z.getSnapshotBeforeUpdate=="function")||typeof z.UNSAFE_componentWillReceiveProps!="function"&&typeof z.componentWillReceiveProps!="function"||(V!==Ke||Ge!==ee)&&zd(o,z,g,ee),$i=!1,Ge=o.memoizedState,z.state=Ge,Qa(o,g,z,M);var Oe=o.memoizedState;V!==Ke||Ge!==Oe||Qt.current||$i?(typeof bt=="function"&&(mu(o,f,bt,g),Oe=o.memoizedState),(ge=$i||Id(o,f,ge,g,Ge,Oe,ee)||!1)?(Re||typeof z.UNSAFE_componentWillUpdate!="function"&&typeof z.componentWillUpdate!="function"||(typeof z.componentWillUpdate=="function"&&z.componentWillUpdate(g,Oe,ee),typeof z.UNSAFE_componentWillUpdate=="function"&&z.UNSAFE_componentWillUpdate(g,Oe,ee)),typeof z.componentDidUpdate=="function"&&(o.flags|=4),typeof z.getSnapshotBeforeUpdate=="function"&&(o.flags|=1024)):(typeof z.componentDidUpdate!="function"||V===s.memoizedProps&&Ge===s.memoizedState||(o.flags|=4),typeof z.getSnapshotBeforeUpdate!="function"||V===s.memoizedProps&&Ge===s.memoizedState||(o.flags|=1024),o.memoizedProps=g,o.memoizedState=Oe),z.props=g,z.state=Oe,z.context=ee,g=ge):(typeof z.componentDidUpdate!="function"||V===s.memoizedProps&&Ge===s.memoizedState||(o.flags|=4),typeof z.getSnapshotBeforeUpdate!="function"||V===s.memoizedProps&&Ge===s.memoizedState||(o.flags|=1024),g=!1)}return Nu(s,o,f,g,b,M)}function Nu(s,o,f,g,M,b){xp(s,o);var z=(o.flags&128)!==0;if(!g&&!z)return M&&wd(o,f,!1),zi(s,o,b);g=o.stateNode,bx.current=o;var V=z&&typeof f.getDerivedStateFromError!="function"?null:g.render();return o.flags|=1,s!==null&&z?(o.child=bs(o,s.child,null,b),o.child=bs(o,null,V,b)):pn(s,o,V,b),o.memoizedState=g.state,M&&wd(o,f,!0),o.child}function yp(s){var o=s.stateNode;o.pendingContext?Md(s,o.pendingContext,o.pendingContext!==o.context):o.context&&Md(s,o.context,!1),Su(s,o.containerInfo)}function Mp(s,o,f,g,M){return ws(),Mu(M),o.flags|=256,pn(s,o,f,g),o.child}var fl={dehydrated:null,treeContext:null,retryLane:0};function dl(s){return{baseLanes:s,cachePool:null}}function Sp(s,o,f){var g=o.pendingProps,M=zt.current,b=!1,z=(o.flags&128)!==0,V;if((V=z)||(V=s!==null&&s.memoizedState===null?!1:(M&2)!==0),V?(b=!0,o.flags&=-129):(s===null||s.memoizedState!==null)&&(M|=1),ft(zt,M&1),s===null)return yu(o),s=o.memoizedState,s!==null&&(s=s.dehydrated,s!==null)?((o.mode&1)===0?o.lanes=1:vo(s)?o.lanes=8:o.lanes=1073741824,null):(M=g.children,s=g.fallback,b?(g=o.mode,b=o.child,M={mode:"hidden",children:M},(g&1)===0&&b!==null?(b.childLanes=0,b.pendingProps=M):b=Dl(M,g,0,null),s=Fr(s,g,f,null),b.return=o,s.return=o,b.sibling=s,o.child=b,o.child.memoizedState=dl(f),o.memoizedState=fl,s):Fu(o,M));if(M=s.memoizedState,M!==null){if(V=M.dehydrated,V!==null){if(z)return o.flags&256?(o.flags&=-257,pl(s,o,f,Error(a(422)))):o.memoizedState!==null?(o.child=s.child,o.flags|=128,null):(b=g.fallback,M=o.mode,g=Dl({mode:"visible",children:g.children},M,0,null),b=Fr(b,M,f,null),b.flags|=2,g.return=o,b.return=o,g.sibling=b,o.child=g,(o.mode&1)!==0&&bs(o,s.child,null,f),o.child.memoizedState=dl(f),o.memoizedState=fl,b);if((o.mode&1)===0)o=pl(s,o,f,null);else if(vo(V))o=pl(s,o,f,Error(a(419)));else if(g=(f&s.childLanes)!==0,Rn||g){if(g=Wt,g!==null){switch(f&-f){case 4:b=2;break;case 16:b=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:b=32;break;case 536870912:b=268435456;break;default:b=0}g=(b&(g.suspendedLanes|f))!==0?0:b,g!==0&&g!==M.retryLane&&(M.retryLane=g,Zn(s,g,-1))}nh(),o=pl(s,o,f,Error(a(421)))}else Ba(V)?(o.flags|=128,o.child=s.child,o=Ox.bind(null,s),D(V,o),o=null):(f=M.treeContext,te&&(Ln=ce(V),Pn=o,It=!0,oi=null,yo=!1,f!==null&&(Wn[Xn++]=Ri,Wn[Xn++]=Ii,Wn[Xn++]=Cr,Ri=f.id,Ii=f.overflow,Cr=o)),o=Fu(o,o.pendingProps.children),o.flags|=4096);return o}return b?(g=bp(s,o,g.children,g.fallback,f),b=o.child,M=s.child.memoizedState,b.memoizedState=M===null?dl(f):{baseLanes:M.baseLanes|f,cachePool:null},b.childLanes=s.childLanes&~f,o.memoizedState=fl,g):(f=wp(s,o,g.children,f),o.memoizedState=null,f)}return b?(g=bp(s,o,g.children,g.fallback,f),b=o.child,M=s.child.memoizedState,b.memoizedState=M===null?dl(f):{baseLanes:M.baseLanes|f,cachePool:null},b.childLanes=s.childLanes&~f,o.memoizedState=fl,g):(f=wp(s,o,g.children,f),o.memoizedState=null,f)}function Fu(s,o){return o=Dl({mode:"visible",children:o},s.mode,0,null),o.return=s,s.child=o}function wp(s,o,f,g){var M=s.child;return s=M.sibling,f=sr(M,{mode:"visible",children:f}),(o.mode&1)===0&&(f.lanes=g),f.return=o,f.sibling=null,s!==null&&(g=o.deletions,g===null?(o.deletions=[s],o.flags|=16):g.push(s)),o.child=f}function bp(s,o,f,g,M){var b=o.mode;s=s.child;var z=s.sibling,V={mode:"hidden",children:f};return(b&1)===0&&o.child!==s?(f=o.child,f.childLanes=0,f.pendingProps=V,o.deletions=null):(f=sr(s,V),f.subtreeFlags=s.subtreeFlags&14680064),z!==null?g=sr(z,g):(g=Fr(g,b,M,null),g.flags|=2),g.return=o,f.return=o,f.sibling=g,o.child=f,g}function pl(s,o,f,g){return g!==null&&Mu(g),bs(o,s.child,null,f),s=Fu(o,o.pendingProps.children),s.flags|=2,o.memoizedState=null,s}function Tp(s,o,f){s.lanes|=o;var g=s.alternate;g!==null&&(g.lanes|=o),du(s.return,o,f)}function Ou(s,o,f,g,M){var b=s.memoizedState;b===null?s.memoizedState={isBackwards:o,rendering:null,renderingStartTime:0,last:g,tail:f,tailMode:M}:(b.isBackwards=o,b.rendering=null,b.renderingStartTime=0,b.last=g,b.tail=f,b.tailMode=M)}function Ep(s,o,f){var g=o.pendingProps,M=g.revealOrder,b=g.tail;if(pn(s,o,g.children,f),g=zt.current,(g&2)!==0)g=g&1|2,o.flags|=128;else{if(s!==null&&(s.flags&128)!==0)e:for(s=o.child;s!==null;){if(s.tag===13)s.memoizedState!==null&&Tp(s,f,o);else if(s.tag===19)Tp(s,f,o);else if(s.child!==null){s.child.return=s,s=s.child;continue}if(s===o)break e;for(;s.sibling===null;){if(s.return===null||s.return===o)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}g&=1}if(ft(zt,g),(o.mode&1)===0)o.memoizedState=null;else switch(M){case"forwards":for(f=o.child,M=null;f!==null;)s=f.alternate,s!==null&&nl(s)===null&&(M=f),f=f.sibling;f=M,f===null?(M=o.child,o.child=null):(M=f.sibling,f.sibling=null),Ou(o,!1,M,f,b);break;case"backwards":for(f=null,M=o.child,o.child=null;M!==null;){if(s=M.alternate,s!==null&&nl(s)===null){o.child=M;break}s=M.sibling,M.sibling=f,f=M,M=s}Ou(o,!0,f,null,b);break;case"together":Ou(o,!1,null,null,void 0);break;default:o.memoizedState=null}return o.child}function zi(s,o,f){if(s!==null&&(o.dependencies=s.dependencies),Ps|=o.lanes,(f&o.childLanes)===0)return null;if(s!==null&&o.child!==s.child)throw Error(a(153));if(o.child!==null){for(s=o.child,f=sr(s,s.pendingProps),o.child=f,f.return=o;s.sibling!==null;)s=s.sibling,f=f.sibling=sr(s,s.pendingProps),f.return=o;f.sibling=null}return o.child}function Tx(s,o,f){switch(o.tag){case 3:yp(o),ws();break;case 5:Gd(o);break;case 1:wn(o.type)&&Va(o);break;case 4:Su(o,o.stateNode.containerInfo);break;case 10:Ad(o,o.type._context,o.memoizedProps.value);break;case 13:var g=o.memoizedState;if(g!==null)return g.dehydrated!==null?(ft(zt,zt.current&1),o.flags|=128,null):(f&o.child.childLanes)!==0?Sp(s,o,f):(ft(zt,zt.current&1),s=zi(s,o,f),s!==null?s.sibling:null);ft(zt,zt.current&1);break;case 19:if(g=(f&o.childLanes)!==0,(s.flags&128)!==0){if(g)return Ep(s,o,f);o.flags|=128}var M=o.memoizedState;if(M!==null&&(M.rendering=null,M.tail=null,M.lastEffect=null),ft(zt,zt.current),g)break;return null;case 22:case 23:return o.lanes=0,vp(s,o,f)}return zi(s,o,f)}function Ex(s,o){switch(xu(o),o.tag){case 1:return wn(o.type)&&ka(),s=o.flags,s&65536?(o.flags=s&-65537|128,o):null;case 3:return Es(),nt(Qt),nt(St),Tu(),s=o.flags,(s&65536)!==0&&(s&128)===0?(o.flags=s&-65537|128,o):null;case 5:return wu(o),null;case 13:if(nt(zt),s=o.memoizedState,s!==null&&s.dehydrated!==null){if(o.alternate===null)throw Error(a(340));ws()}return s=o.flags,s&65536?(o.flags=s&-65537|128,o):null;case 19:return nt(zt),null;case 4:return Es(),null;case 10:return fu(o.type._context),null;case 22:case 23:return th(),null;case 24:return null;default:return null}}var ml=!1,Rr=!1,Ax=typeof WeakSet=="function"?WeakSet:Set,Se=null;function gl(s,o){var f=s.ref;if(f!==null)if(typeof f=="function")try{f(null)}catch(g){En(s,o,g)}else f.current=null}function Uu(s,o,f){try{f()}catch(g){En(s,o,g)}}var Ap=!1;function Cx(s,o){for(U(s.containerInfo),Se=o;Se!==null;)if(s=Se,o=s.child,(s.subtreeFlags&1028)!==0&&o!==null)o.return=s,Se=o;else for(;Se!==null;){s=Se;try{var f=s.alternate;if((s.flags&1024)!==0)switch(s.tag){case 0:case 11:case 15:break;case 1:if(f!==null){var g=f.memoizedProps,M=f.memoizedState,b=s.stateNode,z=b.getSnapshotBeforeUpdate(s.elementType===s.type?g:si(s.type,g),M);b.__reactInternalSnapshotBeforeUpdate=z}break;case 3:qe&&ht(s.stateNode.containerInfo);break;case 5:case 6:case 4:case 17:break;default:throw Error(a(163))}}catch(V){En(s,s.return,V)}if(o=s.sibling,o!==null){o.return=s.return,Se=o;break}Se=s.return}return f=Ap,Ap=!1,f}function Ir(s,o,f){var g=o.updateQueue;if(g=g!==null?g.lastEffect:null,g!==null){var M=g=g.next;do{if((M.tag&s)===s){var b=M.destroy;M.destroy=void 0,b!==void 0&&Uu(o,f,b)}M=M.next}while(M!==g)}}function Io(s,o){if(o=o.updateQueue,o=o!==null?o.lastEffect:null,o!==null){var f=o=o.next;do{if((f.tag&s)===s){var g=f.create;f.destroy=g()}f=f.next}while(f!==o)}}function Bu(s){var o=s.ref;if(o!==null){var f=s.stateNode;switch(s.tag){case 5:s=ie(f);break;default:s=f}typeof o=="function"?o(s):o.current=s}}function Cp(s,o,f){if(mi&&typeof mi.onCommitFiberUnmount=="function")try{mi.onCommitFiberUnmount(Xa,o)}catch{}switch(o.tag){case 0:case 11:case 14:case 15:if(s=o.updateQueue,s!==null&&(s=s.lastEffect,s!==null)){var g=s=s.next;do{var M=g,b=M.destroy;M=M.tag,b!==void 0&&((M&2)!==0||(M&4)!==0)&&Uu(o,f,b),g=g.next}while(g!==s)}break;case 1:if(gl(o,f),s=o.stateNode,typeof s.componentWillUnmount=="function")try{s.props=o.memoizedProps,s.state=o.memoizedState,s.componentWillUnmount()}catch(z){En(o,f,z)}break;case 5:gl(o,f);break;case 4:qe?zp(s,o,f):ue&&ue&&(o=o.stateNode.containerInfo,f=Ct(o),Un(o,f))}}function Pp(s,o,f){for(var g=o;;)if(Cp(s,g,f),g.child===null||qe&&g.tag===4){if(g===o)break;for(;g.sibling===null;){if(g.return===null||g.return===o)return;g=g.return}g.sibling.return=g.return,g=g.sibling}else g.child.return=g,g=g.child}function Lp(s){var o=s.alternate;o!==null&&(s.alternate=null,Lp(o)),s.child=null,s.deletions=null,s.sibling=null,s.tag===5&&(o=s.stateNode,o!==null&&Qe(o)),s.stateNode=null,s.return=null,s.dependencies=null,s.memoizedProps=null,s.memoizedState=null,s.pendingProps=null,s.stateNode=null,s.updateQueue=null}function Rp(s){return s.tag===5||s.tag===3||s.tag===4}function Ip(s){e:for(;;){for(;s.sibling===null;){if(s.return===null||Rp(s.return))return null;s=s.return}for(s.sibling.return=s.return,s=s.sibling;s.tag!==5&&s.tag!==6&&s.tag!==18;){if(s.flags&2||s.child===null||s.tag===4)continue e;s.child.return=s,s=s.child}if(!(s.flags&2))return s.stateNode}}function Dp(s){if(qe){e:{for(var o=s.return;o!==null;){if(Rp(o))break e;o=o.return}throw Error(a(160))}var f=o;switch(f.tag){case 5:o=f.stateNode,f.flags&32&&(W(o),f.flags&=-33),f=Ip(s),Vu(s,f,o);break;case 3:case 4:o=f.stateNode.containerInfo,f=Ip(s),ku(s,f,o);break;default:throw Error(a(161))}}}function ku(s,o,f){var g=s.tag;if(g===5||g===6)s=s.stateNode,o?tt(f,s,o):$(f,s);else if(g!==4&&(s=s.child,s!==null))for(ku(s,o,f),s=s.sibling;s!==null;)ku(s,o,f),s=s.sibling}function Vu(s,o,f){var g=s.tag;if(g===5||g===6)s=s.stateNode,o?Ie(f,s,o):Ze(f,s);else if(g!==4&&(s=s.child,s!==null))for(Vu(s,o,f),s=s.sibling;s!==null;)Vu(s,o,f),s=s.sibling}function zp(s,o,f){for(var g=o,M=!1,b,z;;){if(!M){M=g.return;e:for(;;){if(M===null)throw Error(a(160));switch(b=M.stateNode,M.tag){case 5:z=!1;break e;case 3:b=b.containerInfo,z=!0;break e;case 4:b=b.containerInfo,z=!0;break e}M=M.return}M=!0}if(g.tag===5||g.tag===6)Pp(s,g,f),z?Dt(b,g.stateNode):pt(b,g.stateNode);else if(g.tag===18)z?Lt(b,g.stateNode):ut(b,g.stateNode);else if(g.tag===4){if(g.child!==null){b=g.stateNode.containerInfo,z=!0,g.child.return=g,g=g.child;continue}}else if(Cp(s,g,f),g.child!==null){g.child.return=g,g=g.child;continue}if(g===o)break;for(;g.sibling===null;){if(g.return===null||g.return===o)return;g=g.return,g.tag===4&&(M=!1)}g.sibling.return=g.return,g=g.sibling}}function Gu(s,o){if(qe){switch(o.tag){case 0:case 11:case 14:case 15:Ir(3,o,o.return),Io(3,o),Ir(5,o,o.return);return;case 1:return;case 5:var f=o.stateNode;if(f!=null){var g=o.memoizedProps;s=s!==null?s.memoizedProps:g;var M=o.type,b=o.updateQueue;o.updateQueue=null,b!==null&&Ue(f,b,M,s,g,o)}return;case 6:if(o.stateNode===null)throw Error(a(162));f=o.memoizedProps,Fe(o.stateNode,s!==null?s.memoizedProps:f,f);return;case 3:te&&s!==null&&s.memoizedState.isDehydrated&&mt(o.stateNode.containerInfo);return;case 12:return;case 13:vl(o);return;case 19:vl(o);return;case 17:return}throw Error(a(163))}switch(o.tag){case 0:case 11:case 14:case 15:Ir(3,o,o.return),Io(3,o),Ir(5,o,o.return);return;case 12:return;case 13:vl(o);return;case 19:vl(o);return;case 3:te&&s!==null&&s.memoizedState.isDehydrated&&mt(o.stateNode.containerInfo);break;case 22:case 23:return}e:if(ue){switch(o.tag){case 1:case 5:case 6:break e;case 3:case 4:o=o.stateNode,Un(o.containerInfo,o.pendingChildren);break e}throw Error(a(163))}}function vl(s){var o=s.updateQueue;if(o!==null){s.updateQueue=null;var f=s.stateNode;f===null&&(f=s.stateNode=new Ax),o.forEach(function(g){var M=Ux.bind(null,s,g);f.has(g)||(f.add(g),g.then(M,M))})}}function Px(s,o){for(Se=o;Se!==null;){o=Se;var f=o.deletions;if(f!==null)for(var g=0;g<f.length;g++){var M=f[g];try{var b=s;qe?zp(b,M,o):Pp(b,M,o);var z=M.alternate;z!==null&&(z.return=null),M.return=null}catch(Ne){En(M,o,Ne)}}if(f=o.child,(o.subtreeFlags&12854)!==0&&f!==null)f.return=o,Se=f;else for(;Se!==null;){o=Se;try{var V=o.flags;if(V&32&&qe&&W(o.stateNode),V&512){var ee=o.alternate;if(ee!==null){var ge=ee.ref;ge!==null&&(typeof ge=="function"?ge(null):ge.current=null)}}if(V&8192)switch(o.tag){case 13:if(o.memoizedState!==null){var Re=o.alternate;(Re===null||Re.memoizedState===null)&&(Ju=Kt())}break;case 22:var Ke=o.memoizedState!==null,Ge=o.alternate,bt=Ge!==null&&Ge.memoizedState!==null;if(f=o,qe){e:if(g=f,M=Ke,b=null,qe)for(var Oe=g;;){if(Oe.tag===5){if(b===null){b=Oe;var un=Oe.stateNode;M?Ce(un):Ae(Oe.stateNode,Oe.memoizedProps)}}else if(Oe.tag===6){if(b===null){var jn=Oe.stateNode;M?re(jn):Ee(jn,Oe.memoizedProps)}}else if((Oe.tag!==22&&Oe.tag!==23||Oe.memoizedState===null||Oe===g)&&Oe.child!==null){Oe.child.return=Oe,Oe=Oe.child;continue}if(Oe===g)break;for(;Oe.sibling===null;){if(Oe.return===null||Oe.return===g)break e;b===Oe&&(b=null),Oe=Oe.return}b===Oe&&(b=null),Oe.sibling.return=Oe.return,Oe=Oe.sibling}}if(Ke&&!bt&&(f.mode&1)!==0){Se=f;for(var Z=f.child;Z!==null;){for(f=Se=Z;Se!==null;){g=Se;var G=g.child;switch(g.tag){case 0:case 11:case 14:case 15:Ir(4,g,g.return);break;case 1:gl(g,g.return);var j=g.stateNode;if(typeof j.componentWillUnmount=="function"){var Te=g.return;try{j.props=g.memoizedProps,j.state=g.memoizedState,j.componentWillUnmount()}catch(Ne){En(g,Te,Ne)}}break;case 5:gl(g,g.return);break;case 22:if(g.memoizedState!==null){Op(f);continue}}G!==null?(G.return=g,Se=G):Op(f)}Z=Z.sibling}}}switch(V&4102){case 2:Dp(o),o.flags&=-3;break;case 6:Dp(o),o.flags&=-3,Gu(o.alternate,o);break;case 4096:o.flags&=-4097;break;case 4100:o.flags&=-4097,Gu(o.alternate,o);break;case 4:Gu(o.alternate,o)}}catch(Ne){En(o,o.return,Ne)}if(f=o.sibling,f!==null){f.return=o.return,Se=f;break}Se=o.return}}}function Lx(s,o,f){Se=s,Np(s)}function Np(s,o,f){for(var g=(s.mode&1)!==0;Se!==null;){var M=Se,b=M.child;if(M.tag===22&&g){var z=M.memoizedState!==null||ml;if(!z){var V=M.alternate,ee=V!==null&&V.memoizedState!==null||Rr;V=ml;var ge=Rr;if(ml=z,(Rr=ee)&&!ge)for(Se=M;Se!==null;)z=Se,ee=z.child,z.tag===22&&z.memoizedState!==null?Up(M):ee!==null?(ee.return=z,Se=ee):Up(M);for(;b!==null;)Se=b,Np(b),b=b.sibling;Se=M,ml=V,Rr=ge}Fp(s)}else(M.subtreeFlags&8772)!==0&&b!==null?(b.return=M,Se=b):Fp(s)}}function Fp(s){for(;Se!==null;){var o=Se;if((o.flags&8772)!==0){var f=o.alternate;try{if((o.flags&8772)!==0)switch(o.tag){case 0:case 11:case 15:Rr||Io(5,o);break;case 1:var g=o.stateNode;if(o.flags&4&&!Rr)if(f===null)g.componentDidMount();else{var M=o.elementType===o.type?f.memoizedProps:si(o.type,f.memoizedProps);g.componentDidUpdate(M,f.memoizedState,g.__reactInternalSnapshotBeforeUpdate)}var b=o.updateQueue;b!==null&&Ld(o,b,g);break;case 3:var z=o.updateQueue;if(z!==null){if(f=null,o.child!==null)switch(o.child.tag){case 5:f=ie(o.child.stateNode);break;case 1:f=o.child.stateNode}Ld(o,z,f)}break;case 5:var V=o.stateNode;f===null&&o.flags&4&&Pe(V,o.type,o.memoizedProps,o);break;case 6:break;case 4:break;case 12:break;case 13:if(te&&o.memoizedState===null){var ee=o.alternate;if(ee!==null){var ge=ee.memoizedState;if(ge!==null){var Re=ge.dehydrated;Re!==null&&ct(Re)}}}break;case 19:case 17:case 21:case 22:case 23:break;default:throw Error(a(163))}Rr||o.flags&512&&Bu(o)}catch(Ke){En(o,o.return,Ke)}}if(o===s){Se=null;break}if(f=o.sibling,f!==null){f.return=o.return,Se=f;break}Se=o.return}}function Op(s){for(;Se!==null;){var o=Se;if(o===s){Se=null;break}var f=o.sibling;if(f!==null){f.return=o.return,Se=f;break}Se=o.return}}function Up(s){for(;Se!==null;){var o=Se;try{switch(o.tag){case 0:case 11:case 15:var f=o.return;try{Io(4,o)}catch(ee){En(o,f,ee)}break;case 1:var g=o.stateNode;if(typeof g.componentDidMount=="function"){var M=o.return;try{g.componentDidMount()}catch(ee){En(o,M,ee)}}var b=o.return;try{Bu(o)}catch(ee){En(o,b,ee)}break;case 5:var z=o.return;try{Bu(o)}catch(ee){En(o,z,ee)}}}catch(ee){En(o,o.return,ee)}if(o===s){Se=null;break}var V=o.sibling;if(V!==null){V.return=o.return,Se=V;break}Se=o.return}}var xl=0,_l=1,yl=2,Ml=3,Sl=4;if(typeof Symbol=="function"&&Symbol.for){var Do=Symbol.for;xl=Do("selector.component"),_l=Do("selector.has_pseudo_class"),yl=Do("selector.role"),Ml=Do("selector.test_id"),Sl=Do("selector.text")}function Hu(s){var o=ve(s);if(o!=null){if(typeof o.memoizedProps["data-testname"]!="string")throw Error(a(364));return o}if(s=Mt(s),s===null)throw Error(a(362));return s.stateNode.current}function Wu(s,o){switch(o.$$typeof){case xl:if(s.type===o.value)return!0;break;case _l:e:{o=o.value,s=[s,0];for(var f=0;f<s.length;){var g=s[f++],M=s[f++],b=o[M];if(g.tag!==5||!Q(g)){for(;b!=null&&Wu(g,b);)M++,b=o[M];if(M===o.length){o=!0;break e}else for(g=g.child;g!==null;)s.push(g,M),g=g.sibling}}o=!1}return o;case yl:if(s.tag===5&&pe(s.stateNode,o.value))return!0;break;case Sl:if((s.tag===5||s.tag===6)&&(s=R(s),s!==null&&0<=s.indexOf(o.value)))return!0;break;case Ml:if(s.tag===5&&(s=s.memoizedProps["data-testname"],typeof s=="string"&&s.toLowerCase()===o.value.toLowerCase()))return!0;break;default:throw Error(a(365))}return!1}function Xu(s){switch(s.$$typeof){case xl:return"<"+(N(s.value)||"Unknown")+">";case _l:return":has("+(Xu(s)||"")+")";case yl:return'[role="'+s.value+'"]';case Sl:return'"'+s.value+'"';case Ml:return'[data-testname="'+s.value+'"]';default:throw Error(a(365))}}function Bp(s,o){var f=[];s=[s,0];for(var g=0;g<s.length;){var M=s[g++],b=s[g++],z=o[b];if(M.tag!==5||!Q(M)){for(;z!=null&&Wu(M,z);)b++,z=o[b];if(b===o.length)f.push(M);else for(M=M.child;M!==null;)s.push(M,b),M=M.sibling}}return f}function qu(s,o){if(!yt)throw Error(a(363));s=Hu(s),s=Bp(s,o),o=[],s=Array.from(s);for(var f=0;f<s.length;){var g=s[f++];if(g.tag===5)Q(g)||o.push(g.stateNode);else for(g=g.child;g!==null;)s.push(g),g=g.sibling}return o}var Rx=Math.ceil,wl=c.ReactCurrentDispatcher,Yu=c.ReactCurrentOwner,Ut=c.ReactCurrentBatchConfig,ot=0,Wt=null,Xt=null,rn=0,In=0,Cs=Vn(0),Jt=0,zo=null,Ps=0,bl=0,Zu=0,No=null,bn=null,Ju=0,ju=1/0;function Ls(){ju=Kt()+500}var Tl=!1,Qu=null,tr=null,El=!1,nr=null,Al=0,Fo=0,Ku=null,Cl=-1,Pl=0;function mn(){return(ot&6)!==0?Kt():Cl!==-1?Cl:Cl=Kt()}function ir(s){return(s.mode&1)===0?1:(ot&2)!==0&&rn!==0?rn&-rn:dx.transition!==null?(Pl===0&&(s=Ga,Ga<<=1,(Ga&4194240)===0&&(Ga=64),Pl=s),Pl):(s=gt,s!==0?s:Me())}function Zn(s,o,f){if(50<Fo)throw Fo=0,Ku=null,Error(a(185));var g=Ll(s,o);return g===null?null:(_o(g,o,f),((ot&2)===0||g!==Wt)&&(g===Wt&&((ot&2)===0&&(bl|=o),Jt===4&&rr(g,rn)),Tn(g,f),o===1&&ot===0&&(s.mode&1)===0&&(Ls(),qa&&vi())),g)}function Ll(s,o){s.lanes|=o;var f=s.alternate;for(f!==null&&(f.lanes|=o),f=s,s=s.return;s!==null;)s.childLanes|=o,f=s.alternate,f!==null&&(f.childLanes|=o),f=s,s=s.return;return f.tag===3?f.stateNode:null}function Tn(s,o){var f=s.callbackNode;rx(s,o);var g=Wa(s,s===Wt?rn:0);if(g===0)f!==null&&Td(f),s.callbackNode=null,s.callbackPriority=0;else if(o=g&-g,s.callbackPriority!==o){if(f!=null&&Td(f),o===1)s.tag===0?fx(Vp.bind(null,s)):Ed(Vp.bind(null,s)),We?Ve(function(){ot===0&&vi()}):ou(au,vi),f=null;else{switch(bd(g)){case 1:f=au;break;case 4:f=lx;break;case 16:f=lu;break;case 536870912:f=cx;break;default:f=lu}f=jp(f,kp.bind(null,s))}s.callbackPriority=o,s.callbackNode=f}}function kp(s,o){if(Cl=-1,Pl=0,(ot&6)!==0)throw Error(a(327));var f=s.callbackNode;if(Nr()&&s.callbackNode!==f)return null;var g=Wa(s,s===Wt?rn:0);if(g===0)return null;if((g&30)!==0||(g&s.expiredLanes)!==0||o)o=Rl(s,g);else{o=g;var M=ot;ot|=2;var b=Wp();(Wt!==s||rn!==o)&&(Ls(),Dr(s,o));do try{zx();break}catch(V){Hp(s,V)}while(1);hu(),wl.current=b,ot=M,Xt!==null?o=0:(Wt=null,rn=0,o=Jt)}if(o!==0){if(o===2&&(M=iu(s),M!==0&&(g=M,o=$u(s,M))),o===1)throw f=zo,Dr(s,0),rr(s,g),Tn(s,Kt()),f;if(o===6)rr(s,g);else{if(M=s.current.alternate,(g&30)===0&&!Ix(M)&&(o=Rl(s,g),o===2&&(b=iu(s),b!==0&&(g=b,o=$u(s,b))),o===1))throw f=zo,Dr(s,0),rr(s,g),Tn(s,Kt()),f;switch(s.finishedWork=M,s.finishedLanes=g,o){case 0:case 1:throw Error(a(345));case 2:zr(s,bn);break;case 3:if(rr(s,g),(g&130023424)===g&&(o=Ju+500-Kt(),10<o)){if(Wa(s,0)!==0)break;if(M=s.suspendedLanes,(M&g)!==g){mn(),s.pingedLanes|=s.suspendedLanes&M;break}s.timeoutHandle=Ye(zr.bind(null,s,bn),o);break}zr(s,bn);break;case 4:if(rr(s,g),(g&4194240)===g)break;for(o=s.eventTimes,M=-1;0<g;){var z=31-ri(g);b=1<<z,z=o[z],z>M&&(M=z),g&=~b}if(g=M,g=Kt()-g,g=(120>g?120:480>g?480:1080>g?1080:1920>g?1920:3e3>g?3e3:4320>g?4320:1960*Rx(g/1960))-g,10<g){s.timeoutHandle=Ye(zr.bind(null,s,bn),g);break}zr(s,bn);break;case 5:zr(s,bn);break;default:throw Error(a(329))}}}return Tn(s,Kt()),s.callbackNode===f?kp.bind(null,s):null}function $u(s,o){var f=No;return s.current.memoizedState.isDehydrated&&(Dr(s,o).flags|=256),s=Rl(s,o),s!==2&&(o=bn,bn=f,o!==null&&eh(o)),s}function eh(s){bn===null?bn=s:bn.push.apply(bn,s)}function Ix(s){for(var o=s;;){if(o.flags&16384){var f=o.updateQueue;if(f!==null&&(f=f.stores,f!==null))for(var g=0;g<f.length;g++){var M=f[g],b=M.getSnapshot;M=M.value;try{if(!gi(b(),M))return!1}catch{return!1}}}if(f=o.child,o.subtreeFlags&16384&&f!==null)f.return=o,o=f;else{if(o===s)break;for(;o.sibling===null;){if(o.return===null||o.return===s)return!0;o=o.return}o.sibling.return=o.return,o=o.sibling}}return!0}function rr(s,o){for(o&=~Zu,o&=~bl,s.suspendedLanes|=o,s.pingedLanes&=~o,s=s.expirationTimes;0<o;){var f=31-ri(o),g=1<<f;s[f]=-1,o&=~g}}function Vp(s){if((ot&6)!==0)throw Error(a(327));Nr();var o=Wa(s,0);if((o&1)===0)return Tn(s,Kt()),null;var f=Rl(s,o);if(s.tag!==0&&f===2){var g=iu(s);g!==0&&(o=g,f=$u(s,g))}if(f===1)throw f=zo,Dr(s,0),rr(s,o),Tn(s,Kt()),f;if(f===6)throw Error(a(345));return s.finishedWork=s.current.alternate,s.finishedLanes=o,zr(s,bn),Tn(s,Kt()),null}function Gp(s){nr!==null&&nr.tag===0&&(ot&6)===0&&Nr();var o=ot;ot|=1;var f=Ut.transition,g=gt;try{if(Ut.transition=null,gt=1,s)return s()}finally{gt=g,Ut.transition=f,ot=o,(ot&6)===0&&vi()}}function th(){In=Cs.current,nt(Cs)}function Dr(s,o){s.finishedWork=null,s.finishedLanes=0;var f=s.timeoutHandle;if(f!==Xe&&(s.timeoutHandle=Xe,He(f)),Xt!==null)for(f=Xt.return;f!==null;){var g=f;switch(xu(g),g.tag){case 1:g=g.type.childContextTypes,g!=null&&ka();break;case 3:Es(),nt(Qt),nt(St),Tu();break;case 5:wu(g);break;case 4:Es();break;case 13:nt(zt);break;case 19:nt(zt);break;case 10:fu(g.type._context);break;case 22:case 23:th()}f=f.return}if(Wt=s,Xt=s=sr(s.current,null),rn=In=o,Jt=0,zo=null,Zu=bl=Ps=0,bn=No=null,xi!==null){for(o=0;o<xi.length;o++)if(f=xi[o],g=f.interleaved,g!==null){f.interleaved=null;var M=g.next,b=f.pending;if(b!==null){var z=b.next;b.next=M,g.next=z}f.pending=g}xi=null}return s}function Hp(s,o){do{var f=Xt;try{if(hu(),il.current=cl,rl){for(var g=Ft.memoizedState;g!==null;){var M=g.queue;M!==null&&(M.pending=null),g=g.next}rl=!1}if(As=0,$t=an=Ft=null,To=!1,Eo=0,Yu.current=null,f===null||f.return===null){Jt=1,zo=o,Xt=null;break}e:{var b=s,z=f.return,V=f,ee=o;if(o=rn,V.flags|=32768,ee!==null&&typeof ee=="object"&&typeof ee.then=="function"){var ge=ee,Re=V,Ke=Re.tag;if((Re.mode&1)===0&&(Ke===0||Ke===11||Ke===15)){var Ge=Re.alternate;Ge?(Re.updateQueue=Ge.updateQueue,Re.memoizedState=Ge.memoizedState,Re.lanes=Ge.lanes):(Re.updateQueue=null,Re.memoizedState=null)}var bt=up(z);if(bt!==null){bt.flags&=-257,hp(bt,z,V,b,o),bt.mode&1&&cp(b,ge,o),o=bt,ee=ge;var Oe=o.updateQueue;if(Oe===null){var un=new Set;un.add(ee),o.updateQueue=un}else Oe.add(ee);break e}else{if((o&1)===0){cp(b,ge,o),nh();break e}ee=Error(a(426))}}else if(It&&V.mode&1){var jn=up(z);if(jn!==null){(jn.flags&65536)===0&&(jn.flags|=256),hp(jn,z,V,b,o),Mu(ee);break e}}b=ee,Jt!==4&&(Jt=2),No===null?No=[b]:No.push(b),ee=Iu(ee,V),V=z;do{switch(V.tag){case 3:V.flags|=65536,o&=-o,V.lanes|=o;var Z=ap(V,ee,o);Pd(V,Z);break e;case 1:b=ee;var G=V.type,j=V.stateNode;if((V.flags&128)===0&&(typeof G.getDerivedStateFromError=="function"||j!==null&&typeof j.componentDidCatch=="function"&&(tr===null||!tr.has(j)))){V.flags|=65536,o&=-o,V.lanes|=o;var Te=lp(V,b,o);Pd(V,Te);break e}}V=V.return}while(V!==null)}qp(f)}catch(Ne){o=Ne,Xt===f&&f!==null&&(Xt=f=f.return);continue}break}while(1)}function Wp(){var s=wl.current;return wl.current=cl,s===null?cl:s}function nh(){(Jt===0||Jt===3||Jt===2)&&(Jt=4),Wt===null||(Ps&268435455)===0&&(bl&268435455)===0||rr(Wt,rn)}function Rl(s,o){var f=ot;ot|=2;var g=Wp();Wt===s&&rn===o||Dr(s,o);do try{Dx();break}catch(M){Hp(s,M)}while(1);if(hu(),ot=f,wl.current=g,Xt!==null)throw Error(a(261));return Wt=null,rn=0,Jt}function Dx(){for(;Xt!==null;)Xp(Xt)}function zx(){for(;Xt!==null&&!ox();)Xp(Xt)}function Xp(s){var o=Jp(s.alternate,s,In);s.memoizedProps=s.pendingProps,o===null?qp(s):Xt=o,Yu.current=null}function qp(s){var o=s;do{var f=o.alternate;if(s=o.return,(o.flags&32768)===0){if(f=wx(f,o,In),f!==null){Xt=f;return}}else{if(f=Ex(f,o),f!==null){f.flags&=32767,Xt=f;return}if(s!==null)s.flags|=32768,s.subtreeFlags=0,s.deletions=null;else{Jt=6,Xt=null;return}}if(o=o.sibling,o!==null){Xt=o;return}Xt=o=s}while(o!==null);Jt===0&&(Jt=5)}function zr(s,o){var f=gt,g=Ut.transition;try{Ut.transition=null,gt=1,Nx(s,o,f)}finally{Ut.transition=g,gt=f}return null}function Nx(s,o,f){do Nr();while(nr!==null);if((ot&6)!==0)throw Error(a(327));var g=s.finishedWork,M=s.finishedLanes;if(g===null)return null;if(s.finishedWork=null,s.finishedLanes=0,g===s.current)throw Error(a(177));s.callbackNode=null,s.callbackPriority=0;var b=g.lanes|g.childLanes;if(sx(s,b),s===Wt&&(Xt=Wt=null,rn=0),(g.subtreeFlags&2064)===0&&(g.flags&2064)===0||El||(El=!0,jp(lu,function(){return Nr(),null})),b=(g.flags&15990)!==0,(g.subtreeFlags&15990)!==0||b){b=Ut.transition,Ut.transition=null;var z=gt;gt=1;var V=ot;ot|=4,Yu.current=null,Cx(s,g),Px(s,g),B(s.containerInfo),s.current=g,Lx(g),ax(),ot=V,gt=z,Ut.transition=b}else s.current=g;if(El&&(El=!1,nr=s,Al=M),b=s.pendingLanes,b===0&&(tr=null),ux(g.stateNode),Tn(s,Kt()),o!==null)for(f=s.onRecoverableError,g=0;g<o.length;g++)f(o[g]);if(Tl)throw Tl=!1,s=Qu,Qu=null,s;return(Al&1)!==0&&s.tag!==0&&Nr(),b=s.pendingLanes,(b&1)!==0?s===Ku?Fo++:(Fo=0,Ku=s):Fo=0,vi(),null}function Nr(){if(nr!==null){var s=bd(Al),o=Ut.transition,f=gt;try{if(Ut.transition=null,gt=16>s?16:s,nr===null)var g=!1;else{if(s=nr,nr=null,Al=0,(ot&6)!==0)throw Error(a(331));var M=ot;for(ot|=4,Se=s.current;Se!==null;){var b=Se,z=b.child;if((Se.flags&16)!==0){var V=b.deletions;if(V!==null){for(var ee=0;ee<V.length;ee++){var ge=V[ee];for(Se=ge;Se!==null;){var Re=Se;switch(Re.tag){case 0:case 11:case 15:Ir(8,Re,b)}var Ke=Re.child;if(Ke!==null)Ke.return=Re,Se=Ke;else for(;Se!==null;){Re=Se;var Ge=Re.sibling,bt=Re.return;if(Lp(Re),Re===ge){Se=null;break}if(Ge!==null){Ge.return=bt,Se=Ge;break}Se=bt}}}var Oe=b.alternate;if(Oe!==null){var un=Oe.child;if(un!==null){Oe.child=null;do{var jn=un.sibling;un.sibling=null,un=jn}while(un!==null)}}Se=b}}if((b.subtreeFlags&2064)!==0&&z!==null)z.return=b,Se=z;else e:for(;Se!==null;){if(b=Se,(b.flags&2048)!==0)switch(b.tag){case 0:case 11:case 15:Ir(9,b,b.return)}var Z=b.sibling;if(Z!==null){Z.return=b.return,Se=Z;break e}Se=b.return}}var G=s.current;for(Se=G;Se!==null;){z=Se;var j=z.child;if((z.subtreeFlags&2064)!==0&&j!==null)j.return=z,Se=j;else e:for(z=G;Se!==null;){if(V=Se,(V.flags&2048)!==0)try{switch(V.tag){case 0:case 11:case 15:Io(9,V)}}catch(Ne){En(V,V.return,Ne)}if(V===z){Se=null;break e}var Te=V.sibling;if(Te!==null){Te.return=V.return,Se=Te;break e}Se=V.return}}if(ot=M,vi(),mi&&typeof mi.onPostCommitFiberRoot=="function")try{mi.onPostCommitFiberRoot(Xa,s)}catch{}g=!0}return g}finally{gt=f,Ut.transition=o}}return!1}function Yp(s,o,f){o=Iu(f,o),o=ap(s,o,1),er(s,o),o=mn(),s=Ll(s,1),s!==null&&(_o(s,1,o),Tn(s,o))}function En(s,o,f){if(s.tag===3)Yp(s,s,f);else for(;o!==null;){if(o.tag===3){Yp(o,s,f);break}else if(o.tag===1){var g=o.stateNode;if(typeof o.type.getDerivedStateFromError=="function"||typeof g.componentDidCatch=="function"&&(tr===null||!tr.has(g))){s=Iu(f,s),s=lp(o,s,1),er(o,s),s=mn(),o=Ll(o,1),o!==null&&(_o(o,1,s),Tn(o,s));break}}o=o.return}}function Fx(s,o,f){var g=s.pingCache;g!==null&&g.delete(o),o=mn(),s.pingedLanes|=s.suspendedLanes&f,Wt===s&&(rn&f)===f&&(Jt===4||Jt===3&&(rn&130023424)===rn&&500>Kt()-Ju?Dr(s,0):Zu|=f),Tn(s,o)}function Zp(s,o){o===0&&((s.mode&1)===0?o=1:(o=Ha,Ha<<=1,(Ha&130023424)===0&&(Ha=4194304)));var f=mn();s=Ll(s,o),s!==null&&(_o(s,o,f),Tn(s,f))}function Ox(s){var o=s.memoizedState,f=0;o!==null&&(f=o.retryLane),Zp(s,f)}function Ux(s,o){var f=0;switch(s.tag){case 13:var g=s.stateNode,M=s.memoizedState;M!==null&&(f=M.retryLane);break;case 19:g=s.stateNode;break;default:throw Error(a(314))}g!==null&&g.delete(o),Zp(s,f)}var Jp;Jp=function(s,o,f){if(s!==null)if(s.memoizedProps!==o.pendingProps||Qt.current)Rn=!0;else{if((s.lanes&f)===0&&(o.flags&128)===0)return Rn=!1,Tx(s,o,f);Rn=(s.flags&131072)!==0}else Rn=!1,It&&(o.flags&1048576)!==0&&Nd(o,el,o.index);switch(o.lanes=0,o.tag){case 2:var g=o.type;s!==null&&(s.alternate=null,o.alternate=null,o.flags|=2),s=o.pendingProps;var M=Ci(o,St.current);ys(o,f),M=Au(null,o,g,s,M,f);var b=Cu();return o.flags|=1,typeof M=="object"&&M!==null&&typeof M.render=="function"&&M.$$typeof===void 0?(o.tag=1,o.memoizedState=null,o.updateQueue=null,wn(g)?(b=!0,Va(o)):b=!1,o.memoizedState=M.state!==null&&M.state!==void 0?M.state:null,pu(o),M.updater=Ka,o.stateNode=M,M._reactInternals=o,gu(o,g,s,f),o=Nu(null,o,g,!0,b,f)):(o.tag=0,It&&b&&vu(o),pn(null,o,M,f),o=o.child),o;case 16:g=o.elementType;e:{switch(s!==null&&(s.alternate=null,o.alternate=null,o.flags|=2),s=o.pendingProps,M=g._init,g=M(g._payload),o.type=g,M=o.tag=kx(g),s=si(g,s),M){case 0:o=zu(null,o,g,s,f);break e;case 1:o=_p(null,o,g,s,f);break e;case 11:o=pp(null,o,g,s,f);break e;case 14:o=mp(null,o,g,si(g.type,s),f);break e}throw Error(a(306,g,""))}return o;case 0:return g=o.type,M=o.pendingProps,M=o.elementType===g?M:si(g,M),zu(s,o,g,M,f);case 1:return g=o.type,M=o.pendingProps,M=o.elementType===g?M:si(g,M),_p(s,o,g,M,f);case 3:e:{if(yp(o),s===null)throw Error(a(387));g=o.pendingProps,b=o.memoizedState,M=b.element,Cd(s,o),Qa(o,g,null,f);var z=o.memoizedState;if(g=z.element,te&&b.isDehydrated)if(b={element:g,isDehydrated:!1,cache:z.cache,transitions:z.transitions},o.updateQueue.baseState=b,o.memoizedState=b,o.flags&256){M=Error(a(423)),o=Mp(s,o,g,f,M);break e}else if(g!==M){M=Error(a(424)),o=Mp(s,o,g,f,M);break e}else for(te&&(Ln=q(o.stateNode.containerInfo),Pn=o,It=!0,oi=null,yo=!1),f=Vd(o,null,g,f),o.child=f;f;)f.flags=f.flags&-3|4096,f=f.sibling;else{if(ws(),g===M){o=zi(s,o,f);break e}pn(s,o,g,f)}o=o.child}return o;case 5:return Gd(o),s===null&&yu(o),g=o.type,M=o.pendingProps,b=s!==null?s.memoizedProps:null,z=M.children,Be(g,M)?z=null:b!==null&&Be(g,b)&&(o.flags|=32),xp(s,o),pn(s,o,z,f),o.child;case 6:return s===null&&yu(o),null;case 13:return Sp(s,o,f);case 4:return Su(o,o.stateNode.containerInfo),g=o.pendingProps,s===null?o.child=bs(o,null,g,f):pn(s,o,g,f),o.child;case 11:return g=o.type,M=o.pendingProps,M=o.elementType===g?M:si(g,M),pp(s,o,g,M,f);case 7:return pn(s,o,o.pendingProps,f),o.child;case 8:return pn(s,o,o.pendingProps.children,f),o.child;case 12:return pn(s,o,o.pendingProps.children,f),o.child;case 10:e:{if(g=o.type._context,M=o.pendingProps,b=o.memoizedProps,z=M.value,Ad(o,g,z),b!==null)if(gi(b.value,z)){if(b.children===M.children&&!Qt.current){o=zi(s,o,f);break e}}else for(b=o.child,b!==null&&(b.return=o);b!==null;){var V=b.dependencies;if(V!==null){z=b.child;for(var ee=V.firstContext;ee!==null;){if(ee.context===g){if(b.tag===1){ee=Li(-1,f&-f),ee.tag=2;var ge=b.updateQueue;if(ge!==null){ge=ge.shared;var Re=ge.pending;Re===null?ee.next=ee:(ee.next=Re.next,Re.next=ee),ge.pending=ee}}b.lanes|=f,ee=b.alternate,ee!==null&&(ee.lanes|=f),du(b.return,f,o),V.lanes|=f;break}ee=ee.next}}else if(b.tag===10)z=b.type===o.type?null:b.child;else if(b.tag===18){if(z=b.return,z===null)throw Error(a(341));z.lanes|=f,V=z.alternate,V!==null&&(V.lanes|=f),du(z,f,o),z=b.sibling}else z=b.child;if(z!==null)z.return=b;else for(z=b;z!==null;){if(z===o){z=null;break}if(b=z.sibling,b!==null){b.return=z.return,z=b;break}z=z.return}b=z}pn(s,o,M.children,f),o=o.child}return o;case 9:return M=o.type,g=o.pendingProps.children,ys(o,f),M=Hn(M),g=g(M),o.flags|=1,pn(s,o,g,f),o.child;case 14:return g=o.type,M=si(g,o.pendingProps),M=si(g.type,M),mp(s,o,g,M,f);case 15:return gp(s,o,o.type,o.pendingProps,f);case 17:return g=o.type,M=o.pendingProps,M=o.elementType===g?M:si(g,M),s!==null&&(s.alternate=null,o.alternate=null,o.flags|=2),o.tag=1,wn(g)?(s=!0,Va(o)):s=!1,ys(o,f),Dd(o,g,M),gu(o,g,M,f),Nu(null,o,g,!0,s,f);case 19:return Ep(s,o,f);case 22:return vp(s,o,f)}throw Error(a(156,o.tag))};function jp(s,o){return ou(s,o)}function Bx(s,o,f,g){this.tag=s,this.key=f,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=o,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=g,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Jn(s,o,f,g){return new Bx(s,o,f,g)}function ih(s){return s=s.prototype,!(!s||!s.isReactComponent)}function kx(s){if(typeof s=="function")return ih(s)?1:0;if(s!=null){if(s=s.$$typeof,s===_)return 11;if(s===w)return 14}return 2}function sr(s,o){var f=s.alternate;return f===null?(f=Jn(s.tag,o,s.key,s.mode),f.elementType=s.elementType,f.type=s.type,f.stateNode=s.stateNode,f.alternate=s,s.alternate=f):(f.pendingProps=o,f.type=s.type,f.flags=0,f.subtreeFlags=0,f.deletions=null),f.flags=s.flags&14680064,f.childLanes=s.childLanes,f.lanes=s.lanes,f.child=s.child,f.memoizedProps=s.memoizedProps,f.memoizedState=s.memoizedState,f.updateQueue=s.updateQueue,o=s.dependencies,f.dependencies=o===null?null:{lanes:o.lanes,firstContext:o.firstContext},f.sibling=s.sibling,f.index=s.index,f.ref=s.ref,f}function Il(s,o,f,g,M,b){var z=2;if(g=s,typeof s=="function")ih(s)&&(z=1);else if(typeof s=="string")z=5;else e:switch(s){case d:return Fr(f.children,M,b,o);case p:z=8,M|=8;break;case m:return s=Jn(12,f,o,M|2),s.elementType=m,s.lanes=b,s;case y:return s=Jn(13,f,o,M),s.elementType=y,s.lanes=b,s;case S:return s=Jn(19,f,o,M),s.elementType=S,s.lanes=b,s;case E:return Dl(f,M,b,o);default:if(typeof s=="object"&&s!==null)switch(s.$$typeof){case v:z=10;break e;case x:z=9;break e;case _:z=11;break e;case w:z=14;break e;case T:z=16,g=null;break e}throw Error(a(130,s==null?s:typeof s,""))}return o=Jn(z,f,o,M),o.elementType=s,o.type=g,o.lanes=b,o}function Fr(s,o,f,g){return s=Jn(7,s,g,o),s.lanes=f,s}function Dl(s,o,f,g){return s=Jn(22,s,g,o),s.elementType=E,s.lanes=f,s.stateNode={},s}function rh(s,o,f){return s=Jn(6,s,null,o),s.lanes=f,s}function sh(s,o,f){return o=Jn(4,s.children!==null?s.children:[],s.key,o),o.lanes=f,o.stateNode={containerInfo:s.containerInfo,pendingChildren:null,implementation:s.implementation},o}function Vx(s,o,f,g,M){this.tag=o,this.containerInfo=s,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=Xe,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=ru(0),this.expirationTimes=ru(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ru(0),this.identifierPrefix=g,this.onRecoverableError=M,te&&(this.mutableSourceEagerHydrationData=null)}function Qp(s,o,f,g,M,b,z,V,ee){return s=new Vx(s,o,f,V,ee),o===1?(o=1,b===!0&&(o|=8)):o=0,b=Jn(3,null,null,o),s.current=b,b.stateNode=s,b.memoizedState={element:g,isDehydrated:f,cache:null,transitions:null},pu(b),s}function Kp(s){if(!s)return Gn;s=s._reactInternals;e:{if(L(s)!==s||s.tag!==1)throw Error(a(170));var o=s;do{switch(o.tag){case 3:o=o.stateNode.context;break e;case 1:if(wn(o.type)){o=o.stateNode.__reactInternalMemoizedMergedChildContext;break e}}o=o.return}while(o!==null);throw Error(a(171))}if(s.tag===1){var f=s.type;if(wn(f))return Sd(s,f,o)}return o}function $p(s){var o=s._reactInternals;if(o===void 0)throw typeof s.render=="function"?Error(a(188)):(s=Object.keys(s).join(","),Error(a(268,s)));return s=ae(o),s===null?null:s.stateNode}function em(s,o){if(s=s.memoizedState,s!==null&&s.dehydrated!==null){var f=s.retryLane;s.retryLane=f!==0&&f<o?f:o}}function oh(s,o){em(s,o),(s=s.alternate)&&em(s,o)}function Gx(s){return s=ae(s),s===null?null:s.stateNode}function Hx(){return null}return t.attemptContinuousHydration=function(s){if(s.tag===13){var o=mn();Zn(s,134217728,o),oh(s,134217728)}},t.attemptHydrationAtCurrentPriority=function(s){if(s.tag===13){var o=mn(),f=ir(s);Zn(s,f,o),oh(s,f)}},t.attemptSynchronousHydration=function(s){switch(s.tag){case 3:var o=s.stateNode;if(o.current.memoizedState.isDehydrated){var f=xo(o.pendingLanes);f!==0&&(su(o,f|1),Tn(o,Kt()),(ot&6)===0&&(Ls(),vi()))}break;case 13:var g=mn();Gp(function(){return Zn(s,1,g)}),oh(s,1)}},t.batchedUpdates=function(s,o){var f=ot;ot|=1;try{return s(o)}finally{ot=f,ot===0&&(Ls(),qa&&vi())}},t.createComponentSelector=function(s){return{$$typeof:xl,value:s}},t.createContainer=function(s,o,f,g,M,b,z){return Qp(s,o,!1,null,f,g,M,b,z)},t.createHasPseudoClassSelector=function(s){return{$$typeof:_l,value:s}},t.createHydrationContainer=function(s,o,f,g,M,b,z,V,ee){return s=Qp(f,g,!0,s,M,b,z,V,ee),s.context=Kp(null),f=s.current,g=mn(),M=ir(f),b=Li(g,M),b.callback=o??null,er(f,b),s.current.lanes=M,_o(s,M,g),Tn(s,g),s},t.createPortal=function(s,o,f){var g=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:h,key:g==null?null:""+g,children:s,containerInfo:o,implementation:f}},t.createRoleSelector=function(s){return{$$typeof:yl,value:s}},t.createTestNameSelector=function(s){return{$$typeof:Ml,value:s}},t.createTextSelector=function(s){return{$$typeof:Sl,value:s}},t.deferredUpdates=function(s){var o=gt,f=Ut.transition;try{return Ut.transition=null,gt=16,s()}finally{gt=o,Ut.transition=f}},t.discreteUpdates=function(s,o,f,g,M){var b=gt,z=Ut.transition;try{return Ut.transition=null,gt=1,s(o,f,g,M)}finally{gt=b,Ut.transition=z,ot===0&&Ls()}},t.findAllNodes=qu,t.findBoundingRects=function(s,o){if(!yt)throw Error(a(363));o=qu(s,o),s=[];for(var f=0;f<o.length;f++)s.push(F(o[f]));for(o=s.length-1;0<o;o--){f=s[o];for(var g=f.x,M=g+f.width,b=f.y,z=b+f.height,V=o-1;0<=V;V--)if(o!==V){var ee=s[V],ge=ee.x,Re=ge+ee.width,Ke=ee.y,Ge=Ke+ee.height;if(g>=ge&&b>=Ke&&M<=Re&&z<=Ge){s.splice(o,1);break}else if(g!==ge||f.width!==ee.width||Ge<b||Ke>z){if(!(b!==Ke||f.height!==ee.height||Re<g||ge>M)){ge>g&&(ee.width+=ge-g,ee.x=g),Re<M&&(ee.width=M-ge),s.splice(o,1);break}}else{Ke>b&&(ee.height+=Ke-b,ee.y=b),Ge<z&&(ee.height=z-Ke),s.splice(o,1);break}}}return s},t.findHostInstance=$p,t.findHostInstanceWithNoPortals=function(s){return s=X(s),s=s!==null?H(s):null,s===null?null:s.stateNode},t.findHostInstanceWithWarning=function(s){return $p(s)},t.flushControlled=function(s){var o=ot;ot|=1;var f=Ut.transition,g=gt;try{Ut.transition=null,gt=1,s()}finally{gt=g,Ut.transition=f,ot=o,ot===0&&(Ls(),vi())}},t.flushPassiveEffects=Nr,t.flushSync=Gp,t.focusWithin=function(s,o){if(!yt)throw Error(a(363));for(s=Hu(s),o=Bp(s,o),o=Array.from(o),s=0;s<o.length;){var f=o[s++];if(!Q(f)){if(f.tag===5&&xe(f.stateNode))return!0;for(f=f.child;f!==null;)o.push(f),f=f.sibling}}return!1},t.getCurrentUpdatePriority=function(){return gt},t.getFindAllNodesFailureDescription=function(s,o){if(!yt)throw Error(a(363));var f=0,g=[];s=[Hu(s),0];for(var M=0;M<s.length;){var b=s[M++],z=s[M++],V=o[z];if((b.tag!==5||!Q(b))&&(Wu(b,V)&&(g.push(Xu(V)),z++,z>f&&(f=z)),z<o.length))for(b=b.child;b!==null;)s.push(b,z),b=b.sibling}if(f<o.length){for(s=[];f<o.length;f++)s.push(Xu(o[f]));return`findAllNodes was able to match part of the selector:
  `+(g.join(" > ")+`

No matching component was found for:
  `)+s.join(" > ")}return null},t.getPublicRootInstance=function(s){if(s=s.current,!s.child)return null;switch(s.child.tag){case 5:return ie(s.child.stateNode);default:return s.child.stateNode}},t.injectIntoDevTools=function(s){if(s={bundleType:s.bundleType,version:s.version,rendererPackageName:s.rendererPackageName,rendererConfig:s.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:c.ReactCurrentDispatcher,findHostInstanceByFiber:Gx,findFiberByHostInstance:s.findFiberByHostInstance||Hx,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.0.0-fc46dba67-20220329"},typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u")s=!1;else{var o=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(o.isDisabled||!o.supportsFiber)s=!0;else{try{Xa=o.inject(s),mi=o}catch{}s=!!o.checkDCE}}return s},t.isAlreadyRendering=function(){return!1},t.observeVisibleRects=function(s,o,f,g){if(!yt)throw Error(a(363));s=qu(s,o);var M=be(s,f,g).disconnect;return{disconnect:function(){M()}}},t.registerMutableSourceForHydration=function(s,o){var f=o._getVersion;f=f(o._source),s.mutableSourceEagerHydrationData==null?s.mutableSourceEagerHydrationData=[o,f]:s.mutableSourceEagerHydrationData.push(o,f)},t.runWithPriority=function(s,o){var f=gt;try{return gt=s,o()}finally{gt=f}},t.shouldError=function(){return null},t.shouldSuspend=function(){return!1},t.updateContainer=function(s,o,f,g){var M=o.current,b=mn(),z=ir(M);return f=Kp(f),o.context===null?o.context=f:o.pendingContext=f,o=Li(b,z),o.payload={element:s},g=g===void 0?null:g,g!==null&&(o.callback=g),er(M,o),s=Zn(M,z,b),s!==null&&ja(s,M,z),z},t};(function(l){l.exports=eT})(Ov);const tT=Xx(Ov.exports);var bg,Tg;const Bv=l=>l&&l.isOrthographicCamera,nT=l=>l&&l.hasOwnProperty("current"),Fa=typeof window<"u"&&((bg=window.document)!=null&&bg.createElement||((Tg=window.navigator)==null?void 0:Tg.product)==="ReactNative")?me.exports.useLayoutEffect:me.exports.useEffect;function kv(l){const e=me.exports.useRef(l);return Fa(()=>void(e.current=l),[l]),e}function iT({set:l}){return Fa(()=>(l(new Promise(()=>null)),()=>l(!1)),[l]),null}class Vv extends me.exports.Component{constructor(...e){super(...e),this.state={error:!1}}componentDidCatch(e){this.props.set(e)}render(){return this.state.error?null:this.props.children}}Vv.getDerivedStateFromError=()=>({error:!0});const Gv="__default",rT=l=>l&&!!l.memoized&&!!l.changes;function Hv(l){const e=typeof window<"u"?window.devicePixelRatio:1;return Array.isArray(l)?Math.min(Math.max(l[0],e),l[1]):l}const Xo=l=>{var e;return(e=l.__r3f)==null?void 0:e.root.getState()},kt={obj:l=>l===Object(l)&&!kt.arr(l)&&typeof l!="function",fun:l=>typeof l=="function",str:l=>typeof l=="string",num:l=>typeof l=="number",boo:l=>typeof l=="boolean",und:l=>l===void 0,arr:l=>Array.isArray(l),equ(l,e,{arrays:t="shallow",objects:n="reference",strict:i=!0}={}){if(typeof l!=typeof e||!!l!=!!e)return!1;if(kt.str(l)||kt.num(l))return l===e;const r=kt.obj(l);if(r&&n==="reference")return l===e;const a=kt.arr(l);if(a&&t==="reference")return l===e;if((a||r)&&l===e)return!0;let c;for(c in l)if(!(c in e))return!1;for(c in i?e:l)if(l[c]!==e[c])return!1;if(kt.und(c)){if(a&&l.length===0&&e.length===0||r&&Object.keys(l).length===0&&Object.keys(e).length===0)return!0;if(l!==e)return!1}return!0}};function sT(l){l.dispose&&l.type!=="Scene"&&l.dispose();for(const e in l)e.dispose==null||e.dispose(),delete l[e]}function js(l,e){const t=l;return(e!=null&&e.primitive||!t.__r3f)&&(t.__r3f={type:"",root:null,previousAttach:null,memoizedProps:{},eventCount:0,handlers:{},objects:[],parent:null,...e}),l}function If(l,e){let t=l;if(e.includes("-")){const n=e.split("-"),i=n.pop();return t=n.reduce((r,a)=>r[a],l),{target:t,key:i}}else return{target:t,key:e}}const Eg=/-\d+$/;function Vh(l,e,t){if(kt.str(t)){if(Eg.test(t)){const r=t.replace(Eg,""),{target:a,key:c}=If(l,r);Array.isArray(a[c])||(a[c]=[])}const{target:n,key:i}=If(l,t);e.__r3f.previousAttach=n[i],n[i]=e}else e.__r3f.previousAttach=t(l,e)}function Ag(l,e,t){var n,i;if(kt.str(t)){const{target:r,key:a}=If(l,t),c=e.__r3f.previousAttach;c===void 0?delete r[a]:r[a]=c}else(n=e.__r3f)==null||n.previousAttach==null||n.previousAttach(l,e);(i=e.__r3f)==null||delete i.previousAttach}function Wv(l,{children:e,key:t,ref:n,...i},{children:r,key:a,ref:c,...u}={},h=!1){var d;const p=(d=l?.__r3f)!=null?d:{},m=Object.entries(i),v=[];if(h){const _=Object.keys(u);for(let y=0;y<_.length;y++)i.hasOwnProperty(_[y])||m.unshift([_[y],Gv+"remove"])}m.forEach(([_,y])=>{var S;if((S=l.__r3f)!=null&&S.primitive&&_==="object"||kt.equ(y,u[_]))return;if(/^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/.test(_))return v.push([_,y,!0,[]]);let w=[];_.includes("-")&&(w=_.split("-")),v.push([_,y,!1,w]);for(const T in i){const E=i[T];T.startsWith(`${_}-`)&&v.push([T,E,!1,T.split("-")])}});const x={...i};return p.memoizedProps&&p.memoizedProps.args&&(x.args=p.memoizedProps.args),p.memoizedProps&&p.memoizedProps.attach&&(x.attach=p.memoizedProps.attach),{memoized:x,changes:v}}function Gh(l,e){var t,n,i;const r=(t=l.__r3f)!=null?t:{},a=r.root,c=(n=a==null||a.getState==null?void 0:a.getState())!=null?n:{},{memoized:u,changes:h}=rT(e)?e:Wv(l,e),d=r.eventCount;l.__r3f&&(l.__r3f.memoizedProps=u);for(let v=0;v<h.length;v++){let[x,_,y,S]=h[v],w=l,T=w[x];if(S.length&&(T=S.reduce((E,C)=>E[C],l),!(T&&T.set))){const[E,...C]=S.reverse();w=C.reverse().reduce((P,N)=>P[N],l),x=E}if(_===Gv+"remove")if(T&&T.constructor){var p;_=new T.constructor(...(p=u.args)!=null?p:[])}else if(w.constructor){var m;const E=new w.constructor(...(m=w.__r3f.memoizedProps.args)!=null?m:[]);_=E[T],E.dispose&&E.dispose()}else _=0;if(y)_?r.handlers[x]=_:delete r.handlers[x],r.eventCount=Object.keys(r.handlers).length;else if(T&&T.set&&(T.copy||T instanceof ss)){if(Array.isArray(_))T.fromArray?T.fromArray(_):T.set(..._);else if(T.copy&&_&&_.constructor&&T.constructor.name===_.constructor.name)T.copy(_);else if(_!==void 0){const E=T instanceof Le;!E&&T.setScalar?T.setScalar(_):T instanceof ss&&_ instanceof ss?T.mask=_.mask:T.set(_),!("ColorManagement"in Oc)&&!c.linear&&E&&T.convertSRGBToLinear()}}else w[x]=_,!c.linear&&w[x]instanceof Zt&&(w[x].encoding=At);Qs(l)}if(r.parent&&c.internal&&l.raycast&&d!==r.eventCount){const v=c.internal.interaction.indexOf(l);v>-1&&c.internal.interaction.splice(v,1),r.eventCount&&c.internal.interaction.push(l)}return h.length&&(i=l.__r3f)!=null&&i.parent&&Df(l),l}function Qs(l){var e,t;const n=(e=l.__r3f)==null||(t=e.root)==null||t.getState==null?void 0:t.getState();n&&n.internal.frames===0&&n.invalidate()}function Df(l){l.onUpdate==null||l.onUpdate(l)}function oT(l,e){l.manual||(Bv(l)?(l.left=e.width/-2,l.right=e.width/2,l.top=e.height/2,l.bottom=e.height/-2):l.aspect=e.width/e.height,l.updateProjectionMatrix(),l.updateMatrixWorld())}function aT(l,e,t){const n=t.pop(),i=t.reduce((r,a)=>r[a],l);return i[n]=e}function Mc(l){return(l.eventObject||l.object).uuid+"/"+l.index+l.instanceId}function lT(){var l;const e=typeof self<"u"&&self||typeof window<"u"&&window;if(!e)return $r.exports.DefaultEventPriority;switch((l=e.event)==null?void 0:l.type){case"click":case"contextmenu":case"dblclick":case"pointercancel":case"pointerdown":case"pointerup":return $r.exports.DiscreteEventPriority;case"pointermove":case"pointerout":case"pointerover":case"pointerenter":case"pointerleave":case"wheel":return $r.exports.ContinuousEventPriority;default:return $r.exports.DefaultEventPriority}}function Xv(l,e,t,n){const i=t.get(e);i&&(t.delete(e),t.size===0&&(l.delete(n),i.target.releasePointerCapture(n)))}function cT(l,e){const{internal:t}=l.getState();t.interaction=t.interaction.filter(n=>n!==e),t.initialHits=t.initialHits.filter(n=>n!==e),t.hovered.forEach((n,i)=>{(n.eventObject===e||n.object===e)&&t.hovered.delete(i)}),t.capturedMap.forEach((n,i)=>{Xv(t.capturedMap,e,n,i)})}function uT(l){function e(u){const{internal:h}=l.getState(),d=u.offsetX-h.initialClick[0],p=u.offsetY-h.initialClick[1];return Math.round(Math.sqrt(d*d+p*p))}function t(u){return u.filter(h=>["Move","Over","Enter","Out","Leave"].some(d=>{var p;return(p=h.__r3f)==null?void 0:p.handlers["onPointer"+d]}))}function n(u,h){const d=l.getState(),p=new Set,m=[],v=h?h(d.internal.interaction):d.internal.interaction;for(let S=0;S<v.length;S++){const w=Xo(v[S]);w&&(w.raycaster.camera=void 0)}d.previousRoot||d.events.compute==null||d.events.compute(u,d);function x(S){const w=Xo(S);if(!w||!w.events.enabled||w.raycaster.camera===null)return[];if(w.raycaster.camera===void 0){var T;w.events.compute==null||w.events.compute(u,w,(T=w.previousRoot)==null?void 0:T.getState()),w.raycaster.camera===void 0&&(w.raycaster.camera=null)}return w.raycaster.camera?w.raycaster.intersectObject(S,!0):[]}let _=v.flatMap(x).sort((S,w)=>{const T=Xo(S.object),E=Xo(w.object);return!T||!E?S.distance-w.distance:E.events.priority-T.events.priority||S.distance-w.distance}).filter(S=>{const w=Mc(S);return p.has(w)?!1:(p.add(w),!0)});d.events.filter&&(_=d.events.filter(_,d));for(const S of _){let w=S.object;for(;w;){var y;(y=w.__r3f)!=null&&y.eventCount&&m.push({...S,eventObject:w}),w=w.parent}}if("pointerId"in u&&d.internal.capturedMap.has(u.pointerId))for(let S of d.internal.capturedMap.get(u.pointerId).values())p.has(Mc(S.intersection))||m.push(S.intersection);return m}function i(u,h,d,p){const m=l.getState();if(u.length){const v={stopped:!1};for(const x of u){const _=Xo(x.object)||m,{raycaster:y,pointer:S,camera:w,internal:T}=_,E=new I(S.x,S.y,0).unproject(w),C=O=>{var X,ae;return(X=(ae=T.capturedMap.get(O))==null?void 0:ae.has(x.eventObject))!=null?X:!1},P=O=>{const X={intersection:x,target:h.target};T.capturedMap.has(O)?T.capturedMap.get(O).set(x.eventObject,X):T.capturedMap.set(O,new Map([[x.eventObject,X]])),h.target.setPointerCapture(O)},N=O=>{const X=T.capturedMap.get(O);X&&Xv(T.capturedMap,x.eventObject,X,O)};let A={};for(let O in h){let X=h[O];typeof X!="function"&&(A[O]=X)}let L={...x,...A,pointer:S,intersections:u,stopped:v.stopped,delta:d,unprojectedPoint:E,ray:y.ray,camera:w,stopPropagation(){const O="pointerId"in h&&T.capturedMap.get(h.pointerId);if((!O||O.has(x.eventObject))&&(L.stopped=v.stopped=!0,T.hovered.size&&Array.from(T.hovered.values()).find(X=>X.eventObject===x.eventObject))){const X=u.slice(0,u.indexOf(x));r([...X,x])}},target:{hasPointerCapture:C,setPointerCapture:P,releasePointerCapture:N},currentTarget:{hasPointerCapture:C,setPointerCapture:P,releasePointerCapture:N},nativeEvent:h};if(p(L),v.stopped===!0)break}}return u}function r(u){const{internal:h}=l.getState();for(const d of h.hovered.values())if(!u.length||!u.find(p=>p.object===d.object&&p.index===d.index&&p.instanceId===d.instanceId)){const m=d.eventObject.__r3f,v=m?.handlers;if(h.hovered.delete(Mc(d)),m!=null&&m.eventCount){const x={...d,intersections:u};v.onPointerOut==null||v.onPointerOut(x),v.onPointerLeave==null||v.onPointerLeave(x)}}}function a(u,h){for(let d=0;d<h.length;d++){const p=h[d].__r3f;p==null||p.handlers.onPointerMissed==null||p.handlers.onPointerMissed(u)}}function c(u){switch(u){case"onPointerLeave":case"onPointerCancel":return()=>r([]);case"onLostPointerCapture":return h=>{const{internal:d}=l.getState();"pointerId"in h&&d.capturedMap.has(h.pointerId)&&(d.capturedMap.delete(h.pointerId),r([]))}}return function(d){const{onPointerMissed:p,internal:m}=l.getState();m.lastEvent.current=d;const v=u==="onPointerMove",x=u==="onClick"||u==="onContextMenu"||u==="onDoubleClick",y=n(d,v?t:void 0),S=x?e(d):0;u==="onPointerDown"&&(m.initialClick=[d.offsetX,d.offsetY],m.initialHits=y.map(T=>T.eventObject)),x&&!y.length&&S<=2&&(a(d,m.interaction),p&&p(d)),v&&r(y);function w(T){const E=T.eventObject,C=E.__r3f,P=C?.handlers;if(!!(C!=null&&C.eventCount))if(v){if(P.onPointerOver||P.onPointerEnter||P.onPointerOut||P.onPointerLeave){const N=Mc(T),A=m.hovered.get(N);A?A.stopped&&T.stopPropagation():(m.hovered.set(N,T),P.onPointerOver==null||P.onPointerOver(T),P.onPointerEnter==null||P.onPointerEnter(T))}P.onPointerMove==null||P.onPointerMove(T)}else{const N=P[u];N?(!x||m.initialHits.includes(E))&&(a(d,m.interaction.filter(A=>!m.initialHits.includes(A))),N(T)):x&&m.initialHits.includes(E)&&a(d,m.interaction.filter(A=>!m.initialHits.includes(A)))}}i(y,d,S,w)}}return{handlePointer:c}}let zf={},hT=l=>void(zf={...zf,...l});function fT(l,e){function t(d,{args:p=[],attach:m,...v},x){let _=`${d[0].toUpperCase()}${d.slice(1)}`,y;if(d==="primitive"){if(v.object===void 0)throw new Error("R3F: Primitives without 'object' are invalid!");const S=v.object;y=js(S,{type:d,root:x,attach:m,primitive:!0})}else{const S=zf[_];if(!S)throw new Error(`R3F: ${_} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);if(!Array.isArray(p))throw new Error("R3F: The args prop must be an array!");y=js(new S(...p),{type:d,root:x,attach:m,memoizedProps:{args:p}})}return y.__r3f.attach===void 0&&(y instanceof st?y.__r3f.attach="geometry":y instanceof on&&(y.__r3f.attach="material")),_!=="inject"&&Gh(y,v),y}function n(d,p){let m=!1;if(p){var v,x;(v=p.__r3f)!=null&&v.attach?Vh(d,p,p.__r3f.attach):p.isObject3D&&d.isObject3D&&(d.add(p),m=!0),m||(x=d.__r3f)==null||x.objects.push(p),p.__r3f||js(p,{}),p.__r3f.parent=d,Df(p),Qs(p)}}function i(d,p,m){let v=!1;if(p){var x,_;if((x=p.__r3f)!=null&&x.attach)Vh(d,p,p.__r3f.attach);else if(p.isObject3D&&d.isObject3D){p.parent=d,p.dispatchEvent({type:"added"});const y=d.children.filter(w=>w!==p),S=y.indexOf(m);d.children=[...y.slice(0,S),p,...y.slice(S)],v=!0}v||(_=d.__r3f)==null||_.objects.push(p),p.__r3f||js(p,{}),p.__r3f.parent=d,Df(p),Qs(p)}}function r(d,p,m=!1){d&&[...d].forEach(v=>a(p,v,m))}function a(d,p,m){if(p){var v,x,_;if(p.__r3f&&(p.__r3f.parent=null),(v=d.__r3f)!=null&&v.objects&&(d.__r3f.objects=d.__r3f.objects.filter(E=>E!==p)),(x=p.__r3f)!=null&&x.attach)Ag(d,p,p.__r3f.attach);else if(p.isObject3D&&d.isObject3D){var y;d.remove(p),(y=p.__r3f)!=null&&y.root&&cT(p.__r3f.root,p)}const w=(_=p.__r3f)==null?void 0:_.primitive,T=m===void 0?p.dispose!==null&&!w:m;if(!w){var S;r((S=p.__r3f)==null?void 0:S.objects,p,T),r(p.children,p,T)}p.__r3f&&(delete p.__r3f.root,delete p.__r3f.objects,delete p.__r3f.handlers,delete p.__r3f.memoizedProps,w||delete p.__r3f),T&&p.dispose&&p.type!=="Scene"&&Uc.exports.unstable_scheduleCallback(Uc.exports.unstable_IdlePriority,()=>{try{p.dispose()}catch{}}),Qs(d)}}function c(d,p,m,v){var x;const _=(x=d.__r3f)==null?void 0:x.parent;if(!_)return;const y=t(p,m,d.__r3f.root);if(d.children){for(const S of d.children)S.__r3f&&n(y,S);d.children=d.children.filter(S=>!S.__r3f)}d.__r3f.objects.forEach(S=>n(y,S)),d.__r3f.objects=[],a(_,d),n(_,y),y.raycast&&y.__r3f.eventCount&&y.__r3f.root.getState().internal.interaction.push(y),[v,v.alternate].forEach(S=>{S!==null&&(S.stateNode=y,S.ref&&(typeof S.ref=="function"?S.ref(y):S.ref.current=y))})}const u=()=>console.warn("Text is not allowed in the R3F tree! This could be stray whitespace or characters.");return{reconciler:tT({createInstance:t,removeChild:a,appendChild:n,appendInitialChild:n,insertBefore:i,supportsMutation:!0,isPrimaryRenderer:!1,supportsPersistence:!1,supportsHydration:!1,noTimeout:-1,appendChildToContainer:(d,p)=>{if(!p)return;const m=d.getState().scene;!m.__r3f||(m.__r3f.root=d,n(m,p))},removeChildFromContainer:(d,p)=>{!p||a(d.getState().scene,p)},insertInContainerBefore:(d,p,m)=>{if(!p||!m)return;const v=d.getState().scene;!v.__r3f||i(v,p,m)},getRootHostContext:()=>null,getChildHostContext:d=>d,finalizeInitialChildren(d){var p;const m=(p=d?.__r3f)!=null?p:{};return Boolean(m.handlers)},prepareUpdate(d,p,m,v){if(d.__r3f.primitive&&v.object&&v.object!==d)return[!0];{const{args:x=[],children:_,...y}=v,{args:S=[],children:w,...T}=m;if(!Array.isArray(x))throw new Error("R3F: the args prop must be an array!");if(x.some((C,P)=>C!==S[P]))return[!0];const E=Wv(d,y,T,!0);return E.changes.length?[!1,E]:null}},commitUpdate(d,[p,m],v,x,_,y){p?c(d,v,_,y):Gh(d,m)},commitMount(d,p,m,v){var x;const _=(x=d.__r3f)!=null?x:{};d.raycast&&_.handlers&&_.eventCount&&d.__r3f.root.getState().internal.interaction.push(d)},getPublicInstance:d=>d,prepareForCommit:()=>null,preparePortalMount:d=>js(d.getState().scene),resetAfterCommit:()=>{},shouldSetTextContent:()=>!1,clearContainer:()=>!1,hideInstance(d){var p;const{attach:m,parent:v}=(p=d.__r3f)!=null?p:{};m&&v&&Ag(v,d,m),d.isObject3D&&(d.visible=!1),Qs(d)},unhideInstance(d,p){var m;const{attach:v,parent:x}=(m=d.__r3f)!=null?m:{};v&&x&&Vh(x,d,v),(d.isObject3D&&p.visible==null||p.visible)&&(d.visible=!0),Qs(d)},createTextInstance:u,hideTextInstance:u,unhideTextInstance:u,getCurrentEventPriority:()=>e?e():$r.exports.DefaultEventPriority,beforeActiveInstanceBlur:()=>{},afterActiveInstanceBlur:()=>{},detachDeletedInstance:()=>{},now:typeof performance<"u"&&kt.fun(performance.now)?performance.now:kt.fun(Date.now)?Date.now:()=>0,scheduleTimeout:kt.fun(setTimeout)?setTimeout:void 0,cancelTimeout:kt.fun(clearTimeout)?clearTimeout:void 0}),applyProps:Gh}}const qv=l=>!!(l!=null&&l.render),Yv=me.exports.createContext(null),dT=(l,e)=>{const t=$3((c,u)=>{const h=new I,d=new I,p=new I;function m(S=u().camera,w=d,T=u().size){const{width:E,height:C,top:P,left:N}=T,A=E/C;w instanceof I?p.copy(w):p.set(...w);const L=S.getWorldPosition(h).distanceTo(p);if(Bv(S))return{width:E/S.zoom,height:C/S.zoom,top:P,left:N,factor:1,distance:L,aspect:A};{const O=S.fov*Math.PI/180,X=2*Math.tan(O/2)*L,ae=X*(E/C);return{width:ae,height:X,top:P,left:N,factor:E/ae,distance:L,aspect:A}}}let v;const x=S=>c(w=>({performance:{...w.performance,current:S}})),_=new fe;return{set:c,get:u,gl:null,camera:null,raycaster:null,events:{priority:1,enabled:!0,connected:!1},xr:null,invalidate:(S=1)=>l(u(),S),advance:(S,w)=>e(S,w,u()),legacy:!1,linear:!1,flat:!1,scene:js(new Kf),controls:null,clock:new md,pointer:_,mouse:_,frameloop:"always",onPointerMissed:void 0,performance:{current:1,min:.5,max:1,debounce:200,regress:()=>{const S=u();v&&clearTimeout(v),S.performance.current!==S.performance.min&&x(S.performance.min),v=setTimeout(()=>x(u().performance.max),S.performance.debounce)}},size:{width:0,height:0,top:0,left:0,updateStyle:!1},viewport:{initialDpr:0,dpr:0,width:0,height:0,top:0,left:0,aspect:0,distance:0,factor:0,getCurrentViewport:m},setEvents:S=>c(w=>({...w,events:{...w.events,...S}})),setSize:(S,w,T,E,C)=>{const P=u().camera,N={width:S,height:w,top:E||0,left:C||0,updateStyle:T};c(A=>({size:N,viewport:{...A.viewport,...m(P,d,N)}}))},setDpr:S=>c(w=>{const T=Hv(S);return{viewport:{...w.viewport,dpr:T,initialDpr:w.viewport.initialDpr||T}}}),setFrameloop:(S="always")=>{const w=u().clock;w.stop(),w.elapsedTime=0,S!=="never"&&(w.start(),w.elapsedTime=0),c(()=>({frameloop:S}))},previousRoot:void 0,internal:{active:!1,priority:0,frames:0,lastEvent:me.exports.createRef(),interaction:[],hovered:new Map,subscribers:[],initialClick:[0,0],initialHits:[],capturedMap:new Map,subscribe:(S,w,T)=>{const E=u().internal;return E.priority=E.priority+(w>0?1:0),E.subscribers.push({ref:S,priority:w,store:T}),E.subscribers=E.subscribers.sort((C,P)=>C.priority-P.priority),()=>{const C=u().internal;C!=null&&C.subscribers&&(C.priority=C.priority-(w>0?1:0),C.subscribers=C.subscribers.filter(P=>P.ref!==S))}}}}}),n=t.getState();let i=n.size,r=n.viewport.dpr,a=n.camera;return t.subscribe(()=>{const{camera:c,size:u,viewport:h,gl:d,set:p}=t.getState();(u!==i||h.dpr!==r)&&(i=u,r=h.dpr,oT(c,u),d.setPixelRatio(h.dpr),d.setSize(u.width,u.height,u.updateStyle)),c!==a&&(a=c,p(m=>({viewport:{...m.viewport,...m.viewport.getCurrentViewport(c)}})))}),t.subscribe(c=>l(c)),t};let Sc,pT=new Set,mT=new Set,gT=new Set;function Hh(l,e){if(!!l.size)for(const{callback:t}of l.values())t(e)}function qo(l,e){switch(l){case"before":return Hh(pT,e);case"after":return Hh(mT,e);case"tail":return Hh(gT,e)}}let Wh,Xh;function qh(l,e,t){let n=e.clock.getDelta();for(e.frameloop==="never"&&typeof l=="number"&&(n=l-e.clock.elapsedTime,e.clock.oldTime=e.clock.elapsedTime,e.clock.elapsedTime=l),Wh=e.internal.subscribers,Sc=0;Sc<Wh.length;Sc++)Xh=Wh[Sc],Xh.ref.current(Xh.store.getState(),n,t);return!e.internal.priority&&e.gl.render&&e.gl.render(e.scene,e.camera),e.internal.frames=Math.max(0,e.internal.frames-1),e.frameloop==="always"?1:e.internal.frames}function vT(l){let e=!1,t,n,i;function r(u){n=requestAnimationFrame(r),e=!0,t=0,qo("before",u);for(const d of l.values()){var h;i=d.store.getState(),i.internal.active&&(i.frameloop==="always"||i.internal.frames>0)&&!((h=i.gl.xr)!=null&&h.isPresenting)&&(t+=qh(u,i))}if(qo("after",u),t===0)return qo("tail",u),e=!1,cancelAnimationFrame(n)}function a(u,h=1){var d;if(!u)return l.forEach(p=>a(p.store.getState()),h);(d=u.gl.xr)!=null&&d.isPresenting||!u.internal.active||u.frameloop==="never"||(u.internal.frames=Math.min(60,u.internal.frames+h),e||(e=!0,requestAnimationFrame(r)))}function c(u,h=!0,d,p){if(h&&qo("before",u),d)qh(u,d,p);else for(const m of l.values())qh(u,m.store.getState());h&&qo("after",u)}return{loop:r,invalidate:a,advance:c}}function xT(){const l=me.exports.useContext(Yv);if(!l)throw new Error("R3F: Hooks can only be used within the Canvas component!");return l}function _d(l,e=0){const t=xT(),n=t.getState().internal.subscribe,i=kv(l);return Fa(()=>n(i,e,t),[e,n,t]),null}const ao=new Map,{invalidate:Cg,advance:Pg}=vT(ao),{reconciler:Bc,applyProps:wc}=fT(ao,lT),Js={objects:"shallow",strict:!1},_T=(l,e)=>{const t=typeof l=="function"?l(e):l;return qv(t)?t:new Qf({powerPreference:"high-performance",canvas:e,antialias:!0,alpha:!0,...l})};function yT(l){return l instanceof HTMLCanvasElement}function MT(l,e){if(e)return e;if(yT(l)&&l.parentElement){const{width:t,height:n,top:i,left:r}=l.parentElement.getBoundingClientRect();return{width:t,height:n,top:i,left:r}}return{width:0,height:0,top:0,left:0}}function ST(l){const e=ao.get(l),t=e?.fiber,n=e?.store;e&&console.warn("R3F.createRoot should only be called once!");const i=typeof reportError=="function"?reportError:console.error,r=n||dT(Cg,Pg),a=t||Bc.createContainer(r,$r.exports.ConcurrentRoot,null,!1,null,"",i,null);e||ao.set(l,{fiber:a,store:r});let c,u=!1;return{configure(h={}){let{gl:d,size:p,events:m,onCreated:v,shadows:x=!1,linear:_=!1,flat:y=!1,legacy:S=!1,orthographic:w=!1,frameloop:T="always",dpr:E=[1,2],performance:C,raycaster:P,camera:N,onPointerMissed:A}=h,L=r.getState(),O=L.gl;L.gl||L.set({gl:O=_T(d,l)});let X=L.raycaster;X||L.set({raycaster:X=new Nv});const{params:ae,...J}=P||{};if(kt.equ(J,X,Js)||wc(X,{...J}),kt.equ(ae,X.params,Js)||wc(X,{params:{...X.params,...ae}}),!L.camera){const he=N instanceof ya,k=he?N:w?new Sa(0,0,0,0,.1,1e3):new nn(75,0,.1,1e3);he||(k.position.z=5,N&&wc(k,N),N!=null&&N.rotation||k.lookAt(0,0,0)),L.set({camera:k})}if(!L.xr){const he=(B,le)=>{const ne=r.getState();ne.frameloop!=="never"&&Pg(B,!0,ne,le)},k=()=>{const B=r.getState();B.gl.xr.enabled=B.gl.xr.isPresenting,B.gl.xr.setAnimationLoop(B.gl.xr.isPresenting?he:null),B.gl.xr.isPresenting||Cg(B)},U={connect(){const B=r.getState().gl;B.xr.addEventListener("sessionstart",k),B.xr.addEventListener("sessionend",k)},disconnect(){const B=r.getState().gl;B.xr.removeEventListener("sessionstart",k),B.xr.removeEventListener("sessionend",k)}};O.xr&&U.connect(),L.set({xr:U})}if(O.shadowMap){const he=kt.boo(x);if(he&&O.shadowMap.enabled!==x||!kt.equ(x,O.shadowMap,Js)){const k=O.shadowMap.enabled;O.shadowMap.enabled=!!x,he?O.shadowMap.type=Of:Object.assign(O.shadowMap,x),k!==O.shadowMap.enabled&&(O.shadowMap.needsUpdate=!0)}}"ColorManagement"in Oc&&aT(Oc,S,["ColorManagement","legacyMode"]);const H=_?qi:At,K=y?hi:kf;O.outputEncoding!==H&&(O.outputEncoding=H),O.toneMapping!==K&&(O.toneMapping=K),L.legacy!==S&&L.set(()=>({legacy:S})),L.linear!==_&&L.set(()=>({linear:_})),L.flat!==y&&L.set(()=>({flat:y})),d&&!kt.fun(d)&&!qv(d)&&!kt.equ(d,O,Js)&&wc(O,d),m&&!L.events.handlers&&L.set({events:m(r)}),E&&L.viewport.dpr!==Hv(E)&&L.setDpr(E);const ie=MT(l,p);return kt.equ(ie,L.size,Js)||L.setSize(ie.width,ie.height,ie.updateStyle,ie.top,ie.left),L.frameloop!==T&&L.setFrameloop(T),L.onPointerMissed||L.set({onPointerMissed:A}),C&&!kt.equ(C,L.performance,Js)&&L.set(he=>({performance:{...he.performance,...C}})),c=v,u=!0,this},render(h){return u||this.configure(),Bc.updateContainer(me.exports.createElement(wT,{store:r,children:h,onCreated:c,rootElement:l}),a,null,()=>{}),r},unmount(){Zv(l)}}}function wT({store:l,children:e,onCreated:t,rootElement:n}){return Fa(()=>{const i=l.getState();i.set(r=>({internal:{...r.internal,active:!0}})),t&&t(i),l.getState().events.connected||i.events.connect==null||i.events.connect(n)},[]),me.exports.createElement(Yv.Provider,{value:l},e)}function Zv(l,e){const t=ao.get(l),n=t?.fiber;if(n){const i=t?.store.getState();i&&(i.internal.active=!1),Bc.updateContainer(null,n,null,()=>{i&&setTimeout(()=>{try{var r,a,c,u;i.events.disconnect==null||i.events.disconnect(),(r=i.gl)==null||(a=r.renderLists)==null||a.dispose==null||a.dispose(),(c=i.gl)==null||c.forceContextLoss==null||c.forceContextLoss(),(u=i.gl)!=null&&u.xr&&i.xr.disconnect(),sT(i),ao.delete(l),e&&e(l)}catch{}},500)})}}Bc.injectIntoDevTools({bundleType:0,rendererPackageName:"@react-three/fiber",version:me.exports.version});function Zi(){return Zi=Object.assign?Object.assign.bind():function(l){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(l[n]=t[n])}return l},Zi.apply(this,arguments)}function Nf(l,e,t){var n,i,r,a,c;e==null&&(e=100);function u(){var d=Date.now()-a;d<e&&d>=0?n=setTimeout(u,e-d):(n=null,t||(c=l.apply(r,i),r=i=null))}var h=function(){r=this,i=arguments,a=Date.now();var d=t&&!n;return n||(n=setTimeout(u,e)),d&&(c=l.apply(r,i),r=i=null),c};return h.clear=function(){n&&(clearTimeout(n),n=null)},h.flush=function(){n&&(c=l.apply(r,i),r=i=null,clearTimeout(n),n=null)},h}Nf.debounce=Nf;var Lg=Nf;function bT(l){let{debounce:e,scroll:t,polyfill:n,offsetSize:i}=l===void 0?{debounce:0,scroll:!1,offsetSize:!1}:l;const r=n||(typeof window>"u"?class{}:window.ResizeObserver);if(!r)throw new Error("This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills");const[a,c]=me.exports.useState({left:0,top:0,width:0,height:0,bottom:0,right:0,x:0,y:0}),u=me.exports.useRef({element:null,scrollContainers:null,resizeObserver:null,lastBounds:a}),h=e?typeof e=="number"?e:e.scroll:null,d=e?typeof e=="number"?e:e.resize:null,p=me.exports.useRef(!1);me.exports.useEffect(()=>(p.current=!0,()=>void(p.current=!1)));const[m,v,x]=me.exports.useMemo(()=>{const w=()=>{if(!u.current.element)return;const{left:T,top:E,width:C,height:P,bottom:N,right:A,x:L,y:O}=u.current.element.getBoundingClientRect(),X={left:T,top:E,width:C,height:P,bottom:N,right:A,x:L,y:O};u.current.element instanceof HTMLElement&&i&&(X.height=u.current.element.offsetHeight,X.width=u.current.element.offsetWidth),Object.freeze(X),p.current&&!CT(u.current.lastBounds,X)&&c(u.current.lastBounds=X)};return[w,d?Lg(w,d):w,h?Lg(w,h):w]},[c,i,h,d]);function _(){u.current.scrollContainers&&(u.current.scrollContainers.forEach(w=>w.removeEventListener("scroll",x,!0)),u.current.scrollContainers=null),u.current.resizeObserver&&(u.current.resizeObserver.disconnect(),u.current.resizeObserver=null)}function y(){!u.current.element||(u.current.resizeObserver=new r(x),u.current.resizeObserver.observe(u.current.element),t&&u.current.scrollContainers&&u.current.scrollContainers.forEach(w=>w.addEventListener("scroll",x,{capture:!0,passive:!0})))}const S=w=>{!w||w===u.current.element||(_(),u.current.element=w,u.current.scrollContainers=Jv(w),y())};return ET(x,Boolean(t)),TT(v),me.exports.useEffect(()=>{_(),y()},[t,x,v]),me.exports.useEffect(()=>_,[]),[S,a,m]}function TT(l){me.exports.useEffect(()=>{const e=l;return window.addEventListener("resize",e),()=>void window.removeEventListener("resize",e)},[l])}function ET(l,e){me.exports.useEffect(()=>{if(e){const t=l;return window.addEventListener("scroll",t,{capture:!0,passive:!0}),()=>void window.removeEventListener("scroll",t,!0)}},[l,e])}function Jv(l){const e=[];if(!l||l===document.body)return e;const{overflow:t,overflowX:n,overflowY:i}=window.getComputedStyle(l);return[t,n,i].some(r=>r==="auto"||r==="scroll")&&e.push(l),[...e,...Jv(l.parentElement)]}const AT=["x","y","top","bottom","left","right","width","height"],CT=(l,e)=>AT.every(t=>l[t]===e[t]);var PT=Object.defineProperty,LT=Object.defineProperties,RT=Object.getOwnPropertyDescriptors,Rg=Object.getOwnPropertySymbols,IT=Object.prototype.hasOwnProperty,DT=Object.prototype.propertyIsEnumerable,Ig=(l,e,t)=>e in l?PT(l,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):l[e]=t,Dg=(l,e)=>{for(var t in e||(e={}))IT.call(e,t)&&Ig(l,t,e[t]);if(Rg)for(var t of Rg(e))DT.call(e,t)&&Ig(l,t,e[t]);return l},zT=(l,e)=>LT(l,RT(e));function jv(l,e,t){if(!l)return;if(t(l)===!0)return l;let n=e?l.return:l.child;for(;n;){const i=jv(n,e,t);if(i)return i;n=e?null:n.sibling}}function Qv(l){try{return Object.defineProperties(l,{_currentRenderer:{get(){return null},set(){}},_currentRenderer2:{get(){return null},set(){}}})}catch{return l}}const yd=Qv(me.exports.createContext(null));class Kv extends me.exports.Component{render(){return me.exports.createElement(yd.Provider,{value:this._reactInternals},this.props.children)}}const{ReactCurrentOwner:NT,ReactCurrentDispatcher:FT}=me.exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function OT(){const l=me.exports.useContext(yd);if(!l)throw new Error("its-fine: useFiber must be called within a <FiberProvider />!");const e=me.exports.useId();return me.exports.useMemo(()=>{var n;return(n=NT.current)!=null?n:jv(l,!1,i=>{let r=i.memoizedState;for(;r;){if(r.memoizedState===e)return!0;r=r.next}})},[l,e])}function UT(){var l,e;const t=OT(),[n]=me.exports.useState(()=>new Map);n.clear();let i=t;for(;i;){const r=(l=i.type)==null?void 0:l._context;r&&r!==yd&&!n.has(r)&&n.set(r,(e=FT.current)==null?void 0:e.readContext(Qv(r))),i=i.return}return me.exports.useMemo(()=>Array.from(n.keys()).reduce((r,a)=>c=>me.exports.createElement(r,null,me.exports.createElement(a.Provider,zT(Dg({},c),{value:n.get(a)}))),r=>me.exports.createElement(Kv,Dg({},r))),[n])}const Yh={onClick:["click",!1],onContextMenu:["contextmenu",!1],onDoubleClick:["dblclick",!1],onWheel:["wheel",!0],onPointerDown:["pointerdown",!0],onPointerUp:["pointerup",!0],onPointerLeave:["pointerleave",!0],onPointerMove:["pointermove",!0],onPointerCancel:["pointercancel",!0],onLostPointerCapture:["lostpointercapture",!0]};function BT(l){const{handlePointer:e}=uT(l);return{priority:1,enabled:!0,compute(t,n,i){n.pointer.set(t.offsetX/n.size.width*2-1,-(t.offsetY/n.size.height)*2+1),n.raycaster.setFromCamera(n.pointer,n.camera)},connected:void 0,handlers:Object.keys(Yh).reduce((t,n)=>({...t,[n]:e(n)}),{}),connect:t=>{var n;const{set:i,events:r}=l.getState();r.disconnect==null||r.disconnect(),i(a=>({events:{...a.events,connected:t}})),Object.entries((n=r.handlers)!=null?n:[]).forEach(([a,c])=>{const[u,h]=Yh[a];t.addEventListener(u,c,{passive:h})})},disconnect:()=>{const{set:t,events:n}=l.getState();if(n.connected){var i;Object.entries((i=n.handlers)!=null?i:[]).forEach(([r,a])=>{if(n&&n.connected instanceof HTMLElement){const[c]=Yh[r];n.connected.removeEventListener(c,a)}}),t(r=>({events:{...r.events,connected:void 0}}))}}}}const kT=me.exports.forwardRef(function({children:e,fallback:t,resize:n,style:i,gl:r,events:a=BT,eventSource:c,eventPrefix:u,shadows:h,linear:d,flat:p,legacy:m,orthographic:v,frameloop:x,dpr:_,performance:y,raycaster:S,camera:w,onPointerMissed:T,onCreated:E,...C},P){me.exports.useMemo(()=>hT(Oc),[]);const N=UT(),[A,L]=bT({scroll:!0,debounce:{scroll:50,resize:0},...n}),O=me.exports.useRef(null),X=me.exports.useRef(null),[ae,J]=me.exports.useState(null);me.exports.useImperativeHandle(P,()=>O.current);const H=kv(T),[K,ie]=me.exports.useState(!1),[he,k]=me.exports.useState(!1);if(K)throw K;if(he)throw he;const U=me.exports.useRef(null);L.width>0&&L.height>0&&ae&&(U.current||(U.current=ST(ae)),U.current.configure({gl:r,events:a,shadows:h,linear:d,flat:p,legacy:m,orthographic:v,frameloop:x,dpr:_,performance:y,raycaster:S,camera:w,size:L,onPointerMissed:(...le)=>H.current==null?void 0:H.current(...le),onCreated:le=>{le.events.connect==null||le.events.connect(c?nT(c)?c.current:c:X.current),u&&le.setEvents({compute:(ne,de)=>{const we=ne[u+"X"],Be=ne[u+"Y"];de.pointer.set(we/de.size.width*2-1,-(Be/de.size.height)*2+1),de.raycaster.setFromCamera(de.pointer,de.camera)}}),E?.(le)}}),U.current.render(me.exports.createElement(N,null,me.exports.createElement(Vv,{set:k},me.exports.createElement(me.exports.Suspense,{fallback:me.exports.createElement(iT,{set:ie})},e))))),Fa(()=>{J(O.current)},[]),me.exports.useEffect(()=>{if(ae)return()=>Zv(ae)},[ae]);const B=c?"none":"auto";return me.exports.createElement("div",Zi({ref:X,style:{position:"relative",width:"100%",height:"100%",overflow:"hidden",pointerEvents:B,...i}},C),me.exports.createElement("div",{ref:A,style:{width:"100%",height:"100%"}},me.exports.createElement("canvas",{ref:O,style:{display:"block"}},t)))}),VT=me.exports.forwardRef(function(e,t){return me.exports.createElement(Kv,null,me.exports.createElement(kT,Zi({},e,{ref:t})))});function $v(l){return function(e){l.forEach(function(t){typeof t=="function"?t(e):t!=null&&(t.current=e)})}}class GT extends jc{constructor(e){super(e),this.onBeforeCompile=(t,n)=>{const{isWebGL2:i}=n.capabilities;t.fragmentShader=t.fragmentShader.replace("#include <output_fragment>",`
        ${i?"#include <output_fragment>":`#extension GL_OES_standard_derivatives : enable
#include <output_fragment>`}
      vec2 cxy = 2.0 * gl_PointCoord - 1.0;
      float r = dot(cxy, cxy);
      float delta = fwidth(r);     
      float mask = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);
      gl_FragColor = vec4(gl_FragColor.rgb, mask * gl_FragColor.a );
      `)}}}const HT=me.exports.forwardRef((l,e)=>{const[t]=me.exports.useState(()=>new GT(null));return me.exports.createElement("primitive",Zi({},l,{object:t,ref:e,attach:"material"}))});let Xr,Yo;const WT=me.exports.createContext(null),zg=new et,Ng=new I,XT=me.exports.forwardRef(({children:l,range:e,limit:t=1e3,...n},i)=>{const r=me.exports.useRef(null),[a,c]=me.exports.useState([]),[[u,h,d]]=me.exports.useState(()=>[new Float32Array(t*3),Float32Array.from({length:t*3},()=>1),Float32Array.from({length:t},()=>1)]);me.exports.useEffect(()=>{r.current.geometry.attributes.position.needsUpdate=!0}),_d(()=>{for(r.current.updateMatrix(),r.current.updateMatrixWorld(),zg.copy(r.current.matrixWorld).invert(),r.current.geometry.drawRange.count=Math.min(t,e!==void 0?e:t,a.length),Xr=0;Xr<a.length;Xr++)Yo=a[Xr].current,Yo.getWorldPosition(Ng).applyMatrix4(zg),Ng.toArray(u,Xr*3),r.current.geometry.attributes.position.needsUpdate=!0,Yo.matrixWorldNeedsUpdate=!0,Yo.color.toArray(h,Xr*3),r.current.geometry.attributes.color.needsUpdate=!0,d.set([Yo.size],Xr),r.current.geometry.attributes.size.needsUpdate=!0});const p=me.exports.useMemo(()=>({getParent:()=>r,subscribe:m=>(c(v=>[...v,m]),()=>c(v=>v.filter(x=>x.current!==m.current)))}),[]);return me.exports.createElement("points",Zi({userData:{instances:a},matrixAutoUpdate:!1,ref:$v([i,r]),raycast:()=>null},n),me.exports.createElement("bufferGeometry",null,me.exports.createElement("bufferAttribute",{attach:"attributes-position",count:u.length/3,array:u,itemSize:3,usage:ns}),me.exports.createElement("bufferAttribute",{attach:"attributes-color",count:h.length/3,array:h,itemSize:3,usage:ns}),me.exports.createElement("bufferAttribute",{attach:"attributes-size",count:d.length,array:d,itemSize:1,usage:ns})),me.exports.createElement(WT.Provider,{value:p},l))}),qT=me.exports.forwardRef(({children:l,positions:e,colors:t,sizes:n,stride:i=3,...r},a)=>{const c=me.exports.useRef(null);return _d(()=>{const u=c.current.geometry.attributes;u.position.needsUpdate=!0,t&&(u.color.needsUpdate=!0),n&&(u.size.needsUpdate=!0)}),me.exports.createElement("points",Zi({ref:$v([a,c])},r),me.exports.createElement("bufferGeometry",null,me.exports.createElement("bufferAttribute",{attach:"attributes-position",count:e.length/i,array:e,itemSize:i,usage:ns}),t&&me.exports.createElement("bufferAttribute",{attach:"attributes-color",count:t.length/i,array:t,itemSize:3,usage:ns}),n&&me.exports.createElement("bufferAttribute",{attach:"attributes-size",count:n.length/i,array:n,itemSize:1,usage:ns})),l)}),YT=me.exports.forwardRef((l,e)=>l.positions instanceof Float32Array?me.exports.createElement(qT,Zi({},l,{ref:e})):me.exports.createElement(XT,Zi({},l,{ref:e})));function ZT(l,e,t){const n=(Math.random()*(e-l)+l).toFixed(t);return parseFloat(n)}function $T(){return Jo.exports.jsx(VT,{camera:{position:[0,0,1]},children:Jo.exports.jsx(JT,{})})}function JT(l){const e=me.exports.useRef(null),t=new Float32Array(1e3).map(()=>ZT(-1,1,8)),[n]=me.exports.useState(()=>t);return _d((i,r)=>{e.current.rotation.x-=r/40,e.current.rotation.y-=r/60}),Jo.exports.jsx("group",{rotation:[0,0,-1],children:Jo.exports.jsx(YT,{ref:e,positions:n,stride:3,frustumCulled:!1,...l,children:Jo.exports.jsx(HT,{transparent:!0,color:"#ffa0e0",size:.005,sizeAttenuation:!0,depthWrite:!1})})})}export{$T as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
